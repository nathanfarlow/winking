// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Bin_prot
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_prot = [0];
   runtime.caml_register_global(0, Bin_prot, "Bin_prot");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Common
//# unitInfo: Requires: Assert_failure, Base, Base__Printf, Sexplib0__Sexp_conv, Stdlib__Bigarray, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_dst_pos$3 = "dst_pos",
    cst_src_pos$3 = "src_pos",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    loc$2 = "blit_buf_string",
    loc$1 = "blit_bytes_buf",
    loc$0 = "blit_string_buf",
    loc = "blit_buf",
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Base = global_data.Base,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    sexp_of_pos = Base[119],
    Buffer_short = [248, "Bin_prot.Common.Buffer_short", caml_fresh_oo_id(0)],
    No_variant_match =
      [248, "Bin_prot.Common.No_variant_match", caml_fresh_oo_id(0)],
    cst_src_pos$2 = cst_src_pos$3,
    cst_dst_pos$2 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_buf_s$5 =
      "Bin_prot.Common.blit_buf_string: len < 0",
    cst_Bin_prot_Common_blit_buf_s$1 =
      "Bin_prot.Common.blit_buf_string: src_pos > buf_len",
    cst_Bin_prot_Common_blit_buf_s$2 =
      "Bin_prot.Common.blit_buf_string: src_pos > str_len",
    cst_Bin_prot_Common_blit_buf_s$3 =
      "Bin_prot.Common.blit_buf_string: src_pos + len > buf_len",
    cst_Bin_prot_Common_blit_buf_s$4 =
      "Bin_prot.Common.blit_buf_string: src_pos + len > str_len",
    cst_src_pos$1 = cst_src_pos$3,
    cst_dst_pos$1 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_bytes$3 =
      "Bin_prot.Common.blit_bytes_buf: len < 0",
    cst_Bin_prot_Common_blit_bytes =
      "Bin_prot.Common.blit_bytes_buf: src_pos > str_len",
    cst_Bin_prot_Common_blit_bytes$0 =
      "Bin_prot.Common.blit_bytes_buf: src_pos > buf",
    cst_Bin_prot_Common_blit_bytes$1 =
      "Bin_prot.Common.blit_bytes_buf: src_pos + len > str_len",
    cst_Bin_prot_Common_blit_bytes$2 =
      "Bin_prot.Common.blit_bytes_buf: src_pos + len > buf",
    cst_src_pos$0 = cst_src_pos$3,
    cst_dst_pos$0 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_strin$3 =
      "Bin_prot.Common.blit_string_buf: len < 0",
    cst_Bin_prot_Common_blit_strin =
      "Bin_prot.Common.blit_string_buf: src_pos > str_len",
    cst_Bin_prot_Common_blit_strin$0 =
      "Bin_prot.Common.blit_string_buf: src_pos > buf",
    cst_Bin_prot_Common_blit_strin$1 =
      "Bin_prot.Common.blit_string_buf: src_pos + len > str_len",
    cst_Bin_prot_Common_blit_strin$2 =
      "Bin_prot.Common.blit_string_buf: src_pos + len > buf",
    cst_src_pos = cst_src_pos$3,
    cst_dst_pos = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_buf_l = "Bin_prot.Common.blit_buf: len < 0",
    cst_Bin_prot_Common_blit_buf_s =
      "Bin_prot.Common.blit_buf: src_pos > src_len",
    cst_Bin_prot_Common_blit_buf_d =
      "Bin_prot.Common.blit_buf: dst_pos > dst_len",
    cst_Bin_prot_Common_blit_buf_s$0 =
      "Bin_prot.Common.blit_buf: src_pos + len > src_len",
    cst_Bin_prot_Common_blit_buf_d$0 =
      "Bin_prot.Common.blit_buf: dst_pos + len > dst_len",
    _e_ =
      [0,
       [11, "Bin_prot.Common.", [2, 0, [11, ": ", [2, 0, [11, " < 0", 0]]]]],
       "Bin_prot.Common.%s: %s < 0"],
    cst_index_out_of_bounds = "index out of bounds",
    cst_concurrent_modification = ": concurrent modification",
    _c_ = [0, "src/common.ml.Read_error"],
    _d_ = [0, "_none_", 0, -1],
    cst_Neg_int8 = "Neg_int8",
    cst_Int_code = "Int_code",
    cst_Int_overflow = "Int_overflow",
    cst_Nat0_code = "Nat0_code",
    cst_Nat0_overflow = "Nat0_overflow",
    cst_Int32_code = "Int32_code",
    cst_Int64_code = "Int64_code",
    cst_Nativeint_code = "Nativeint_code",
    cst_Unit_code = "Unit_code",
    cst_Bool_code = "Bool_code",
    cst_Option_code = "Option_code",
    cst_String_too_long = "String_too_long",
    cst_Variant_tag = "Variant_tag",
    cst_Array_too_long = "Array_too_long",
    cst_Hashtbl_too_long = "Hashtbl_too_long",
    _a_ =
      [0,
       [11,
        "List_too_long / ",
        [4, 0, 0, 0, [11, " (max ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "List_too_long / %d (max %d)"],
    cst_Sum_tag = "Sum_tag / ",
    cst_Variant = "Variant / ",
    cst_Poly_rec_bound = "Poly_rec_bound / ",
    cst_Variant_wrong_type = "Variant_wrong_type / ",
    cst_Silly_type = "Silly_type / ",
    cst_Empty_type = "Empty_type / ",
    cst_Bin_prot_Common_Read_error = "Bin_prot.Common.Read_error",
    cst_Bin_prot_Common_Poly_rec_w = "Bin_prot.Common.Poly_rec_write",
    cst_Bin_prot_Common_Empty_type = "Bin_prot.Common.Empty_type";
   function to_string(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_Neg_int8;
       case 1:
        return cst_Int_code;
       case 2:
        return cst_Int_overflow;
       case 3:
        return cst_Nat0_code;
       case 4:
        return cst_Nat0_overflow;
       case 5:
        return cst_Int32_code;
       case 6:
        return cst_Int64_code;
       case 7:
        return cst_Nativeint_code;
       case 8:
        return cst_Unit_code;
       case 9:
        return cst_Bool_code;
       case 10:
        return cst_Option_code;
       case 11:
        return cst_String_too_long;
       case 12:
        return cst_Variant_tag;
       case 13:
        return cst_Array_too_long;
       default: return cst_Hashtbl_too_long;
     }
    switch(param[0]){
      case 0:
       var max_len = param[2], len = param[1];
       return caml_call3(Base_Printf[2], _a_, len, max_len);
      case 1:
       var loc = param[1]; return caml_call2(Base[197], cst_Sum_tag, loc);
      case 2:
       var loc$0 = param[1]; return caml_call2(Base[197], cst_Variant, loc$0);
      case 3:
       var loc$1 = param[1];
       return caml_call2(Base[197], cst_Poly_rec_bound, loc$1);
      case 4:
       var loc$2 = param[1];
       return caml_call2(Base[197], cst_Variant_wrong_type, loc$2);
      case 5:
       var loc$3 = param[1];
       return caml_call2(Base[197], cst_Silly_type, loc$3);
      default:
       var loc$4 = param[1];
       return caml_call2(Base[197], cst_Empty_type, loc$4);
    }
   }
   var
    Read_error = [248, cst_Bin_prot_Common_Read_error, caml_fresh_oo_id(0)];
   function _b_(param){
    if(param[1] !== Read_error)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = [0, to_string(arg0_001)],
     res1_004 = caml_call1(sexp_of_pos, arg1_002);
    return [1, [0, _c_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[70][1], 0, 0, Read_error, _b_);
   var
    Poly_rec_write =
      [248, cst_Bin_prot_Common_Poly_rec_w, caml_fresh_oo_id(0)],
    Empty_type = [248, cst_Bin_prot_Common_Empty_type, caml_fresh_oo_id(0)];
   function raise_read_error(err, pos){
    throw caml_maybe_attach_backtrace([0, Read_error, err, pos], 1);
   }
   function raise_variant_wrong_type(name, pos){
    throw caml_maybe_attach_backtrace([0, Read_error, [4, name], pos], 1);
   }
   function raise_concurrent_modification(loc){
    var _p_ = caml_call2(Base[197], loc, cst_concurrent_modification);
    return caml_call1(Base[200], _p_);
   }
   function array_bound_error(param){
    return caml_call1(Base[201], cst_index_out_of_bounds);
   }
   function create_buf(n){
    return caml_call3
            (Stdlib_Bigarray[19][1],
             Stdlib_Bigarray[13],
             Stdlib_Bigarray[15],
             n);
   }
   var buf_len = caml_ba_dim_1;
   function assert_pos(pos){
    var _o_ = pos < 0 ? 1 : 0;
    return _o_ ? array_bound_error(0) : _o_;
   }
   function check_pos(buf, pos){
    var _n_ = caml_ba_dim_1(buf) <= pos ? 1 : 0;
    if(_n_) throw caml_maybe_attach_backtrace(Buffer_short, 1);
    return _n_;
   }
   function safe_get_pos(buf, pos_ref){
    var pos = pos_ref[1];
    check_pos(buf, pos);
    return pos;
   }
   function check_next(buf, next){
    var _m_ = caml_ba_dim_1(buf) < next ? 1 : 0;
    if(_m_) throw caml_maybe_attach_backtrace(Buffer_short, 1);
    return _m_;
   }
   function get_opt_pos(loc, var$0, param){
    if(! param) return 0;
    var pos = param[1];
    if(pos < 0){
     var _l_ = caml_call3(Base_Printf[2], _e_, loc, var$0);
     caml_call1(Base[201], _l_);
    }
    return pos;
   }
   function blit_buf(src_pos, src, dst_pos, dst, len){
    var
     src_pos$0 = get_opt_pos(loc, cst_src_pos, src_pos),
     dst_pos$0 = get_opt_pos(loc, cst_dst_pos, dst_pos);
    if(0 > len) return caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_l);
    if(0 !== len)
     return caml_ba_dim_1(src) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$0)
             : caml_ba_dim_1
                (dst)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_d$0)
               : runtime.bin_prot_blit_buf_stub
                 (src_pos$0, src, dst_pos$0, dst, len);
    if(caml_ba_dim_1(src) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s);
    var _k_ = caml_ba_dim_1(dst) < dst_pos$0 ? 1 : 0;
    return _k_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_d) : _k_;
   }
   function blit_string_buf(src_pos, str, dst_pos, buf, len){
    var
     src_pos$0 = get_opt_pos(loc$0, cst_src_pos$0, src_pos),
     dst_pos$0 = get_opt_pos(loc$0, cst_dst_pos$0, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$3);
    if(0 !== len)
     return caml_ml_string_length(str) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$1)
             : caml_ba_dim_1
                (buf)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$2)
               : runtime.bin_prot_blit_string_buf_stub
                 (src_pos$0, str, dst_pos$0, buf, len);
    if(caml_ml_string_length(str) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_strin);
    var _j_ = caml_ba_dim_1(buf) < dst_pos$0 ? 1 : 0;
    return _j_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$0) : _j_;
   }
   function blit_bytes_buf(src_pos, str, dst_pos, buf, len){
    var
     src_pos$0 = get_opt_pos(loc$1, cst_src_pos$1, src_pos),
     dst_pos$0 = get_opt_pos(loc$1, cst_dst_pos$1, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$3);
    if(0 !== len)
     return caml_ml_bytes_length(str) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$1)
             : caml_ba_dim_1
                (buf)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$2)
               : runtime.bin_prot_blit_bytes_buf_stub
                 (src_pos$0, str, dst_pos$0, buf, len);
    if(caml_ml_bytes_length(str) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes);
    var _i_ = caml_ba_dim_1(buf) < dst_pos$0 ? 1 : 0;
    return _i_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$0) : _i_;
   }
   function blit_buf_bytes(src_pos, buf, dst_pos, str, len){
    var
     src_pos$0 = get_opt_pos(loc$2, cst_src_pos$2, src_pos),
     dst_pos$0 = get_opt_pos(loc$2, cst_dst_pos$2, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$5);
    if(0 !== len)
     return caml_ba_dim_1(buf) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$3)
             : caml_ml_bytes_length
                (str)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$4)
               : runtime.bin_prot_blit_buf_bytes_stub
                 (src_pos$0, buf, dst_pos$0, str, len);
    if(caml_ba_dim_1(buf) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$1);
    var _h_ = caml_ml_bytes_length(str) < dst_pos$0 ? 1 : 0;
    return _h_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$2) : _h_;
   }
   function copy_htbl_list(htbl, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return htbl;
     var rest = param$0[2], match = param$0[1], v = match[2], k = match[1];
     caml_call3(Stdlib_Hashtbl[5], htbl, k, v);
     var param$0 = rest;
    }
   }
   function symbol(_g_, _f_){return _g_ + _f_ | 0;}
   var
    Bin_prot_Common =
      [0,
       create_buf,
       buf_len,
       assert_pos,
       check_pos,
       check_next,
       safe_get_pos,
       blit_string_buf,
       blit_bytes_buf,
       blit_buf_bytes,
       blit_buf_bytes,
       blit_buf,
       Buffer_short,
       No_variant_match,
       [0, to_string],
       Read_error,
       Poly_rec_write,
       Empty_type,
       raise_read_error,
       raise_variant_wrong_type,
       raise_concurrent_modification,
       array_bound_error,
       copy_htbl_list,
       symbol];
   runtime.caml_register_global(70, Bin_prot_Common, "Bin_prot__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Nat0
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Bin_prot_Nat0_of_int_n_0 = "Bin_prot.Nat0.of_int: n < 0";
   function of_int(n){
    if(n < 0) caml_call1(Stdlib[2], cst_Bin_prot_Nat0_of_int_n_0);
    return n;
   }
   var Bin_prot_Nat0 = [0, of_int];
   runtime.caml_register_global(2, Bin_prot_Nat0, "Bin_prot__Nat0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Write
//# unitInfo: Requires: Assert_failure, Bin_prot__Common, CamlinternalLazy, Md5_lib, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Int64, Stdlib__List, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_uint8_set16 = runtime.caml_ba_uint8_set16,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_string_get32 = runtime.caml_string_get32,
    caml_string_get64 = runtime.caml_string_get64;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Md5_lib = global_data.Md5_lib,
    Assert_failure = global_data.Assert_failure,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib_List = global_data.Stdlib__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Sys = global_data.Stdlib__Sys,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    _e_ = [0, "src/write.ml", 500, 2],
    cst_bin_write_hashtbl = "bin_write_hashtbl",
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    _c_ = runtime.caml_int64_create_lo_mi_hi(32768, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16744448, 16777215, 65535),
    unsafe_set16be =
      arch_big_endian
       ? caml_ba_uint8_set16
       : function
        (buf, pos, x){
         return caml_ba_uint8_set16(buf, pos, caml_bswap16(x));
        },
    unsafe_set32be =
      arch_big_endian
       ? caml_ba_uint8_set32
       : function
        (buf, pos, x){
         return caml_ba_uint8_set32(buf, pos, caml_int32_bswap(x));
        },
    unsafe_set64be =
      arch_big_endian
       ? caml_ba_uint8_set64
       : function
        (buf, pos, x){
         return caml_ba_uint8_set64(buf, pos, caml_int64_bswap(x));
        },
    unsafe_set16le =
      arch_big_endian
       ? function
        (buf, pos, x){
         return caml_ba_uint8_set16(buf, pos, caml_bswap16(x));
        }
       : caml_ba_uint8_set16,
    unsafe_set32le =
      arch_big_endian
       ? function
        (buf, pos, x){
         return caml_ba_uint8_set32(buf, pos, caml_int32_bswap(x));
        }
       : caml_ba_uint8_set32,
    unsafe_set64le =
      arch_big_endian
       ? function
        (buf, pos, x){
         return caml_ba_uint8_set64(buf, pos, caml_int64_bswap(x));
        }
       : caml_ba_uint8_set64;
   function bin_write_unit(buf, pos, param){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, 0);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_bool(buf, pos, b){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    var _w_ = b ? 1 : 0;
    caml_ba_set_1(buf, pos, _w_);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function all_bin_write_small_int(buf, pos, n){
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, n);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function all_bin_write_int16(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 3);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 254);
    unsafe_set16le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function all_bin_write_int32(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 5);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 253);
    unsafe_set32le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function all_bin_write_int64(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 9);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 252);
    unsafe_set64le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function bin_write_char(buf, pos, c){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, c);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    if(0 <= n){
     if(128 > n) return all_bin_write_small_int(buf, pos, n);
     if(32768 > n) return all_bin_write_int16(buf, pos, n);
     if(arch_sixtyfour && -2147483648 <= n)
      return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
     return all_bin_write_int32(buf, pos, n);
    }
    if(-128 <= n){
     var next = caml_call2(Bin_prot_Common[23], pos, 2);
     caml_call2(Bin_prot_Common[5], buf, next);
     caml_ba_set_1(buf, pos, 255);
     caml_ba_set_1(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
     return next;
    }
    if(-32768 <= n) return all_bin_write_int16(buf, pos, n);
    if(arch_sixtyfour && n < -2147483648)
     return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
    return all_bin_write_int32(buf, pos, n);
   }
   function bin_write_nat0(buf, pos, nat0){
    caml_call1(Bin_prot_Common[3], pos);
    if(128 > nat0) return all_bin_write_small_int(buf, pos, nat0);
    if(65536 > nat0) return all_bin_write_int16(buf, pos, nat0);
    if(arch_sixtyfour && 1 <= nat0)
     return all_bin_write_int64(buf, pos, caml_int64_of_int32(nat0));
    return all_bin_write_int32(buf, pos, nat0);
   }
   function bin_write_string(buf, pos, str){
    var
     len = caml_ml_string_length(str),
     new_pos = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], new_pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_string_buf_stub(0, str, new_pos, buf, len);
    return next;
   }
   function bin_write_bytes(buf, pos, str){
    var
     len = runtime.caml_ml_bytes_length(str),
     new_pos = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], new_pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_bytes_buf_stub(0, str, new_pos, buf, len);
    return next;
   }
   function bin_write_float(buf, pos, x){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, runtime.caml_int64_bits_of_float(x));
    return next;
   }
   var
    bin_write_int32 =
      arch_sixtyfour
       ? function(buf, pos, n){return bin_write_int(buf, pos, n);}
       : function
        (buf, pos, n){
         if(! caml_greaterequal(n, 32768) && ! caml_lessthan(n, -32768))
          return bin_write_int(buf, pos, n);
         caml_call1(Bin_prot_Common[3], pos);
         return all_bin_write_int32(buf, pos, n);
        };
   function bin_write_int64(buf, pos, n){
    if(! caml_greaterequal(n, _a_) && ! caml_lessthan(n, _b_)){
     if(arch_sixtyfour)
      return bin_write_int(buf, pos, caml_int64_to_int32(n));
     if(! caml_greaterequal(n, _c_) && ! caml_lessthan(n, _d_))
      return bin_write_int(buf, pos, caml_int64_to_int32(n));
     caml_call1(Bin_prot_Common[3], pos);
     return all_bin_write_int32(buf, pos, caml_int64_to_int32(n));
    }
    caml_call1(Bin_prot_Common[3], pos);
    return all_bin_write_int64(buf, pos, n);
   }
   function bin_write_nativeint(buf, pos, n){
    if(arch_sixtyfour){
     var switch$0 = 0;
     if
      (! caml_greaterequal(n, -2147483648) && ! caml_lessthan(n, -2147483648))
      switch$0 = 1;
     if(! switch$0){
      caml_call1(Bin_prot_Common[3], pos);
      return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
     }
    }
    var switch$1 = 0;
    if(! arch_sixtyfour && caml_greaterequal(n, 32768)) switch$1 = 1;
    if(! switch$1 && ! caml_lessthan(n, -32768))
     return bin_write_int(buf, pos, n);
    caml_call1(Bin_prot_Common[3], pos);
    return all_bin_write_int32(buf, pos, n);
   }
   function bin_write_ref(bin_write_el, buf, pos, r){return caml_call3(bin_write_el, buf, pos, r[1]);
   }
   function bin_write_lazy(bin_write_el, buf, pos, lv){
    var
     _v_ = runtime.caml_obj_tag(lv),
     v =
       250 === _v_
        ? lv[1]
        : 246 === _v_ ? caml_call1(CamlinternalLazy[2], lv) : lv;
    return caml_call3(bin_write_el, buf, pos, v);
   }
   function bin_write_option(bin_write_el, buf, pos, param){
    if(! param) return bin_write_bool(buf, pos, 0);
    var v = param[1], next = bin_write_bool(buf, pos, 1);
    return caml_call3(bin_write_el, buf, next, v);
   }
   function bin_write_pair(bin_write_a, bin_write_b, buf, pos, param){
    var
     b = param[2],
     a = param[1],
     next = caml_call3(bin_write_a, buf, pos, a);
    return caml_call3(bin_write_b, buf, next, b);
   }
   function bin_write_triple
   (bin_write_a, bin_write_b, bin_write_c, buf, pos, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     next1 = caml_call3(bin_write_a, buf, pos, a),
     next2 = caml_call3(bin_write_b, buf, next1, b);
    return caml_call3(bin_write_c, buf, next2, c);
   }
   function bin_write_list(bin_write_el, buf, pos, lst$1){
    var
     len = caml_call1(Stdlib_List[1], lst$1),
     els_pos$0 = bin_write_nat0(buf, pos, len),
     els_pos = els_pos$0,
     lst = lst$1;
    for(;;){
     if(! lst) return els_pos;
     var
      lst$0 = lst[2],
      hd = lst[1],
      new_els_pos = caml_call3(bin_write_el, buf, els_pos, hd),
      els_pos = new_els_pos,
      lst = lst$0;
    }
   }
   function bin_write_float_array_gen(length, blit, buf, pos, a){
    var
     len = caml_call1(length, a),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_call5(blit, 0, a, pos$0, buf, len);
    return next;
   }
   function bin_write_floatarray(buf, pos, a){
    function _p_(_u_, _t_, _s_, _r_, _q_){
     return runtime.bin_prot_blit_float_array_buf_stub
             (_u_, _t_, _s_, _r_, _q_);
    }
    return bin_write_float_array_gen(Stdlib_Float[28][1], _p_, buf, pos, a);
   }
   function bin_write_float_array(buf, pos, a){
    function _i_(_o_, _n_, _m_, _l_, _k_){
     return runtime.bin_prot_blit_float_array_buf_stub
             (_o_, _n_, _m_, _l_, _k_);
    }
    return bin_write_float_array_gen
            (function(_j_){return _j_.length - 1;}, _i_, buf, pos, a);
   }
   function bin_write_array_loop(bin_write_el, buf, els_pos, n, ar){
    var els_pos_ref = [0, els_pos], _g_ = n - 1 | 0, _f_ = 0;
    if(_g_ >= 0){
     var i = _f_;
     for(;;){
      els_pos_ref[1] =
       caml_call3(bin_write_el, buf, els_pos_ref[1], ar[1 + i]);
      var _h_ = i + 1 | 0;
      if(_g_ !== i){var i = _h_; continue;}
      break;
     }
    }
    return els_pos_ref[1];
   }
   function bin_write_array(bin_write_el, buf, pos, ar){
    if(bin_write_el === bin_write_float)
     return bin_write_float_array(buf, pos, ar);
    var n = ar.length - 1, els_pos = bin_write_nat0(buf, pos, n);
    return bin_write_array_loop(bin_write_el, buf, els_pos, n, ar);
   }
   function bin_write_hashtbl(bin_write_key, bin_write_val, buf, pos, htbl){
    var
     plen = caml_call1(Stdlib_Hashtbl[15], htbl),
     els_pos = bin_write_nat0(buf, pos, plen),
     cnt_ref = [0, 0];
    function coll_htbl(k, v, els_pos){
     cnt_ref[1]++;
     var new_els_pos = caml_call3(bin_write_key, buf, els_pos, k);
     return caml_call3(bin_write_val, buf, new_els_pos, v);
    }
    var res_pos = caml_call3(Stdlib_Hashtbl[14], coll_htbl, htbl, els_pos);
    if(cnt_ref[1] !== plen)
     caml_call1(Bin_prot_Common[20], cst_bin_write_hashtbl);
    return res_pos;
   }
   function bin_write_float32_vec(buf, pos, v){
    var
     len = caml_ba_dim_1(v),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 4 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, v, pos$0, buf, size);
    return next;
   }
   function bin_write_float64_vec(buf, pos, v){
    var
     len = caml_ba_dim_1(v),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, v, pos$0, buf, size);
    return next;
   }
   function bin_write_float32_mat(buf, pos, m){
    var
     len1 = caml_ba_dim_1(m),
     len2 = caml_ba_dim_2(m),
     pos$0 = bin_write_nat0(buf, pos, len1),
     pos$1 = bin_write_nat0(buf, pos$0, len2),
     size = caml_mul(len1, len2) * 4 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$1, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, m, pos$1, buf, size);
    return next;
   }
   function bin_write_float64_mat(buf, pos, m){
    var
     len1 = caml_ba_dim_1(m),
     len2 = caml_ba_dim_2(m),
     pos$0 = bin_write_nat0(buf, pos, len1),
     pos$1 = bin_write_nat0(buf, pos$0, len2),
     size = caml_mul(len1, len2) * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$1, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, m, pos$1, buf, size);
    return next;
   }
   function bin_write_bigstring(buf, pos, s){
    var
     len = caml_ba_dim_1(s),
     pos$0 = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], pos$0, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, s, pos$0, buf, len);
    return next;
   }
   function bin_write_variant_int(buf, pos, x){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32le(buf, pos, x << 1 | 1);
    return next;
   }
   function bin_write_int_8bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, n);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_int_16bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set16le(buf, pos, n);
    return next;
   }
   function bin_write_int_32bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32le(buf, pos, n);
    return next;
   }
   function bin_write_int_64bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, caml_int64_of_int32(n));
    return next;
   }
   function bin_write_int64_bits(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, n);
    return next;
   }
   function bin_write_network16_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set16be(buf, pos, n);
    return next;
   }
   function bin_write_network32_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32be(buf, pos, n);
    return next;
   }
   function bin_write_network32_int32(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32be(buf, pos, n);
    return next;
   }
   function bin_write_network64_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64be(buf, pos, caml_int64_of_int32(n));
    return next;
   }
   function bin_write_network64_int64(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64be(buf, pos, n);
    return next;
   }
   function bin_write_array_no_length(bin_write_el, buf, pos, ar){
    return bin_write_array_loop(bin_write_el, buf, pos, ar.length - 1, ar);
   }
   function bin_write_md5(buf, pos, x){
    var x$0 = caml_call1(Md5_lib[3], x);
    if(16 !== caml_ml_string_length(x$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 16);
    caml_call2(Bin_prot_Common[5], buf, next);
    if(arch_sixtyfour){
     var a = caml_string_get64(x$0, 0), b = caml_string_get64(x$0, 8);
     caml_ba_uint8_set64(buf, pos, a);
     caml_ba_uint8_set64(buf, caml_call2(Bin_prot_Common[23], pos, 8), b);
    }
    else{
     var
      a$0 = caml_string_get32(x$0, 0),
      b$0 = caml_string_get32(x$0, 4),
      c = caml_string_get32(x$0, 8),
      d = caml_string_get32(x$0, 12);
     caml_ba_uint8_set32(buf, pos, a$0);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 4), b$0);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 8), c);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 12), d);
    }
    return next;
   }
   var
    Bin_prot_Write =
      [0,
       bin_write_unit,
       bin_write_bool,
       bin_write_string,
       bin_write_bytes,
       bin_write_char,
       bin_write_int,
       bin_write_nat0,
       bin_write_float,
       bin_write_int32,
       bin_write_int64,
       bin_write_nativeint,
       bin_write_ref,
       bin_write_lazy,
       bin_write_option,
       bin_write_pair,
       bin_write_triple,
       bin_write_list,
       bin_write_array,
       bin_write_hashtbl,
       bin_write_float32_vec,
       bin_write_float64_vec,
       bin_write_float64_vec,
       bin_write_float32_mat,
       bin_write_float64_mat,
       bin_write_float64_mat,
       bin_write_bigstring,
       bin_write_floatarray,
       bin_write_float_array,
       bin_write_md5,
       bin_write_variant_int,
       bin_write_int_8bit,
       bin_write_int_16bit,
       bin_write_int_32bit,
       bin_write_int_64bit,
       bin_write_int64_bits,
       bin_write_network16_int,
       bin_write_network32_int,
       bin_write_network32_int32,
       bin_write_network64_int,
       bin_write_network64_int64,
       bin_write_array_no_length];
   runtime.caml_register_global(21, Bin_prot_Write, "Bin_prot__Write");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Read
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Write, Md5_lib, Stdlib, Stdlib__Array, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Int32, Stdlib__Int64, Stdlib__Lazy, Stdlib__List, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_uint8_get16 = runtime.caml_ba_uint8_get16,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Md5_lib = global_data.Md5_lib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Bin_prot_Write = global_data.Bin_prot__Write,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    max_int_int32 = arch_sixtyfour ? Stdlib_Int32[9] : Stdlib[19],
    min_int_int32 = arch_sixtyfour ? Stdlib_Int32[9] : Stdlib[20],
    max_int_int64 = caml_int64_of_int32(Stdlib[19]),
    min_int_int64 = caml_int64_of_int32(Stdlib[20]);
   function safe_int_of_int32(pos, x){
    if(arch_sixtyfour) return x;
    if
     (caml_greaterequal(x, min_int_int32) && caml_lessequal(x, max_int_int32))
     return x;
    return caml_call2(Bin_prot_Common[18], 2, pos);
   }
   function safe_int_of_int64(pos, x){
    if
     (caml_greaterequal(x, min_int_int64) && caml_lessequal(x, max_int_int64))
     return caml_int64_to_int32(x);
    return caml_call2(Bin_prot_Common[18], 2, pos);
   }
   var
    safe_nativeint_of_int64 =
      arch_sixtyfour
       ? function(pos, x){return caml_int64_to_int32(x);}
       : function
        (pos, x){
         if
          (caml_greaterequal(x, caml_int64_of_int32(Stdlib_Nativeint[11]))
           && caml_lessequal(x, caml_int64_of_int32(Stdlib_Nativeint[10])))
          return caml_int64_to_int32(x);
         return caml_call2(Bin_prot_Common[18], 2, pos);
        },
    unsafe_get16be_unsigned =
      arch_big_endian
       ? caml_ba_uint8_get16
       : function
        (buf, pos){
         return caml_bswap16(caml_ba_uint8_get16(buf, pos));
        },
    unsafe_get32be =
      arch_big_endian
       ? caml_ba_uint8_get32
       : function
        (buf, pos){
         return caml_int32_bswap(caml_ba_uint8_get32(buf, pos));
        },
    unsafe_get64be =
      arch_big_endian
       ? caml_ba_uint8_get64
       : function
        (buf, pos){
         return caml_int64_bswap(caml_ba_uint8_get64(buf, pos));
        },
    unsafe_get16le_unsigned =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_bswap16(caml_ba_uint8_get16(buf, pos));
        }
       : caml_ba_uint8_get16,
    unsafe_get32le =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_int32_bswap(caml_ba_uint8_get32(buf, pos));
        }
       : caml_ba_uint8_get32,
    unsafe_get64le =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_int64_bswap(caml_ba_uint8_get64(buf, pos));
        }
       : caml_ba_uint8_get64;
   function bin_read_unit(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    return 0 === caml_ba_get_1(buf, pos)
            ? (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0)
            : caml_call2(Bin_prot_Common[18], 8, pos);
   }
   function bin_read_bool(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var match = caml_ba_get_1(buf, pos);
    return 1 === match
            ? (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 1)
            : match
              ? caml_call2(Bin_prot_Common[18], 9, pos)
              : (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0);
   }
   function safe_bin_read_neg_int8(buf, pos_ref, pos){
    var next = caml_call2(Bin_prot_Common[23], pos, 1);
    caml_call2(Bin_prot_Common[5], buf, next);
    var c = caml_ba_get_1(buf, pos), n = 128 <= c ? c - 256 | 0 : c;
    if(0 <= n) caml_call2(Bin_prot_Common[18], 0, pos_ref[1]);
    pos_ref[1] = next;
    return n;
   }
   function safe_bin_read_int16(buf, pos_ref, pos){
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var x = unsafe_get16le_unsigned(buf, pos);
    return 32767 < x ? x - 65536 | 0 : x;
   }
   if(arch_sixtyfour)
    var
     mask_32bit = caml_int64_to_int32(_a_),
     safe_bin_read_nat0_32 =
       function(buf, pos_ref, pos){
        var next = caml_call2(Bin_prot_Common[23], pos, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        var n = unsafe_get32le(buf, pos);
        return 0 <= n ? n : n & mask_32bit;
       };
   else
    var
     safe_bin_read_nat0_32 =
       function(buf, pos_ref, pos){
        var next = caml_call2(Bin_prot_Common[23], pos, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        var n = unsafe_get32le(buf, pos);
        if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int_int32)){pos_ref[1] = next; return n;}
        return caml_call2(Bin_prot_Common[18], 4, pos_ref[1]);
       };
   function bin_read_nat0(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        if(! arch_sixtyfour) return caml_call2(Bin_prot_Common[18], 4, pos);
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
        caml_call2(Bin_prot_Common[5], buf, next$0);
        var n = unsafe_get64le(buf, pos$0);
        if(caml_greaterequal(n, _b_) && caml_lessequal(n, max_int_int64)){
         var n$0 = caml_int64_to_int32(n);
         pos_ref[1] = next$0;
         return n$0;
        }
        return caml_call2(Bin_prot_Common[18], 4, pos_ref[1]);
       case 1:
        return safe_bin_read_nat0_32
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       case 2:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$1, 2);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get16le_unsigned(buf, pos$1);
     }
    return caml_call2(Bin_prot_Common[18], 3, pos);
   }
   function bin_read_bytes(buf, pos_ref){
    var start_pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(Stdlib_Sys[12] < len) caml_call2(Bin_prot_Common[18], 11, start_pos);
    var pos = pos_ref[1], next = caml_call2(Bin_prot_Common[23], pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var str = caml_create_bytes(len);
    runtime.bin_prot_blit_buf_bytes_stub(pos, buf, 0, str, len);
    return str;
   }
   function bin_read_string(buf, pos_ref){
    var str = bin_read_bytes(buf, pos_ref);
    return caml_call1(Stdlib_Bytes[48], str);
   }
   function bin_read_char(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    return caml_ba_get_1(buf, pos);
   }
   function bin_read_int(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 > ch) return caml_call2(Bin_prot_Common[18], 1, pos);
    switch(ch - 252 | 0){
      case 0:
       if(! arch_sixtyfour) return caml_call2(Bin_prot_Common[18], 2, pos);
       var
        pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
        next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
       caml_call2(Bin_prot_Common[5], buf, next$0);
       var
        n$1 = unsafe_get64le(buf, pos$0),
        n$2 = safe_int_of_int64(pos_ref[1], n$1);
       pos_ref[1] = next$0;
       return n$2;
      case 1:
       var
        pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
        next = caml_call2(Bin_prot_Common[23], pos$1, 4);
       caml_call2(Bin_prot_Common[5], buf, next);
       var
        n = unsafe_get32le(buf, pos$1),
        n$0 = safe_int_of_int32(pos_ref[1], n);
       pos_ref[1] = next;
       return n$0;
      case 2:
       return safe_bin_read_int16
               (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
      default:
       return safe_bin_read_neg_int8
               (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
    }
   }
   function bin_read_float(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return runtime.caml_int64_float_of_bits(unsafe_get64le(buf, pos));
   }
   function bin_read_int32(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(253 <= ch)
     switch(ch - 253 | 0){
       case 0:
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$0, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get32le(buf, pos$0);
       case 1:
        return safe_bin_read_int16
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       default:
        return safe_bin_read_neg_int8
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
     }
    return caml_call2(Bin_prot_Common[18], 5, pos);
   }
   function bin_read_int64(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return caml_int64_of_int32(ch);
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$0, 8);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get64le(buf, pos$0);
       case 1:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next$0 = caml_call2(Bin_prot_Common[23], pos$1, 4);
        caml_call2(Bin_prot_Common[5], buf, next$0);
        pos_ref[1] = next$0;
        var n = unsafe_get32le(buf, pos$1);
        return caml_int64_of_int32(n);
       case 2:
        return caml_int64_of_int32
                (safe_bin_read_int16
                  (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1)));
       default:
        return caml_int64_of_int32
                (safe_bin_read_neg_int8
                  (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1)));
     }
    return caml_call2(Bin_prot_Common[18], 6, pos);
   }
   function bin_read_nativeint(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        if(arch_sixtyfour){
         var
          pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
          next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
         caml_call2(Bin_prot_Common[5], buf, next$0);
         var
          n$0 = unsafe_get64le(buf, pos$0),
          n$1 = safe_nativeint_of_int64(pos$0, n$0);
         pos_ref[1] = next$0;
         return n$1;
        }
        break;
       case 1:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$1, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        var n = unsafe_get32le(buf, pos$1);
        return n;
       case 2:
        return safe_bin_read_int16
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       default:
        return safe_bin_read_neg_int8
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
     }
    return caml_call2(Bin_prot_Common[18], 7, pos);
   }
   function bin_read_ref(bin_read_el, buf, pos_ref){
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return [0, el];
   }
   function bin_read_lazy(bin_read_el, buf, pos_ref){
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return caml_call1(Stdlib_Lazy[4], el);
   }
   function bin_read_option(bin_read_el, buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var match = caml_ba_get_1(buf, pos);
    if(1 !== match)
     return match
             ? caml_call2(Bin_prot_Common[18], 10, pos)
             : (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return [0, el];
   }
   function bin_read_pair(bin_read_a, bin_read_b, buf, pos_ref){
    var
     a = caml_call2(bin_read_a, buf, pos_ref),
     b = caml_call2(bin_read_b, buf, pos_ref);
    return [0, a, b];
   }
   function bin_read_triple(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref){
    var
     a = caml_call2(bin_read_a, buf, pos_ref),
     b = caml_call2(bin_read_b, buf, pos_ref),
     c = caml_call2(bin_read_c, buf, pos_ref);
    return [0, a, b, c];
   }
   function bin_read_n_rev_list(bin_read_el, buf, pos_ref, len){
    var n = len, acc = 0;
    for(;;){
     if(0 === n) return acc;
     var
      acc$0 = [0, caml_call2(bin_read_el, buf, pos_ref), acc],
      n$0 = n - 1 | 0,
      n = n$0,
      acc = acc$0;
    }
   }
   function bin_read_list_with_max_len(max_len, bin_read_el, buf, pos_ref){
    var len = bin_read_nat0(buf, pos_ref);
    if(max_len < len)
     caml_call2(Bin_prot_Common[18], [0, len, max_len], pos_ref[1]);
    var rev_lst = bin_read_n_rev_list(bin_read_el, buf, pos_ref, len);
    return caml_call1(Stdlib_List[9], rev_lst);
   }
   function bin_read_list(bin_read_el, buf, pos_ref){
    return bin_read_list_with_max_len(Stdlib[19], bin_read_el, buf, pos_ref);
   }
   var dummy_float_buf = caml_call1(Bin_prot_Common[1], 8);
   caml_call3(Bin_prot_Write[8], dummy_float_buf, 0, 3.1);
   var
    max_float_array_length =
      arch_sixtyfour ? Stdlib_Sys[13] : Stdlib_Sys[13] / 2 | 0;
   function bin_read_float_array_gen(create, blit, buf, pos_ref){
    var pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(max_float_array_length < len) caml_call2(Bin_prot_Common[18], 13, pos);
    var
     size = len * 8 | 0,
     pos$0 = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var arr = caml_call1(create, len);
    caml_call5(blit, pos$0, buf, 0, arr, len);
    pos_ref[1] = next;
    return arr;
   }
   function bin_read_floatarray(buf, pos_ref){
    function _s_(_x_, _w_, _v_, _u_, _t_){
     return runtime.bin_prot_blit_buf_float_array_stub
             (_x_, _w_, _v_, _u_, _t_);
    }
    return bin_read_float_array_gen(Stdlib_Float[28][5], _s_, buf, pos_ref);
   }
   function bin_read_float_array(buf, pos_ref){
    return bin_read_float_array_gen
            (runtime.caml_make_float_vect,
             function(_r_, _q_, _p_, _o_, _n_){
              return runtime.bin_prot_blit_buf_float_array_stub
                      (_r_, _q_, _p_, _o_, _n_);
             },
             buf,
             pos_ref);
   }
   function bin_read_array(bin_read_el, buf, pos_ref){
    if(bin_read_el === bin_read_float)
     return bin_read_float_array(buf, pos_ref);
    var start_pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(0 === len) return [0];
    if(arch_sixtyfour){
     if(Stdlib_Sys[13] < len) caml_call2(Bin_prot_Common[18], 13, start_pos);
    }
    else if((Stdlib_Sys[13] / 2 | 0) < len){
     try{
      var
       el$1 = caml_call2(bin_read_el, dummy_float_buf, [0, 0]),
       _l_ = [0, el$1],
       maybe_float = _l_;
     }
     catch(_m_){var maybe_float = 0;}
     if(maybe_float){
      var
       el$0 = maybe_float[1],
       _i_ = Stdlib_Obj[14],
       _j_ = runtime.caml_obj_tag(el$0) === _i_ ? 1 : 0,
       _k_ = _j_ || (Stdlib_Sys[13] < len ? 1 : 0);
      if(_k_) caml_call2(Bin_prot_Common[18], 13, start_pos);
     }
     else if(Stdlib_Sys[13] < len)
      caml_call2(Bin_prot_Common[18], 13, start_pos);
    }
    var
     first = caml_call2(bin_read_el, buf, pos_ref),
     res = runtime.caml_make_vect(len, first),
     _g_ = len - 1 | 0,
     _f_ = 1;
    if(_g_ >= 1){
     var i = _f_;
     for(;;){
      var el = caml_call2(bin_read_el, buf, pos_ref);
      res[1 + i] = el;
      var _h_ = i + 1 | 0;
      if(_g_ !== i){var i = _h_; continue;}
      break;
     }
    }
    return res;
   }
   function bin_read_hashtbl(bin_read_key, bin_read_val, buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     htbl = caml_call2(Stdlib_Hashtbl[1], 0, len);
    function read_kv_pair(_d_, _e_){
     return bin_read_pair(bin_read_key, bin_read_val, _d_, _e_);
    }
    var els = bin_read_n_rev_list(read_kv_pair, buf, pos_ref, len);
    return caml_call2(Bin_prot_Common[22], htbl, els);
   }
   function bin_read_float32_vec(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     size = len * 4 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     vec =
       caml_call3
        (Stdlib_Bigarray[19][1], Stdlib_Bigarray[1], Stdlib_Bigarray[16], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, vec, size);
    pos_ref[1] = next;
    return vec;
   }
   function bin_read_float64_vec(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     size = len * 8 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     vec =
       caml_call3
        (Stdlib_Bigarray[19][1], Stdlib_Bigarray[2], Stdlib_Bigarray[16], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, vec, size);
    pos_ref[1] = next;
    return vec;
   }
   function bin_read_float32_mat(buf, pos_ref){
    var
     len1 = bin_read_nat0(buf, pos_ref),
     len2 = bin_read_nat0(buf, pos_ref),
     size = caml_mul(len1, len2) * 4 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     mat =
       caml_call4
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[1],
         Stdlib_Bigarray[16],
         len1,
         len2);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, mat, size);
    pos_ref[1] = next;
    return mat;
   }
   function bin_read_float64_mat(buf, pos_ref){
    var
     len1 = bin_read_nat0(buf, pos_ref),
     len2 = bin_read_nat0(buf, pos_ref),
     size = caml_mul(len1, len2) * 8 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     mat =
       caml_call4
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[2],
         Stdlib_Bigarray[16],
         len1,
         len2);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, mat, size);
    pos_ref[1] = next;
    return mat;
   }
   function bin_read_bigstring(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    var str = caml_call1(Bin_prot_Common[1], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, str, len);
    pos_ref[1] = next;
    return str;
   }
   function bin_read_variant_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    var n = unsafe_get32le(buf, pos);
    if(runtime.caml_equal(n & 1, 0))
     throw caml_maybe_attach_backtrace([0, Bin_prot_Common[15], 12, pos], 1);
    pos_ref[1] = next;
    return n >> 1;
   }
   function bin_read_int_8bit(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    return caml_ba_get_1(buf, pos);
   }
   function bin_read_int_16bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get16le_unsigned(buf, pos);
   }
   function bin_read_int_32bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get32le(buf, pos);
    return safe_int_of_int32(pos, n);
   }
   function bin_read_int_64bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get64le(buf, pos);
    return safe_int_of_int64(pos, n);
   }
   function bin_read_int64_bits(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get64le(buf, pos);
   }
   function bin_read_network16_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get16be_unsigned(buf, pos);
   }
   function bin_read_network32_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get32be(buf, pos);
    return safe_int_of_int32(pos, n);
   }
   function bin_read_network32_int32(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get32be(buf, pos);
   }
   function bin_read_network64_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get64be(buf, pos);
    return safe_int_of_int64(pos, n);
   }
   function bin_read_network64_int64(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get64be(buf, pos);
   }
   function bin_read_md5(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 16);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var res = caml_create_bytes(16);
    if(arch_sixtyfour){
     var
      a = caml_ba_uint8_get64(buf, pos),
      b = caml_ba_uint8_get64(buf, caml_call2(Bin_prot_Common[23], pos, 8));
     caml_bytes_set64(res, 0, a);
     caml_bytes_set64(res, 8, b);
    }
    else{
     var
      a$0 = caml_ba_uint8_get32(buf, pos),
      b$0 = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 4)),
      c = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 8)),
      d = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 12));
     caml_bytes_set32(res, 0, a$0);
     caml_bytes_set32(res, 4, b$0);
     caml_bytes_set32(res, 8, c);
     caml_bytes_set32(res, 12, d);
    }
    var _c_ = caml_call1(Stdlib_Bytes[48], res);
    return caml_call1(Md5_lib[5], _c_);
   }
   var
    Bin_prot_Read =
      [0,
       bin_read_unit,
       bin_read_bool,
       bin_read_string,
       bin_read_bytes,
       bin_read_char,
       bin_read_int,
       bin_read_nat0,
       bin_read_float,
       bin_read_int32,
       bin_read_int64,
       bin_read_nativeint,
       bin_read_ref,
       bin_read_lazy,
       bin_read_option,
       bin_read_pair,
       bin_read_triple,
       bin_read_list,
       bin_read_array,
       bin_read_hashtbl,
       bin_read_float32_vec,
       bin_read_float64_vec,
       bin_read_float64_vec,
       bin_read_float32_mat,
       bin_read_float64_mat,
       bin_read_float64_mat,
       bin_read_bigstring,
       bin_read_floatarray,
       bin_read_float_array,
       bin_read_variant_int,
       bin_read_int_8bit,
       bin_read_int_16bit,
       bin_read_int_32bit,
       bin_read_int_64bit,
       bin_read_int64_bits,
       bin_read_network16_int,
       bin_read_network32_int,
       bin_read_network32_int32,
       bin_read_network64_int,
       bin_read_network64_int64,
       bin_read_md5,
       bin_read_list_with_max_len];
   runtime.caml_register_global(20, Bin_prot_Read, "Bin_prot__Read");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Shape
//# unitInfo: Requires: Bin_shape_lib__Bin_shape
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_shape_lib_Bin_shape = global_data.Bin_shape_lib__Bin_shape,
    sexp_of_t = Bin_shape_lib_Bin_shape[1],
    Tid = Bin_shape_lib_Bin_shape[2],
    Vid = Bin_shape_lib_Bin_shape[3],
    Location = Bin_shape_lib_Bin_shape[4],
    Uuid = Bin_shape_lib_Bin_shape[5],
    group = Bin_shape_lib_Bin_shape[6],
    tuple = Bin_shape_lib_Bin_shape[7],
    record = Bin_shape_lib_Bin_shape[8],
    variant = Bin_shape_lib_Bin_shape[9],
    constr = Bin_shape_lib_Bin_shape[10],
    inherit = Bin_shape_lib_Bin_shape[11],
    poly_variant = Bin_shape_lib_Bin_shape[12],
    rec_app = Bin_shape_lib_Bin_shape[13],
    top_app = Bin_shape_lib_Bin_shape[14],
    var$0 = Bin_shape_lib_Bin_shape[15],
    basetype = Bin_shape_lib_Bin_shape[16],
    annotate = Bin_shape_lib_Bin_shape[17],
    Digest = Bin_shape_lib_Bin_shape[18],
    Canonical = Bin_shape_lib_Bin_shape[19],
    eval$0 = Bin_shape_lib_Bin_shape[20],
    eval_to_digest = Bin_shape_lib_Bin_shape[21],
    eval_to_digest_string = Bin_shape_lib_Bin_shape[22],
    For_typerep = Bin_shape_lib_Bin_shape[23],
    bin_shape_unit = caml_call2(basetype, caml_call1(Uuid[1], "unit"), 0),
    bin_shape_bool = caml_call2(basetype, caml_call1(Uuid[1], "bool"), 0),
    bin_shape_string = caml_call2(basetype, caml_call1(Uuid[1], "string"), 0),
    bin_shape_bytes = caml_call2(basetype, caml_call1(Uuid[1], "bytes"), 0),
    bin_shape_char = caml_call2(basetype, caml_call1(Uuid[1], "char"), 0),
    bin_shape_float = caml_call2(basetype, caml_call1(Uuid[1], "float"), 0),
    bin_shape_int = caml_call2(basetype, caml_call1(Uuid[1], "int"), 0),
    bin_shape_int32 = caml_call2(basetype, caml_call1(Uuid[1], "int32"), 0),
    bin_shape_int63 = caml_call2(basetype, caml_call1(Uuid[1], "int63"), 0),
    bin_shape_int64 = caml_call2(basetype, caml_call1(Uuid[1], "int64"), 0),
    bin_shape_nativeint =
      caml_call2(basetype, caml_call1(Uuid[1], "nativeint"), 0),
    bin_shape_nat0 = caml_call2(basetype, caml_call1(Uuid[1], "nat0"), 0),
    bin_shape_digest = caml_call2(basetype, caml_call1(Uuid[1], "digest"), 0),
    bin_shape_float32_vec =
      caml_call2(basetype, caml_call1(Uuid[1], "float32_vec"), 0),
    bin_shape_float64_vec =
      caml_call2(basetype, caml_call1(Uuid[1], "float64_vec"), 0),
    bin_shape_vec = caml_call2(basetype, caml_call1(Uuid[1], "vec"), 0),
    bin_shape_float32_mat =
      caml_call2(basetype, caml_call1(Uuid[1], "float32_mat"), 0),
    bin_shape_float64_mat =
      caml_call2(basetype, caml_call1(Uuid[1], "float64_mat"), 0),
    bin_shape_mat = caml_call2(basetype, caml_call1(Uuid[1], "mat"), 0),
    bin_shape_bigstring =
      caml_call2(basetype, caml_call1(Uuid[1], "bigstring"), 0),
    bin_shape_floatarray =
      caml_call2(basetype, caml_call1(Uuid[1], "floatarray"), 0),
    bin_shape_variant_int =
      caml_call2(basetype, caml_call1(Uuid[1], "variant_int"), 0),
    bin_shape_int_8bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_8bit"), 0),
    bin_shape_int_16bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_16bit"), 0),
    bin_shape_int_32bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_32bit"), 0),
    bin_shape_int_64bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_64bit"), 0),
    bin_shape_int64_bits =
      caml_call2(basetype, caml_call1(Uuid[1], "int64_bits"), 0),
    bin_shape_network16_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network16_int"), 0),
    bin_shape_network32_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network32_int"), 0),
    bin_shape_network32_int32 =
      caml_call2(basetype, caml_call1(Uuid[1], "network32_int32"), 0),
    bin_shape_network64_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network64_int"), 0),
    bin_shape_network64_int64 =
      caml_call2(basetype, caml_call1(Uuid[1], "network64_int64"), 0),
    cst_hashtbl = "hashtbl",
    cst_array = "array",
    cst_list = "list",
    cst_option = "option",
    cst_ref = "ref";
   function bin_shape_ref(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_ref), [0, x, 0]);
   }
   function bin_shape_option(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_option), [0, x, 0]);
   }
   function bin_shape_list(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_list), [0, x, 0]);
   }
   function bin_shape_array(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_array), [0, x, 0]);
   }
   function bin_shape_hashtbl(x, y){
    return caml_call2
            (basetype, caml_call1(Uuid[1], cst_hashtbl), [0, x, [0, y, 0]]);
   }
   var bin_shape_float_array = bin_shape_array(bin_shape_float);
   function bin_shape_lazy(x){return x;}
   function bin_shape_pair(x, y){return caml_call1(tuple, [0, x, [0, y, 0]]);}
   function bin_shape_triple(x, y, z){
    return caml_call1(tuple, [0, x, [0, y, [0, z, 0]]]);
   }
   var
    Bin_prot_Shape =
      [0,
       sexp_of_t,
       Tid,
       Vid,
       Location,
       Uuid,
       group,
       tuple,
       record,
       variant,
       constr,
       inherit,
       poly_variant,
       rec_app,
       top_app,
       var$0,
       basetype,
       annotate,
       Digest,
       Canonical,
       eval$0,
       eval_to_digest,
       eval_to_digest_string,
       For_typerep,
       bin_shape_unit,
       bin_shape_bool,
       bin_shape_string,
       bin_shape_bytes,
       bin_shape_char,
       bin_shape_float,
       bin_shape_int,
       bin_shape_int32,
       bin_shape_int63,
       bin_shape_int64,
       bin_shape_nativeint,
       bin_shape_nat0,
       bin_shape_digest,
       bin_shape_float32_vec,
       bin_shape_float64_vec,
       bin_shape_vec,
       bin_shape_float32_mat,
       bin_shape_float64_mat,
       bin_shape_mat,
       bin_shape_bigstring,
       bin_shape_floatarray,
       bin_shape_variant_int,
       bin_shape_int_8bit,
       bin_shape_int_16bit,
       bin_shape_int_32bit,
       bin_shape_int_64bit,
       bin_shape_int64_bits,
       bin_shape_network16_int,
       bin_shape_network32_int,
       bin_shape_network32_int32,
       bin_shape_network64_int,
       bin_shape_network64_int64,
       bin_shape_ref,
       bin_shape_option,
       bin_shape_list,
       bin_shape_array,
       bin_shape_hashtbl,
       bin_shape_float_array,
       bin_shape_lazy,
       bin_shape_pair,
       bin_shape_triple];
   runtime.caml_register_global(38, Bin_prot_Shape, "Bin_prot__Shape");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Size
//# unitInfo: Requires: Bin_prot__Common, CamlinternalLazy, Stdlib, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Float = global_data.Stdlib__Float,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    cst_bin_size_hashtbl = "bin_size_hashtbl",
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    bin_size_unit = 1,
    bin_size_bool = 1,
    bin_size_char = 1,
    bin_size_md5 = 16,
    bin_size_int_nat0 = arch_sixtyfour ? 9 : 5,
    bin_size_int_negative = arch_sixtyfour ? 9 : 5,
    bin_size_int =
      caml_call2(Stdlib[17], bin_size_int_nat0, bin_size_int_negative),
    bin_size_int$0 = caml_call2(Stdlib[16], 1, 2),
    bin_size_pair = caml_call2(Bin_prot_Common[23], 1, 1),
    _a_ = caml_call2(Bin_prot_Common[23], 1, 1),
    bin_size_triple = caml_call2(Bin_prot_Common[23], _a_, 1),
    bin_size_mat = caml_call2(Bin_prot_Common[23], 1, 1),
    bin_size_float = 8,
    bin_size_int32 = 5,
    bin_size_int64 = 9,
    bin_size_variant_int = 4,
    bin_size_int_8bit = 1,
    bin_size_int_16bit = 2,
    bin_size_int_32bit = 4,
    bin_size_int_64bit = 8,
    bin_size_int64_bits = 8,
    bin_size_network16_int = 2,
    bin_size_network32_int = 4,
    bin_size_network32_int32 = 4,
    bin_size_network64_int = 8,
    bin_size_network64_int64 = 8,
    bin_size_md5$0 = 16,
    bin_size_nat0 = 1,
    bin_size_ref = 1,
    bin_size_lazy_t = 1,
    bin_size_option = 1;
   function bin_size_unit$0(param){return 1;}
   function bin_size_bool$0(param){return 1;}
   function bin_size_char$0(param){return 1;}
   function bin_size_int$1(n){
    if(0 <= n){
     if(128 > n) return 1;
     if(32768 > n) return 3;
     if(arch_sixtyfour && -2147483648 <= n) return 9;
     return 5;
    }
    if(-128 <= n) return 2;
    if(-32768 <= n) return 3;
    if(arch_sixtyfour && n < -2147483648) return 9;
    return 5;
   }
   function bin_size_nat0$0(nat0){
    if(128 > nat0) return 1;
    if(65536 > nat0) return 3;
    if(arch_sixtyfour && 1 <= nat0) return 9;
    return 5;
   }
   function bin_size_string_or_bytes(len){
    var size_len = bin_size_nat0$0(len);
    return caml_call2(Bin_prot_Common[23], size_len, len);
   }
   function bin_size_string(str){
    return bin_size_string_or_bytes(runtime.caml_ml_string_length(str));
   }
   function bin_size_bytes(str){
    return bin_size_string_or_bytes(runtime.caml_ml_bytes_length(str));
   }
   function bin_size_md5$1(param){return 16;}
   function bin_size_float$0(f){return 8;}
   var
    bin_size_int32$0 =
      arch_sixtyfour
       ? function(n){return bin_size_int$1(n);}
       : function
        (n){
         if(! caml_greaterequal(n, 32768) && ! caml_lessthan(n, -32768))
          return bin_size_int$1(n);
         return 5;
        },
    bin_size_int64$0 =
      arch_sixtyfour
       ? function
        (n){
         if(! caml_greaterequal(n, _b_) && ! caml_lessthan(n, _c_))
          return bin_size_int$1(caml_int64_to_int32(n));
         return 9;
        }
       : function
        (n){
         if(! caml_greaterequal(n, _d_) && ! caml_lessthan(n, _e_))
          return bin_size_int32$0(caml_int64_to_int32(n));
         return 9;
        },
    bin_size_nativeint =
      arch_sixtyfour
       ? function(n){return bin_size_int64$0(runtime.caml_int64_of_int32(n));}
       : function(n){return bin_size_int32$0(n);};
   function bin_size_ref$0(bin_size_el, r){return caml_call1(bin_size_el, r[1]);
   }
   function bin_size_lazy_t$0(bin_size_el, lv){
    var
     _C_ = runtime.caml_obj_tag(lv),
     _D_ =
       250 === _C_
        ? lv[1]
        : 246 === _C_ ? caml_call1(CamlinternalLazy[2], lv) : lv;
    return caml_call1(bin_size_el, _D_);
   }
   function bin_size_option$0(bin_size_el, param){
    if(! param) return 1;
    var v = param[1], _B_ = caml_call1(bin_size_el, v);
    return caml_call2(Bin_prot_Common[23], 1, _B_);
   }
   function bin_size_pair$0(bin_size_a, bin_size_b, param){
    var
     b = param[2],
     a = param[1],
     _z_ = caml_call1(bin_size_b, b),
     _A_ = caml_call1(bin_size_a, a);
    return caml_call2(Bin_prot_Common[23], _A_, _z_);
   }
   function bin_size_triple$0(bin_size_a, bin_size_b, bin_size_c, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     _v_ = caml_call1(bin_size_c, c),
     _w_ = caml_call1(bin_size_b, b),
     _x_ = caml_call1(bin_size_a, a),
     _y_ = caml_call2(Bin_prot_Common[23], _x_, _w_);
    return caml_call2(Bin_prot_Common[23], _y_, _v_);
   }
   function bin_size_list(bin_size_el, lst$1){
    var size_acc = 0, len_acc = 0, lst = lst$1;
    for(;;){
     if(lst){
      var
       lst$0 = lst[2],
       hd = lst[1],
       len_acc$0 = caml_call2(Bin_prot_Common[23], len_acc, 1),
       _t_ = caml_call1(bin_size_el, hd),
       size_acc$0 = caml_call2(Bin_prot_Common[23], size_acc, _t_),
       size_acc = size_acc$0,
       len_acc = len_acc$0,
       lst = lst$0;
      continue;
     }
     var _u_ = bin_size_nat0$0(len_acc);
     return caml_call2(Bin_prot_Common[23], size_acc, _u_);
    }
   }
   function bin_size_len(len){return bin_size_nat0$0(len);}
   function bin_size_floatarray(ar){
    var len = caml_call1(Stdlib_Float[28][1], ar), _s_ = bin_size_len(len);
    return caml_call2(Bin_prot_Common[23], _s_, 8 * len | 0);
   }
   function bin_size_float_array(ar){
    var len = ar.length - 1, _r_ = bin_size_len(len);
    return caml_call2(Bin_prot_Common[23], _r_, 8 * len | 0);
   }
   function bin_size_array_loop(bin_size_el, ar, total_len, n){
    var total_len_ref = [0, total_len], _o_ = n - 1 | 0, _n_ = 0;
    if(_o_ >= 0){
     var i = _n_;
     for(;;){
      var el = ar[1 + i], _p_ = caml_call1(bin_size_el, el);
      total_len_ref[1] =
       caml_call2(Bin_prot_Common[23], total_len_ref[1], _p_);
      var _q_ = i + 1 | 0;
      if(_o_ !== i){var i = _q_; continue;}
      break;
     }
    }
    return total_len_ref[1];
   }
   function bin_size_array(bin_size_el, ar){
    if(bin_size_el === bin_size_float$0) return bin_size_float_array(ar);
    var n = ar.length - 1, total_len = bin_size_len(n);
    return bin_size_array_loop(bin_size_el, ar, total_len, n);
   }
   function bin_size_hashtbl(bin_size_key, bin_size_val, htbl){
    var cnt_ref = [0, 0];
    function coll_htbl(k, v, total_len){
     cnt_ref[1]++;
     var
      _k_ = caml_call1(bin_size_val, v),
      _l_ = caml_call1(bin_size_key, k),
      _m_ = caml_call2(Bin_prot_Common[23], total_len, _l_);
     return caml_call2(Bin_prot_Common[23], _m_, _k_);
    }
    var
     len = caml_call1(Stdlib_Hashtbl[15], htbl),
     _j_ = bin_size_len(len),
     total_len = caml_call3(Stdlib_Hashtbl[14], coll_htbl, htbl, _j_);
    if(cnt_ref[1] !== len)
     caml_call1(Bin_prot_Common[20], cst_bin_size_hashtbl);
    return total_len;
   }
   function bin_size_gen_vec(vec, multiplier){
    var len = caml_ba_dim_1(vec), _i_ = bin_size_len(len);
    return caml_call2(Bin_prot_Common[23], _i_, caml_mul(multiplier, len));
   }
   function bin_size_float32_vec(vec){return bin_size_gen_vec(vec, 4);}
   function bin_size_float64_vec(vec){return bin_size_gen_vec(vec, 8);}
   function bin_size_gen_mat(mat, multiplier){
    var
     dim1 = caml_ba_dim_1(mat),
     dim2 = runtime.caml_ba_dim_2(mat),
     size = caml_mul(dim1, dim2),
     _f_ = bin_size_len(dim2),
     _g_ = bin_size_len(dim1),
     _h_ = caml_call2(Bin_prot_Common[23], _g_, _f_);
    return caml_call2(Bin_prot_Common[23], _h_, caml_mul(multiplier, size));
   }
   function bin_size_float32_mat(mat){return bin_size_gen_mat(mat, 4);}
   function bin_size_float64_mat(mat){return bin_size_gen_mat(mat, 8);}
   function bin_size_bigstring(buf){return bin_size_gen_vec(buf, 1);}
   function bin_size_variant_int$0(param){return 4;}
   function bin_size_int_8bit$0(param){return 1;}
   function bin_size_int_16bit$0(param){return 2;}
   function bin_size_int_32bit$0(param){return 4;}
   function bin_size_int_64bit$0(param){return 8;}
   function bin_size_int64_bits$0(param){return 8;}
   function bin_size_network16_int$0(param){return 2;}
   function bin_size_network32_int$0(param){return 4;}
   function bin_size_network32_int32$0(param){return 4;}
   function bin_size_network64_int$0(param){return 8;}
   function bin_size_network64_int64$0(param){return 8;}
   function bin_size_array_no_length(bin_size_el, ar){
    return bin_size_array_loop(bin_size_el, ar, 0, ar.length - 1);
   }
   var
    Bin_prot_Size =
      [0,
       bin_size_unit$0,
       bin_size_bool$0,
       bin_size_string,
       bin_size_bytes,
       bin_size_char$0,
       bin_size_int$1,
       bin_size_float$0,
       bin_size_int32$0,
       bin_size_int64$0,
       bin_size_nativeint,
       bin_size_nat0$0,
       bin_size_ref$0,
       bin_size_lazy_t$0,
       bin_size_lazy_t$0,
       bin_size_option$0,
       bin_size_pair$0,
       bin_size_triple$0,
       bin_size_list,
       bin_size_array,
       bin_size_hashtbl,
       bin_size_float32_vec,
       bin_size_float64_vec,
       bin_size_float64_vec,
       bin_size_float32_mat,
       bin_size_float64_mat,
       bin_size_float64_mat,
       bin_size_bigstring,
       bin_size_floatarray,
       bin_size_float_array,
       bin_size_variant_int$0,
       bin_size_int_8bit$0,
       bin_size_int_16bit$0,
       bin_size_int_32bit$0,
       bin_size_int_64bit$0,
       bin_size_int64_bits$0,
       bin_size_network16_int$0,
       bin_size_network32_int$0,
       bin_size_network32_int32$0,
       bin_size_network64_int$0,
       bin_size_network64_int64$0,
       bin_size_array_no_length,
       bin_size_md5$1,
       [0,
        bin_size_unit,
        bin_size_bool,
        bin_size_char,
        bin_size_md5,
        bin_size_int,
        bin_size_float,
        bin_size_int32,
        bin_size_int64,
        bin_size_int,
        bin_size_int_nat0,
        bin_size_variant_int,
        bin_size_int_8bit,
        bin_size_int_16bit,
        bin_size_int_32bit,
        bin_size_int_64bit,
        bin_size_int64_bits,
        bin_size_network16_int,
        bin_size_network32_int,
        bin_size_network32_int32,
        bin_size_network64_int,
        bin_size_network64_int64],
       [0,
        bin_size_unit,
        bin_size_bool,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_char,
        bin_size_md5$0,
        bin_size_int$0,
        bin_size_float,
        bin_size_int$0,
        bin_size_int$0,
        bin_size_int$0,
        bin_size_nat0,
        bin_size_ref,
        bin_size_lazy_t,
        bin_size_option,
        bin_size_pair,
        bin_size_triple,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_mat,
        bin_size_mat,
        bin_size_mat,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_variant_int,
        bin_size_int_8bit,
        bin_size_int_16bit,
        bin_size_int_32bit,
        bin_size_int_64bit,
        bin_size_int64_bits,
        bin_size_network16_int,
        bin_size_network32_int,
        bin_size_network32_int32,
        bin_size_network64_int,
        bin_size_network64_int64]];
   runtime.caml_register_global(13, Bin_prot_Size, "Bin_prot__Size");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Type_class
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Write
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    S1 = [0],
    S2 = [0],
    S3 = [0],
    cst_hashtbl = "hashtbl",
    cst_array = "array",
    cst_list = "list",
    cst_triple = "triple",
    cst_pair = "pair",
    cst_option = "option",
    cst_lazy = "lazy",
    cst_ref = "ref",
    cst_unit = "unit",
    cst_bool = "bool",
    cst_string = "string",
    cst_bytes = "bytes",
    cst_char = "char",
    cst_int = "int",
    cst_float = "float",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_nativeint = "nativeint",
    cst_nat0 = "nat0",
    cst_float32_vec = "float32_vec",
    cst_float64_vec = "float64_vec",
    cst_vec = "vec",
    cst_float32_mat = "float32_mat",
    cst_float64_mat = "float64_mat",
    cst_mat = "mat",
    cst_bigstring = "bigstring",
    cst_floatarray = "floatarray",
    cst_float_array = "float_array",
    cst_variant_int = "variant_int",
    cst_int_8bit = "int_8bit",
    cst_int_16bit = "int_16bit",
    cst_int_32bit = "int_32bit",
    cst_int_64bit = "int_64bit",
    cst_int64_bits = "int64_bits",
    cst_network16_int = "network16_int",
    cst_network32_int = "network32_int",
    cst_network32_int32 = "network32_int32",
    cst_network64_int = "network64_int",
    cst_network64_int64 = "network64_int64";
   function variant_wrong_type(name, buf, pos_ref, x){
    return caml_call2(Bin_prot_Common[19], name, pos_ref[1]);
   }
   var bin_writer_unit = [0, Bin_prot_Size[1], Bin_prot_Write[1]];
   function _a_(_cc_, _cd_, _ce_){
    return variant_wrong_type(cst_unit, _cc_, _cd_, _ce_);
   }
   var
    bin_reader_unit = [0, Bin_prot_Read[1], _a_],
    bin_shape_unit = Bin_prot_Shape[24],
    bin_unit = [0, bin_shape_unit, bin_writer_unit, bin_reader_unit],
    bin_writer_bool = [0, Bin_prot_Size[2], Bin_prot_Write[2]];
   function _b_(_b$_, _ca_, _cb_){
    return variant_wrong_type(cst_bool, _b$_, _ca_, _cb_);
   }
   var
    bin_reader_bool = [0, Bin_prot_Read[2], _b_],
    bin_shape_bool = Bin_prot_Shape[25],
    bin_bool = [0, bin_shape_bool, bin_writer_bool, bin_reader_bool],
    bin_writer_string = [0, Bin_prot_Size[3], Bin_prot_Write[3]];
   function _c_(_b8_, _b9_, _b__){
    return variant_wrong_type(cst_string, _b8_, _b9_, _b__);
   }
   var
    bin_reader_string = [0, Bin_prot_Read[3], _c_],
    bin_shape_string = Bin_prot_Shape[26],
    bin_string = [0, bin_shape_string, bin_writer_string, bin_reader_string],
    bin_writer_bytes = [0, Bin_prot_Size[4], Bin_prot_Write[4]];
   function _d_(_b5_, _b6_, _b7_){
    return variant_wrong_type(cst_bytes, _b5_, _b6_, _b7_);
   }
   var
    bin_reader_bytes = [0, Bin_prot_Read[4], _d_],
    bin_shape_bytes = Bin_prot_Shape[27],
    bin_bytes = [0, bin_shape_bytes, bin_writer_bytes, bin_reader_bytes],
    bin_writer_char = [0, Bin_prot_Size[5], Bin_prot_Write[5]];
   function _e_(_b2_, _b3_, _b4_){
    return variant_wrong_type(cst_char, _b2_, _b3_, _b4_);
   }
   var
    bin_reader_char = [0, Bin_prot_Read[5], _e_],
    bin_shape_char = Bin_prot_Shape[28],
    bin_char = [0, bin_shape_char, bin_writer_char, bin_reader_char],
    bin_writer_int = [0, Bin_prot_Size[6], Bin_prot_Write[6]];
   function _f_(_bZ_, _b0_, _b1_){
    return variant_wrong_type(cst_int, _bZ_, _b0_, _b1_);
   }
   var
    bin_reader_int = [0, Bin_prot_Read[6], _f_],
    bin_shape_int = Bin_prot_Shape[30],
    bin_int = [0, bin_shape_int, bin_writer_int, bin_reader_int],
    bin_writer_float = [0, Bin_prot_Size[7], Bin_prot_Write[8]];
   function _g_(_bW_, _bX_, _bY_){
    return variant_wrong_type(cst_float, _bW_, _bX_, _bY_);
   }
   var
    bin_reader_float = [0, Bin_prot_Read[8], _g_],
    bin_shape_float = Bin_prot_Shape[29],
    bin_float = [0, bin_shape_float, bin_writer_float, bin_reader_float],
    bin_writer_int32 = [0, Bin_prot_Size[8], Bin_prot_Write[9]];
   function _h_(_bT_, _bU_, _bV_){
    return variant_wrong_type(cst_int32, _bT_, _bU_, _bV_);
   }
   var
    bin_reader_int32 = [0, Bin_prot_Read[9], _h_],
    bin_shape_int32 = Bin_prot_Shape[31],
    bin_int32 = [0, bin_shape_int32, bin_writer_int32, bin_reader_int32],
    bin_writer_int64 = [0, Bin_prot_Size[9], Bin_prot_Write[10]];
   function _i_(_bQ_, _bR_, _bS_){
    return variant_wrong_type(cst_int64, _bQ_, _bR_, _bS_);
   }
   var
    bin_reader_int64 = [0, Bin_prot_Read[10], _i_],
    bin_shape_int64 = Bin_prot_Shape[33],
    bin_int64 = [0, bin_shape_int64, bin_writer_int64, bin_reader_int64],
    bin_writer_nativeint = [0, Bin_prot_Size[10], Bin_prot_Write[11]];
   function _j_(_bN_, _bO_, _bP_){
    return variant_wrong_type(cst_nativeint, _bN_, _bO_, _bP_);
   }
   var
    bin_reader_nativeint = [0, Bin_prot_Read[11], _j_],
    bin_shape_nativeint = Bin_prot_Shape[34],
    bin_nativeint =
      [0, bin_shape_nativeint, bin_writer_nativeint, bin_reader_nativeint],
    bin_writer_nat0 = [0, Bin_prot_Size[11], Bin_prot_Write[7]];
   function _k_(_bK_, _bL_, _bM_){
    return variant_wrong_type(cst_nat0, _bK_, _bL_, _bM_);
   }
   var
    bin_reader_nat0 = [0, Bin_prot_Read[7], _k_],
    bin_shape_nat0 = Bin_prot_Shape[35],
    bin_nat0 = [0, bin_shape_nat0, bin_writer_nat0, bin_reader_nat0];
   function bin_writer_ref(bin_writer_el){
    function _bJ_(buf, pos, v){
     return caml_call4(Bin_prot_Write[12], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[12], bin_writer_el[1], v);
            },
            _bJ_];
   }
   function bin_reader_ref(bin_reader_el){
    function _bF_(_bG_, _bH_, _bI_){
     return variant_wrong_type(cst_ref, _bG_, _bH_, _bI_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[12], bin_reader_el[1], buf, pos_ref);
            },
            _bF_];
   }
   function bin_shape_ref(x1){return caml_call1(Bin_prot_Shape[56], x1);}
   function bin_ref(bin_el){
    var _bD_ = bin_reader_ref(bin_el[3]), _bE_ = bin_writer_ref(bin_el[2]);
    return [0, bin_shape_ref(bin_el[1]), _bE_, _bD_];
   }
   function bin_writer_lazy(bin_writer_el){
    function _bC_(buf, pos, v){
     return caml_call4(Bin_prot_Write[13], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[14], bin_writer_el[1], v);
            },
            _bC_];
   }
   function bin_reader_lazy(bin_reader_el){
    function _by_(_bz_, _bA_, _bB_){
     return variant_wrong_type(cst_lazy, _bz_, _bA_, _bB_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[13], bin_reader_el[1], buf, pos_ref);
            },
            _by_];
   }
   function bin_shape_lazy(x1){return caml_call1(Bin_prot_Shape[62], x1);}
   function bin_lazy(bin_el){
    var _bw_ = bin_reader_lazy(bin_el[3]), _bx_ = bin_writer_lazy(bin_el[2]);
    return [0, bin_shape_lazy(bin_el[1]), _bx_, _bw_];
   }
   function bin_writer_option(bin_writer_el){
    function _bv_(buf, pos, v){
     return caml_call4(Bin_prot_Write[14], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[15], bin_writer_el[1], v);
            },
            _bv_];
   }
   function bin_reader_option(bin_reader_el){
    function _br_(_bs_, _bt_, _bu_){
     return variant_wrong_type(cst_option, _bs_, _bt_, _bu_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[14], bin_reader_el[1], buf, pos_ref);
            },
            _br_];
   }
   function bin_shape_option(x1){return caml_call1(Bin_prot_Shape[57], x1);}
   function bin_option(bin_el){
    var
     _bp_ = bin_reader_option(bin_el[3]),
     _bq_ = bin_writer_option(bin_el[2]);
    return [0, bin_shape_option(bin_el[1]), _bq_, _bp_];
   }
   function bin_writer_pair(bin_writer_el1, bin_writer_el2){
    function _bo_(buf, pos, v){
     return caml_call5
             (Bin_prot_Write[15],
              bin_writer_el1[2],
              bin_writer_el2[2],
              buf,
              pos,
              v);
    }
    return [0,
            function(v){
             return caml_call3
                     (Bin_prot_Size[16], bin_writer_el1[1], bin_writer_el2[1], v);
            },
            _bo_];
   }
   function bin_reader_pair(bin_reader_el1, bin_reader_el2){
    function _bk_(_bl_, _bm_, _bn_){
     return variant_wrong_type(cst_pair, _bl_, _bm_, _bn_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call4
                     (Bin_prot_Read[15],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      buf,
                      pos_ref);
            },
            _bk_];
   }
   function bin_pair(bin_el1, bin_el2){
    var
     _bi_ = bin_reader_pair(bin_el1[3], bin_el2[3]),
     _bj_ = bin_writer_pair(bin_el1[2], bin_el2[2]),
     x2 = bin_el2[1],
     x1 = bin_el1[1];
    return [0, caml_call2(Bin_prot_Shape[63], x1, x2), _bj_, _bi_];
   }
   function bin_writer_triple(bin_writer_el1, bin_writer_el2, bin_writer_el3){
    function _bh_(buf, pos, v){
     return caml_call6
             (Bin_prot_Write[16],
              bin_writer_el1[2],
              bin_writer_el2[2],
              bin_writer_el3[2],
              buf,
              pos,
              v);
    }
    return [0,
            function(v){
             return caml_call4
                     (Bin_prot_Size[17],
                      bin_writer_el1[1],
                      bin_writer_el2[1],
                      bin_writer_el3[1],
                      v);
            },
            _bh_];
   }
   function bin_reader_triple(bin_reader_el1, bin_reader_el2, bin_reader_el3){
    function _bd_(_be_, _bf_, _bg_){
     return variant_wrong_type(cst_triple, _be_, _bf_, _bg_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call5
                     (Bin_prot_Read[16],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      bin_reader_el3[1],
                      buf,
                      pos_ref);
            },
            _bd_];
   }
   function bin_triple(bin_el1, bin_el2, bin_el3){
    var
     _bb_ = bin_reader_triple(bin_el1[3], bin_el2[3], bin_el3[3]),
     _bc_ = bin_writer_triple(bin_el1[2], bin_el2[2], bin_el3[2]),
     x3 = bin_el3[1],
     x2 = bin_el2[1],
     x1 = bin_el1[1];
    return [0, caml_call3(Bin_prot_Shape[64], x1, x2, x3), _bc_, _bb_];
   }
   function bin_writer_list(bin_writer_el){
    function _ba_(buf, pos, v){
     return caml_call4(Bin_prot_Write[17], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[18], bin_writer_el[1], v);
            },
            _ba_];
   }
   function bin_reader_list(bin_reader_el){
    function _a8_(_a9_, _a__, _a$_){
     return variant_wrong_type(cst_list, _a9_, _a__, _a$_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[17], bin_reader_el[1], buf, pos_ref);
            },
            _a8_];
   }
   function bin_shape_list(x1){return caml_call1(Bin_prot_Shape[58], x1);}
   function bin_list(bin_el){
    var _a6_ = bin_reader_list(bin_el[3]), _a7_ = bin_writer_list(bin_el[2]);
    return [0, bin_shape_list(bin_el[1]), _a7_, _a6_];
   }
   function bin_writer_array(bin_writer_el){
    function _a5_(buf, pos, v){
     return caml_call4(Bin_prot_Write[18], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[19], bin_writer_el[1], v);
            },
            _a5_];
   }
   function bin_reader_array(bin_reader_el){
    function _a1_(_a2_, _a3_, _a4_){
     return variant_wrong_type(cst_array, _a2_, _a3_, _a4_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[18], bin_reader_el[1], buf, pos_ref);
            },
            _a1_];
   }
   function bin_shape_array(x1){return caml_call1(Bin_prot_Shape[59], x1);}
   function bin_array(bin_el){
    var
     _aZ_ = bin_reader_array(bin_el[3]),
     _a0_ = bin_writer_array(bin_el[2]);
    return [0, bin_shape_array(bin_el[1]), _a0_, _aZ_];
   }
   function bin_writer_hashtbl(bin_writer_el1, bin_writer_el2){
    function _aY_(buf, pos, v){
     return caml_call5
             (Bin_prot_Write[19],
              bin_writer_el1[2],
              bin_writer_el2[2],
              buf,
              pos,
              v);
    }
    return [0,
            function(v){
             return caml_call3
                     (Bin_prot_Size[20], bin_writer_el1[1], bin_writer_el2[1], v);
            },
            _aY_];
   }
   function bin_reader_hashtbl(bin_reader_el1, bin_reader_el2){
    function _aU_(_aV_, _aW_, _aX_){
     return variant_wrong_type(cst_hashtbl, _aV_, _aW_, _aX_);
    }
    return [0,
            function(buf, pos_ref){
             return caml_call4
                     (Bin_prot_Read[19],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      buf,
                      pos_ref);
            },
            _aU_];
   }
   function bin_shape_hashtbl(x1, x2){
    return caml_call2(Bin_prot_Shape[60], x1, x2);
   }
   function bin_hashtbl(bin_el1, bin_el2){
    var
     _aS_ = bin_reader_hashtbl(bin_el1[3], bin_el2[3]),
     _aT_ = bin_writer_hashtbl(bin_el1[2], bin_el2[2]);
    return [0, bin_shape_hashtbl(bin_el1[1], bin_el2[1]), _aT_, _aS_];
   }
   var bin_writer_float32_vec = [0, Bin_prot_Size[21], Bin_prot_Write[20]];
   function _l_(_aP_, _aQ_, _aR_){
    return variant_wrong_type(cst_float32_vec, _aP_, _aQ_, _aR_);
   }
   var
    bin_reader_float32_vec = [0, Bin_prot_Read[20], _l_],
    bin_shape_float32_vec = Bin_prot_Shape[37],
    bin_float32_vec =
      [0,
       bin_shape_float32_vec,
       bin_writer_float32_vec,
       bin_reader_float32_vec],
    bin_writer_float64_vec = [0, Bin_prot_Size[22], Bin_prot_Write[21]];
   function _m_(_aM_, _aN_, _aO_){
    return variant_wrong_type(cst_float64_vec, _aM_, _aN_, _aO_);
   }
   var
    bin_reader_float64_vec = [0, Bin_prot_Read[21], _m_],
    bin_shape_float64_vec = Bin_prot_Shape[38],
    bin_float64_vec =
      [0,
       bin_shape_float64_vec,
       bin_writer_float64_vec,
       bin_reader_float64_vec],
    bin_writer_vec = [0, Bin_prot_Size[23], Bin_prot_Write[22]];
   function _n_(_aJ_, _aK_, _aL_){
    return variant_wrong_type(cst_vec, _aJ_, _aK_, _aL_);
   }
   var
    bin_reader_vec = [0, Bin_prot_Read[22], _n_],
    bin_shape_vec = Bin_prot_Shape[39],
    bin_vec = [0, bin_shape_vec, bin_writer_vec, bin_reader_vec],
    bin_writer_float32_mat = [0, Bin_prot_Size[24], Bin_prot_Write[23]];
   function _o_(_aG_, _aH_, _aI_){
    return variant_wrong_type(cst_float32_mat, _aG_, _aH_, _aI_);
   }
   var
    bin_reader_float32_mat = [0, Bin_prot_Read[23], _o_],
    bin_shape_float32_mat = Bin_prot_Shape[40],
    bin_float32_mat =
      [0,
       bin_shape_float32_mat,
       bin_writer_float32_mat,
       bin_reader_float32_mat],
    bin_writer_float64_mat = [0, Bin_prot_Size[25], Bin_prot_Write[24]];
   function _p_(_aD_, _aE_, _aF_){
    return variant_wrong_type(cst_float64_mat, _aD_, _aE_, _aF_);
   }
   var
    bin_reader_float64_mat = [0, Bin_prot_Read[24], _p_],
    bin_shape_float64_mat = Bin_prot_Shape[41],
    bin_float64_mat =
      [0,
       bin_shape_float64_mat,
       bin_writer_float64_mat,
       bin_reader_float64_mat],
    bin_writer_mat = [0, Bin_prot_Size[26], Bin_prot_Write[25]];
   function _q_(_aA_, _aB_, _aC_){
    return variant_wrong_type(cst_mat, _aA_, _aB_, _aC_);
   }
   var
    bin_reader_mat = [0, Bin_prot_Read[25], _q_],
    bin_shape_mat = Bin_prot_Shape[42],
    bin_mat = [0, bin_shape_mat, bin_writer_mat, bin_reader_mat],
    bin_writer_bigstring = [0, Bin_prot_Size[27], Bin_prot_Write[26]];
   function _r_(_ax_, _ay_, _az_){
    return variant_wrong_type(cst_bigstring, _ax_, _ay_, _az_);
   }
   var
    bin_reader_bigstring = [0, Bin_prot_Read[26], _r_],
    bin_shape_bigstring = Bin_prot_Shape[43],
    bin_bigstring =
      [0, bin_shape_bigstring, bin_writer_bigstring, bin_reader_bigstring],
    bin_writer_floatarray = [0, Bin_prot_Size[28], Bin_prot_Write[27]];
   function _s_(_au_, _av_, _aw_){
    return variant_wrong_type(cst_floatarray, _au_, _av_, _aw_);
   }
   var
    bin_reader_floatarray = [0, Bin_prot_Read[27], _s_],
    bin_shape_floatarray = Bin_prot_Shape[44],
    bin_floatarray =
      [0, bin_shape_floatarray, bin_writer_floatarray, bin_reader_floatarray],
    bin_writer_float_array = [0, Bin_prot_Size[29], Bin_prot_Write[28]];
   function _t_(_ar_, _as_, _at_){
    return variant_wrong_type(cst_float_array, _ar_, _as_, _at_);
   }
   var
    bin_reader_float_array = [0, Bin_prot_Read[28], _t_],
    bin_shape_float_array = Bin_prot_Shape[61],
    bin_float_array =
      [0,
       bin_shape_float_array,
       bin_writer_float_array,
       bin_reader_float_array],
    bin_writer_variant_int = [0, Bin_prot_Size[30], Bin_prot_Write[30]];
   function _u_(_ao_, _ap_, _aq_){
    return variant_wrong_type(cst_variant_int, _ao_, _ap_, _aq_);
   }
   var
    bin_reader_variant_int = [0, Bin_prot_Read[29], _u_],
    bin_shape_variant_int = Bin_prot_Shape[45],
    bin_variant_int =
      [0,
       bin_shape_variant_int,
       bin_writer_variant_int,
       bin_reader_variant_int],
    bin_writer_int_8bit = [0, Bin_prot_Size[31], Bin_prot_Write[31]];
   function _v_(_al_, _am_, _an_){
    return variant_wrong_type(cst_int_8bit, _al_, _am_, _an_);
   }
   var
    bin_reader_int_8bit = [0, Bin_prot_Read[30], _v_],
    bin_shape_int_8bit = Bin_prot_Shape[46],
    bin_int_8bit =
      [0, bin_shape_int_8bit, bin_writer_int_8bit, bin_reader_int_8bit],
    bin_writer_int_16bit = [0, Bin_prot_Size[32], Bin_prot_Write[32]];
   function _w_(_ai_, _aj_, _ak_){
    return variant_wrong_type(cst_int_16bit, _ai_, _aj_, _ak_);
   }
   var
    bin_reader_int_16bit = [0, Bin_prot_Read[31], _w_],
    bin_shape_int_16bit = Bin_prot_Shape[47],
    bin_int_16bit =
      [0, bin_shape_int_16bit, bin_writer_int_16bit, bin_reader_int_16bit],
    bin_writer_int_32bit = [0, Bin_prot_Size[33], Bin_prot_Write[33]];
   function _x_(_af_, _ag_, _ah_){
    return variant_wrong_type(cst_int_32bit, _af_, _ag_, _ah_);
   }
   var
    bin_reader_int_32bit = [0, Bin_prot_Read[32], _x_],
    bin_shape_int_32bit = Bin_prot_Shape[48],
    bin_int_32bit =
      [0, bin_shape_int_32bit, bin_writer_int_32bit, bin_reader_int_32bit],
    bin_writer_int_64bit = [0, Bin_prot_Size[34], Bin_prot_Write[34]];
   function _y_(_ac_, _ad_, _ae_){
    return variant_wrong_type(cst_int_64bit, _ac_, _ad_, _ae_);
   }
   var
    bin_reader_int_64bit = [0, Bin_prot_Read[33], _y_],
    bin_shape_int_64bit = Bin_prot_Shape[49],
    bin_int_64bit =
      [0, bin_shape_int_64bit, bin_writer_int_64bit, bin_reader_int_64bit],
    bin_writer_int64_bits = [0, Bin_prot_Size[35], Bin_prot_Write[35]];
   function _z_(_$_, _aa_, _ab_){
    return variant_wrong_type(cst_int64_bits, _$_, _aa_, _ab_);
   }
   var
    bin_reader_int64_bits = [0, Bin_prot_Read[34], _z_],
    bin_shape_int64_bits = Bin_prot_Shape[50],
    bin_int64_bits =
      [0, bin_shape_int64_bits, bin_writer_int64_bits, bin_reader_int64_bits],
    bin_writer_network16_int = [0, Bin_prot_Size[36], Bin_prot_Write[36]];
   function _A_(_Y_, _Z_, ___){
    return variant_wrong_type(cst_network16_int, _Y_, _Z_, ___);
   }
   var
    bin_reader_network16_int = [0, Bin_prot_Read[35], _A_],
    bin_shape_network16_int = Bin_prot_Shape[51],
    bin_network16_int =
      [0,
       bin_shape_network16_int,
       bin_writer_network16_int,
       bin_reader_network16_int],
    bin_writer_network32_int = [0, Bin_prot_Size[37], Bin_prot_Write[37]];
   function _B_(_V_, _W_, _X_){
    return variant_wrong_type(cst_network32_int, _V_, _W_, _X_);
   }
   var
    bin_reader_network32_int = [0, Bin_prot_Read[36], _B_],
    bin_shape_network32_int = Bin_prot_Shape[52],
    bin_network32_int =
      [0,
       bin_shape_network32_int,
       bin_writer_network32_int,
       bin_reader_network32_int],
    bin_writer_network32_int32 = [0, Bin_prot_Size[38], Bin_prot_Write[38]];
   function _C_(_S_, _T_, _U_){
    return variant_wrong_type(cst_network32_int32, _S_, _T_, _U_);
   }
   var
    bin_reader_network32_int32 = [0, Bin_prot_Read[37], _C_],
    bin_shape_network32_int32 = Bin_prot_Shape[53],
    bin_network32_int32 =
      [0,
       bin_shape_network32_int32,
       bin_writer_network32_int32,
       bin_reader_network32_int32],
    bin_writer_network64_int = [0, Bin_prot_Size[39], Bin_prot_Write[39]];
   function _D_(_P_, _Q_, _R_){
    return variant_wrong_type(cst_network64_int, _P_, _Q_, _R_);
   }
   var
    bin_reader_network64_int = [0, Bin_prot_Read[38], _D_],
    bin_shape_network64_int = Bin_prot_Shape[54],
    bin_network64_int =
      [0,
       bin_shape_network64_int,
       bin_writer_network64_int,
       bin_reader_network64_int],
    bin_writer_network64_int64 = [0, Bin_prot_Size[40], Bin_prot_Write[40]];
   function _E_(_M_, _N_, _O_){
    return variant_wrong_type(cst_network64_int64, _M_, _N_, _O_);
   }
   var
    bin_reader_network64_int64 = [0, Bin_prot_Read[39], _E_],
    bin_shape_network64_int64 = Bin_prot_Shape[55],
    bin_network64_int64 =
      [0,
       bin_shape_network64_int64,
       bin_writer_network64_int64,
       bin_reader_network64_int64];
   function bin_writer_array_no_length(bin_writer_el){
    function _L_(buf, pos, v){
     return caml_call4(Bin_prot_Write[41], bin_writer_el[2], buf, pos, v);
    }
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[41], bin_writer_el[1], v);
            },
            _L_];
   }
   function cnv_writer(cnv, tp_class){
    function _I_(buf, pos, v){
     var _K_ = caml_call1(cnv, v);
     return caml_call3(tp_class[2], buf, pos, _K_);
    }
    return [0,
            function(v){
             var _J_ = caml_call1(cnv, v);
             return caml_call1(tp_class[1], _J_);
            },
            _I_];
   }
   function cnv_reader(cnv, tp_class){
    function _H_(buf, pos_ref, vtag){
     return caml_call1(cnv, caml_call3(tp_class[2], buf, pos_ref, vtag));
    }
    return [0,
            function(buf, pos_ref){
             return caml_call1(cnv, caml_call2(tp_class[1], buf, pos_ref));
            },
            _H_];
   }
   function cnv(for_shape, for_writer, for_reader, tp_class){
    var
     _F_ = cnv_reader(for_reader, tp_class[3]),
     _G_ = cnv_writer(for_writer, tp_class[2]);
    return [0, caml_call1(for_shape, tp_class[1]), _G_, _F_];
   }
   var
    Bin_prot_Type_class =
      [0,
       S1,
       S2,
       S3,
       bin_writer_unit,
       bin_reader_unit,
       bin_shape_unit,
       bin_unit,
       bin_writer_bool,
       bin_reader_bool,
       bin_shape_bool,
       bin_bool,
       bin_writer_string,
       bin_reader_string,
       bin_shape_string,
       bin_string,
       bin_writer_bytes,
       bin_reader_bytes,
       bin_shape_bytes,
       bin_bytes,
       bin_writer_char,
       bin_reader_char,
       bin_shape_char,
       bin_char,
       bin_writer_int,
       bin_reader_int,
       bin_shape_int,
       bin_int,
       bin_writer_float,
       bin_reader_float,
       bin_shape_float,
       bin_float,
       bin_writer_int32,
       bin_reader_int32,
       bin_shape_int32,
       bin_int32,
       bin_writer_int64,
       bin_reader_int64,
       bin_shape_int64,
       bin_int64,
       bin_writer_nativeint,
       bin_reader_nativeint,
       bin_shape_nativeint,
       bin_nativeint,
       bin_writer_nat0,
       bin_reader_nat0,
       bin_shape_nat0,
       bin_nat0,
       bin_writer_ref,
       bin_reader_ref,
       bin_shape_ref,
       bin_ref,
       bin_writer_lazy,
       bin_reader_lazy,
       bin_shape_lazy,
       bin_lazy,
       bin_writer_option,
       bin_reader_option,
       bin_shape_option,
       bin_option,
       bin_writer_pair,
       bin_reader_pair,
       bin_pair,
       bin_writer_triple,
       bin_reader_triple,
       bin_triple,
       bin_writer_list,
       bin_reader_list,
       bin_shape_list,
       bin_list,
       bin_writer_array,
       bin_reader_array,
       bin_shape_array,
       bin_array,
       bin_writer_hashtbl,
       bin_reader_hashtbl,
       bin_shape_hashtbl,
       bin_hashtbl,
       bin_writer_float32_vec,
       bin_reader_float32_vec,
       bin_shape_float32_vec,
       bin_float32_vec,
       bin_writer_float64_vec,
       bin_reader_float64_vec,
       bin_shape_float64_vec,
       bin_float64_vec,
       bin_writer_vec,
       bin_reader_vec,
       bin_shape_vec,
       bin_vec,
       bin_writer_float32_mat,
       bin_reader_float32_mat,
       bin_shape_float32_mat,
       bin_float32_mat,
       bin_writer_float64_mat,
       bin_reader_float64_mat,
       bin_shape_float64_mat,
       bin_float64_mat,
       bin_writer_mat,
       bin_reader_mat,
       bin_shape_mat,
       bin_mat,
       bin_writer_bigstring,
       bin_reader_bigstring,
       bin_shape_bigstring,
       bin_bigstring,
       bin_writer_floatarray,
       bin_reader_floatarray,
       bin_shape_floatarray,
       bin_floatarray,
       bin_writer_float_array,
       bin_reader_float_array,
       bin_shape_float_array,
       bin_float_array,
       bin_writer_variant_int,
       bin_reader_variant_int,
       bin_variant_int,
       bin_writer_int_8bit,
       bin_reader_int_8bit,
       bin_shape_int_8bit,
       bin_int_8bit,
       bin_writer_int_16bit,
       bin_reader_int_16bit,
       bin_shape_int_16bit,
       bin_int_16bit,
       bin_writer_int_32bit,
       bin_reader_int_32bit,
       bin_shape_int_32bit,
       bin_int_32bit,
       bin_writer_int_64bit,
       bin_reader_int_64bit,
       bin_shape_int_64bit,
       bin_int_64bit,
       bin_writer_int64_bits,
       bin_reader_int64_bits,
       bin_shape_int64_bits,
       bin_int64_bits,
       bin_writer_network16_int,
       bin_reader_network16_int,
       bin_shape_network16_int,
       bin_network16_int,
       bin_writer_network32_int,
       bin_reader_network32_int,
       bin_shape_network32_int,
       bin_network32_int,
       bin_writer_network32_int32,
       bin_reader_network32_int32,
       bin_shape_network32_int32,
       bin_network32_int32,
       bin_writer_network64_int,
       bin_reader_network64_int,
       bin_shape_network64_int,
       bin_network64_int,
       bin_writer_network64_int64,
       bin_reader_network64_int64,
       bin_shape_network64_int64,
       bin_network64_int64,
       bin_writer_array_no_length,
       cnv_writer,
       cnv_reader,
       cnv];
   runtime.caml_register_global
    (44, Bin_prot_Type_class, "Bin_prot__Type_class");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Binable
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Minimal = [0],
    Bin_prot_Binable = [0, Minimal];
   runtime.caml_register_global(0, Bin_prot_Binable, "Bin_prot__Binable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Utils_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_prot_Utils_intf = [0];
   runtime.caml_register_global
    (0, Bin_prot_Utils_intf, "Bin_prot__Utils_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Utils
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Utils_intf, Bin_prot__Write, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bin_read_t$7 = "bin_read_t",
    cst_bin_size_t$3 = "bin_size_t",
    cst_bin_write_t$3 = "bin_write_t",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    bin_write_size_header = Bin_prot_Write[34],
    bin_read_size_header = Bin_prot_Read[33],
    cst_t$2 = cst_t$3,
    cst_bin_read_t$5 = cst_bin_read_t$7,
    cst_bin_read_t$6 = cst_bin_read_t$7,
    cst_bin_write_t$2 = cst_bin_write_t$3,
    cst_bin_size_t$2 = cst_bin_size_t$3,
    cst_f2112eda_e7d7_11e6_bb36_07 = "f2112eda-e7d7-11e6-bb36-072e9ce159db",
    cst_t$1 = cst_t$3,
    cst_bin_read_t$3 = cst_bin_read_t$7,
    cst_bin_read_t$4 = cst_bin_read_t$7,
    cst_bin_write_t$1 = cst_bin_write_t$3,
    cst_bin_size_t$1 = cst_bin_size_t$3,
    cst_b4e54ad2_4994_11e6_b8df_87 = "b4e54ad2-4994-11e6-b8df-87c2997f9f52",
    cst_t$0 = cst_t$3,
    cst_bin_read_t$1 = cst_bin_read_t$7,
    cst_bin_read_t$2 = cst_bin_read_t$7,
    cst_bin_write_t$0 = cst_bin_write_t$3,
    cst_bin_size_t$0 = cst_bin_size_t$3,
    cst_ac8a9ff4_4994_11e6_9a1b_9f = "ac8a9ff4-4994-11e6-9a1b-9fb4e933bd9d",
    cst_t = cst_t$3,
    cst_bin_read_t = cst_bin_read_t$7,
    cst_bin_read_t$0 = cst_bin_read_t$7,
    cst_bin_write_t = cst_bin_write_t$3,
    cst_bin_size_t = cst_bin_size_t$3,
    cst_6592371a_4994_11e6_923a_77 = "6592371a-4994-11e6-923a-7748e4182764",
    _c_ = [0, [2, 0, [12, 46, [2, 0, 0]]], "%s.%s"],
    cst_Bin_prot_Utils_Make_binabl$1 =
      "Bin_prot.Utils.Make_binable3.bin_reader_t",
    cst_Bin_prot_Utils_Make_binabl$0 =
      "Bin_prot.Utils.Make_binable2.bin_reader_t",
    cst_Bin_prot_Utils_Make_binabl =
      "Bin_prot.Utils.Make_binable1.bin_reader_t",
    _a_ =
      [0,
       [11,
        "Bin_prot.Utils.bin_read_stream: size exceeds max_size: ",
        [4, 0, 0, 0, [11, " > ", [4, 0, 0, 0, 0]]]],
       "Bin_prot.Utils.bin_read_stream: size exceeds max_size: %d > %d"],
    _b_ =
      [0,
       [11,
        "Bin_prot.Utils.bin_read_stream: protocol lied about length of value: expected ",
        [4, 0, 0, 0, [11, ", received ", [4, 0, 0, 0, 0]]]],
       "Bin_prot.Utils.bin_read_stream: protocol lied about length of value: expected %d, received %d"],
    cst_Bin_prot_Utils_bin_dump_si =
      "Bin_prot.Utils.bin_dump: size changed during writing",
    _e_ =
      [0,
       [2, 0, [11, ": tried to read more elements than available", 0]],
       "%s: tried to read more elements than available"],
    _g_ =
      [0,
       [2, 0, [11, ": didn't read all elements", 0]],
       "%s: didn't read all elements"],
    size_header_length = 8;
   function bin_dump(opt, writer, v){
    if(opt) var sth = opt[1], header = sth; else var header = 0;
    var pos_len = caml_call1(writer[1], v);
    if(header)
     var
      tot_len = caml_call2(Bin_prot_Common[23], pos_len, size_header_length),
      buf = caml_call1(Bin_prot_Common[1], tot_len),
      pos = caml_call3(bin_write_size_header, buf, 0, pos_len),
      pos_len$0 = caml_call2(Bin_prot_Common[23], pos, pos_len),
      pos$0 = pos,
      buf$0 = buf;
    else
     var
      buf$1 = caml_call1(Bin_prot_Common[1], pos_len),
      pos_len$0 = pos_len,
      pos$0 = 0,
      buf$0 = buf$1;
    var pos$1 = caml_call3(writer[2], buf$0, pos$0, v);
    return pos$1 === pos_len$0
            ? buf$0
            : caml_call1(Stdlib[2], cst_Bin_prot_Utils_bin_dump_si);
   }
   function bin_read_stream(max_size, read, reader){
    var buf = caml_call1(Bin_prot_Common[1], size_header_length);
    caml_call3(read, buf, 0, size_header_length);
    var
     pos_ref = [0, 0],
     len = caml_call2(bin_read_size_header, buf, pos_ref);
    if(max_size){
     var max_size$0 = max_size[1];
     if(max_size$0 < len){
      var _aV_ = caml_call3(Stdlib_Printf[4], _a_, len, max_size$0);
      return caml_call1(Stdlib[2], _aV_);
     }
    }
    var buf$0 = 8 < len ? caml_call1(Bin_prot_Common[1], len) : buf;
    caml_call3(read, buf$0, 0, len);
    pos_ref[1] = 0;
    var res = caml_call2(reader[1], buf$0, pos_ref);
    if(pos_ref[1] === len) return res;
    var msg = caml_call3(Stdlib_Printf[4], _b_, len, pos_ref[1]);
    return caml_call1(Stdlib[2], msg);
   }
   function Of_minimal(S){
    var
     bin_shape_t = S[1],
     bin_size_t = S[2],
     bin_write_t = S[3],
     bin_read_t = S[4],
     bin_read_t$0 = S[5],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     bin_reader_t = [0, bin_read_t, bin_read_t$0],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    return [0,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function maybe_annotate_shape(maybe_uuid, shape){
    if(! maybe_uuid) return shape;
    var uuid = maybe_uuid[1];
    return caml_call2(Bin_prot_Shape[17], uuid, shape);
   }
   function Make_binable_gen(S){
    var B = S[1], bin_shape_t = maybe_annotate_shape(S[4], B[1]);
    function bin_size_t(t){
     var _aU_ = caml_call1(S[2], t);
     return caml_call1(B[2], _aU_);
    }
    function bin_write_t(buf, pos, t){
     var _aT_ = caml_call1(S[2], t);
     return caml_call3(B[3], buf, pos, _aT_);
    }
    function bin_read_t(buf, pos_ref){
     var _aS_ = caml_call2(B[4], buf, pos_ref);
     return caml_call1(S[3], _aS_);
    }
    function bin_read_t$0(buf, pos_ref, n){
     var _aR_ = caml_call3(B[5], buf, pos_ref, n);
     return caml_call1(S[3], _aR_);
    }
    var
     include =
       Of_minimal
        ([0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0]),
     bin_size_t$0 = include[1],
     bin_write_t$0 = include[2],
     bin_read_t$1 = include[3],
     bin_read_t$2 = include[4],
     bin_shape_t$0 = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8];
    return [0,
            bin_size_t$0,
            bin_write_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_shape_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable1_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el){
     var _aQ_ = caml_call1(B[1], bin_shape_el);
     return maybe_annotate_shape(S[4], _aQ_);
    }
    function bin_size_t(bin_size_el, t){
     var _aP_ = caml_call1(S[2], t);
     return caml_call2(B[2], bin_size_el, _aP_);
    }
    function bin_write_t(bin_write_el, buf, pos, t){
     var _aO_ = caml_call1(S[2], t);
     return caml_call4(B[3], bin_write_el, buf, pos, _aO_);
    }
    function bin_read_t(bin_read_el, buf, pos_ref){
     var _aN_ = caml_call3(B[4], bin_read_el, buf, pos_ref);
     return caml_call1(S[3], _aN_);
    }
    function bin_read_t$0(bin_read_el, buf, pos_ref, n){
     var _aM_ = caml_call4(B[5], bin_read_el, buf, pos_ref, n);
     return caml_call1(S[3], _aM_);
    }
    function bin_writer_t(bin_writer){
     function _aL_(buf, pos, v){
      return bin_write_t(bin_writer[2], buf, pos, v);
     }
     return [0, function(v){return bin_size_t(bin_writer[1], v);}, _aL_];
    }
    function bin_reader_t(bin_reader){
     function _aK_(buf, pos_ref, n){
      return caml_call2
              (Bin_prot_Common[19],
               cst_Bin_prot_Utils_Make_binabl,
               pos_ref[1]);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader[1], buf, pos_ref);
             },
             _aK_];
    }
    function bin_t(type_class){
     var
      _aI_ = bin_reader_t(type_class[3]),
      _aJ_ = bin_writer_t(type_class[2]);
     return [0, bin_shape_t(type_class[1]), _aJ_, _aI_];
    }
    return [0,
            B,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable2_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el1, bin_shape_el2){
     var _aH_ = caml_call2(B[1], bin_shape_el1, bin_shape_el2);
     return maybe_annotate_shape(S[4], _aH_);
    }
    function bin_size_t(bin_size_el1, bin_size_el2, t){
     var _aG_ = caml_call1(S[2], t);
     return caml_call3(B[2], bin_size_el1, bin_size_el2, _aG_);
    }
    function bin_write_t(bin_write_el1, bin_write_el2, buf, pos, t){
     var _aF_ = caml_call1(S[2], t);
     return caml_call5(B[3], bin_write_el1, bin_write_el2, buf, pos, _aF_);
    }
    function bin_read_t(bin_read_el1, bin_read_el2, buf, pos_ref){
     var _aE_ = caml_call4(B[4], bin_read_el1, bin_read_el2, buf, pos_ref);
     return caml_call1(S[3], _aE_);
    }
    function bin_read_t$0(bin_read_el1, bin_read_el2, buf, pos_ref, n){
     var _aD_ = caml_call5(B[5], bin_read_el1, bin_read_el2, buf, pos_ref, n);
     return caml_call1(S[3], _aD_);
    }
    function bin_writer_t(bin_writer1, bin_writer2){
     function _aC_(buf, pos, v){
      return bin_write_t(bin_writer1[2], bin_writer2[2], buf, pos, v);
     }
     return [0,
             function(v){
              return bin_size_t(bin_writer1[1], bin_writer2[1], v);
             },
             _aC_];
    }
    function bin_reader_t(bin_reader1, bin_reader2){
     function _aB_(buf, pos_ref, n){
      return caml_call2
              (Bin_prot_Common[19],
               cst_Bin_prot_Utils_Make_binabl$0,
               pos_ref[1]);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader1[1], bin_reader2[1], buf, pos_ref);
             },
             _aB_];
    }
    function bin_t(type_class1, type_class2){
     var
      _az_ = bin_reader_t(type_class1[3], type_class2[3]),
      _aA_ = bin_writer_t(type_class1[2], type_class2[2]);
     return [0, bin_shape_t(type_class1[1], type_class2[1]), _aA_, _az_];
    }
    return [0,
            B,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable3_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el1, bin_shape_el2, bin_shape_el3){
     var _ay_ = caml_call3(B[1], bin_shape_el1, bin_shape_el2, bin_shape_el3);
     return maybe_annotate_shape(S[4], _ay_);
    }
    function bin_size_t(bin_size_el1, bin_size_el2, bin_size_el3, t){
     var _ax_ = caml_call1(S[2], t);
     return caml_call4(B[2], bin_size_el1, bin_size_el2, bin_size_el3, _ax_);
    }
    function bin_write_t
    (bin_write_el1, bin_write_el2, bin_write_el3, buf, pos, t){
     var _aw_ = caml_call1(S[2], t);
     return caml_call6
             (B[3],
              bin_write_el1,
              bin_write_el2,
              bin_write_el3,
              buf,
              pos,
              _aw_);
    }
    function bin_read_t
    (bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref){
     var
      _av_ =
        caml_call5
         (B[4], bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref);
     return caml_call1(S[3], _av_);
    }
    function bin_read_t$0
    (bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref, n){
     var
      _au_ =
        caml_call6
         (B[5], bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref, n);
     return caml_call1(S[3], _au_);
    }
    function bin_writer_t(bin_writer1, bin_writer2, bin_writer3){
     function _at_(buf, pos, v){
      return bin_write_t
              (bin_writer1[2], bin_writer2[2], bin_writer3[2], buf, pos, v);
     }
     return [0,
             function(v){
              return bin_size_t
                      (bin_writer1[1], bin_writer2[1], bin_writer3[1], v);
             },
             _at_];
    }
    function bin_reader_t(bin_reader1, bin_reader2, bin_reader3){
     function _as_(buf, pos_ref, n){
      return caml_call2
              (Bin_prot_Common[19],
               cst_Bin_prot_Utils_Make_binabl$1,
               pos_ref[1]);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t
                      (bin_reader1[1],
                       bin_reader2[1],
                       bin_reader3[1],
                       buf,
                       pos_ref);
             },
             _as_];
    }
    function bin_t(type_class1, type_class2, type_class3){
     var
      _aq_ = bin_reader_t(type_class1[3], type_class2[3], type_class3[3]),
      _ar_ = bin_writer_t(type_class1[2], type_class2[2], type_class3[2]);
     return [0,
             bin_shape_t(type_class1[1], type_class2[1], type_class3[1]),
             _ar_,
             _aq_];
    }
    return [0,
            B,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable_with_uuid(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     maybe_caller_identity = [0, S[4]];
    return Make_binable_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
   }
   function Make_binable_without_uuid(S){
    var Binable = S[1], to_binable = S[2], of_binable = S[3];
    return Make_binable_gen([0, Binable, to_binable, of_binable, 0]);
   }
   function with_module_name(f, module_name, function_name){
    if(! module_name) return caml_call1(f, function_name);
    var module_name$0 = module_name[1];
    return caml_call4(Stdlib_Printf[10], f, _c_, module_name$0, function_name);
   }
   var _d_ = Bin_prot_Common[20];
   function raise_concurrent_modification(_ao_, _ap_){return with_module_name(_d_, _ao_, _ap_);
   }
   var _f_ = caml_call2(Stdlib_Printf[10], Stdlib[2], _e_);
   function raise_read_too_much(_am_, _an_){
    return with_module_name(_f_, _am_, _an_);
   }
   var _h_ = caml_call2(Stdlib_Printf[10], Stdlib[2], _g_);
   function raise_read_not_enough(_ak_, _al_){return with_module_name(_h_, _ak_, _al_);
   }
   function Make_iterable_binable1(S){
    function bin_shape_t(t){
     var
      _ah_ = [0, caml_call1(S[9], t), 0],
      _ai_ = caml_call1(Bin_prot_Shape[5][1], cst_ac8a9ff4_4994_11e6_9a1b_9f),
      _aj_ = [0, caml_call2(Bin_prot_Shape[16], _ai_, _ah_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _aj_);
    }
    function bin_size_t(bin_size_a, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     function _ad_(el){
      var _ag_ = caml_call2(S[6], bin_size_a, el);
      size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _ag_);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _ad_);
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return raise_concurrent_modification(S[2], cst_bin_size_t$0);
     var _ae_ = size_ref[1], _af_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _af_, _ae_);
    }
    function bin_write_t(bin_write_a, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     function _ac_(el){
      pos_ref[1] = caml_call4(S[7], bin_write_a, buf, pos_ref[1], el);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _ac_);
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : raise_concurrent_modification(S[2], cst_bin_write_t$0);
    }
    function bin_read_t(bin_read_a, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) raise_read_too_much(S[2], cst_bin_read_t$1);
      idx[1]++;
      return caml_call3(S[8], bin_read_a, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) raise_read_not_enough(S[2], cst_bin_read_t$2);
     return result;
    }
    function bin_read_t$0(bin_read_a, buf, pos_ref, n){
     return caml_call2(Bin_prot_Common[19], cst_t$0, pos_ref[1]);
    }
    function bin_writer_t(bin_writer){
     function _ab_(buf, pos, v){
      return bin_write_t(bin_writer[2], buf, pos, v);
     }
     return [0, function(v){return bin_size_t(bin_writer[1], v);}, _ab_];
    }
    function bin_reader_t(bin_reader){
     function _aa_(buf, pos_ref, n){
      return bin_read_t$0(bin_reader[1], buf, pos_ref, n);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader[1], buf, pos_ref);
             },
             _aa_];
    }
    function bin_t(type_class){
     var ___ = bin_reader_t(type_class[3]), _$_ = bin_writer_t(type_class[2]);
     return [0, bin_shape_t(type_class[1]), _$_, ___];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_iterable_binable2(S){
    function bin_shape_t(t1, t2){
     var
      _X_ = [0, caml_call2(S[9], t1, t2), 0],
      _Y_ = caml_call1(Bin_prot_Shape[5][1], cst_b4e54ad2_4994_11e6_b8df_87),
      _Z_ = [0, caml_call2(Bin_prot_Shape[16], _Y_, _X_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _Z_);
    }
    function bin_size_t(bin_size_a, bin_size_b, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     function _T_(el){
      var _W_ = caml_call3(S[6], bin_size_a, bin_size_b, el);
      size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _W_);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _T_);
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return raise_concurrent_modification(S[2], cst_bin_size_t$1);
     var _U_ = size_ref[1], _V_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _V_, _U_);
    }
    function bin_write_t(bin_write_a, bin_write_b, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     function _S_(el){
      pos_ref[1] =
       caml_call5(S[7], bin_write_a, bin_write_b, buf, pos_ref[1], el);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _S_);
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : raise_concurrent_modification(S[2], cst_bin_write_t$1);
    }
    function bin_read_t(bin_read_a, bin_read_b, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) raise_read_too_much(S[2], cst_bin_read_t$3);
      idx[1]++;
      return caml_call4(S[8], bin_read_a, bin_read_b, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) raise_read_not_enough(S[2], cst_bin_read_t$4);
     return result;
    }
    function bin_read_t$0(bin_read_a, bin_read_b, buf, pos_ref, n){return caml_call2(Bin_prot_Common[19], cst_t$1, pos_ref[1]);
    }
    function bin_writer_t(bin_writer1, bin_writer2){
     function _R_(buf, pos, v){
      return bin_write_t(bin_writer1[2], bin_writer2[2], buf, pos, v);
     }
     return [0,
             function(v){
              return bin_size_t(bin_writer1[1], bin_writer2[1], v);
             },
             _R_];
    }
    function bin_reader_t(bin_reader1, bin_reader2){
     function _Q_(buf, pos_ref, n){
      return bin_read_t$0(bin_reader1[1], bin_reader2[1], buf, pos_ref, n);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader1[1], bin_reader2[1], buf, pos_ref);
             },
             _Q_];
    }
    function bin_t(type_class1, type_class2){
     var
      _O_ = bin_reader_t(type_class1[3], type_class2[3]),
      _P_ = bin_writer_t(type_class1[2], type_class2[2]);
     return [0, bin_shape_t(type_class1[1], type_class2[1]), _P_, _O_];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_iterable_binable3(S){
    function bin_shape_t(t1, t2, t3){
     var
      _L_ = [0, caml_call3(S[9], t1, t2, t3), 0],
      _M_ = caml_call1(Bin_prot_Shape[5][1], cst_f2112eda_e7d7_11e6_bb36_07),
      _N_ = [0, caml_call2(Bin_prot_Shape[16], _M_, _L_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _N_);
    }
    function bin_size_t(bin_size_a, bin_size_b, bin_size_c, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     function _H_(el){
      var _K_ = caml_call4(S[6], bin_size_a, bin_size_b, bin_size_c, el);
      size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _K_);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _H_);
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return raise_concurrent_modification(S[2], cst_bin_size_t$2);
     var _I_ = size_ref[1], _J_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _J_, _I_);
    }
    function bin_write_t(bin_write_a, bin_write_b, bin_write_c, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     function _G_(el){
      pos_ref[1] =
       caml_call6
        (S[7], bin_write_a, bin_write_b, bin_write_c, buf, pos_ref[1], el);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _G_);
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : raise_concurrent_modification(S[2], cst_bin_write_t$2);
    }
    function bin_read_t(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) raise_read_too_much(S[2], cst_bin_read_t$5);
      idx[1]++;
      return caml_call5
              (S[8], bin_read_a, bin_read_b, bin_read_c, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) raise_read_not_enough(S[2], cst_bin_read_t$6);
     return result;
    }
    function bin_read_t$0(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref, n){return caml_call2(Bin_prot_Common[19], cst_t$2, pos_ref[1]);
    }
    function bin_writer_t(bin_writer1, bin_writer2, bin_writer3){
     function _F_(buf, pos, v){
      return bin_write_t
              (bin_writer1[2], bin_writer2[2], bin_writer3[2], buf, pos, v);
     }
     return [0,
             function(v){
              return bin_size_t
                      (bin_writer1[1], bin_writer2[1], bin_writer3[1], v);
             },
             _F_];
    }
    function bin_reader_t(bin_reader1, bin_reader2, bin_reader3){
     function _E_(buf, pos_ref, n){
      return bin_read_t$0
              (bin_reader1[1],
               bin_reader2[1],
               bin_reader3[1],
               buf,
               pos_ref,
               n);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t
                      (bin_reader1[1],
                       bin_reader2[1],
                       bin_reader3[1],
                       buf,
                       pos_ref);
             },
             _E_];
    }
    function bin_t(type_class1, type_class2, type_class3){
     var
      _C_ = bin_reader_t(type_class1[3], type_class2[3], type_class3[3]),
      _D_ = bin_writer_t(type_class1[2], type_class2[2], type_class3[2]);
     return [0,
             bin_shape_t(type_class1[1], type_class2[1], type_class3[1]),
             _D_,
             _C_];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function _i_(S){
    var
     _u_ = [0, S[9], 0],
     _v_ = caml_call1(Bin_prot_Shape[5][1], cst_6592371a_4994_11e6_923a_77),
     _w_ = [0, caml_call2(Bin_prot_Shape[16], _v_, _u_), 0],
     bin_shape_t = caml_call2(Bin_prot_Shape[16], S[1], _w_);
    function bin_size_t(t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     function _y_(el){
      var _B_ = caml_call1(S[6], el);
      size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _B_);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _y_);
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return raise_concurrent_modification(S[2], cst_bin_size_t);
     var _z_ = size_ref[1], _A_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _A_, _z_);
    }
    function bin_write_t(buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     function _x_(el){
      pos_ref[1] = caml_call3(S[7], buf, pos_ref[1], el);
      cnt_ref[1]++;
      return 0;
     }
     caml_call2(S[4], t, _x_);
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : raise_concurrent_modification(S[2], cst_bin_write_t);
    }
    function bin_read_t(buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) raise_read_too_much(S[2], cst_bin_read_t);
      idx[1]++;
      return caml_call2(S[8], buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) raise_read_not_enough(S[2], cst_bin_read_t$0);
     return result;
    }
    function bin_read_t$0(buf, pos_ref, n){
     return caml_call2(Bin_prot_Common[19], cst_t, pos_ref[1]);
    }
    var
     bin_writer_t = [0, bin_size_t, bin_write_t],
     bin_reader_t = [0, bin_read_t, bin_read_t$0],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    return [0,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function _j_(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     _t_ = Make_binable3_gen([0, Binable, to_binable, of_binable, 0]);
    return [0, _t_[2], _t_[3], _t_[4], _t_[5], _t_[6], _t_[7], _t_[8], _t_[9]];
   }
   function _k_(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     _s_ = Make_binable2_gen([0, Binable, to_binable, of_binable, 0]);
    return [0, _s_[2], _s_[3], _s_[4], _s_[5], _s_[6], _s_[7], _s_[8], _s_[9]];
   }
   function _l_(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     _r_ = Make_binable1_gen([0, Binable, to_binable, of_binable, 0]);
    return [0, _r_[2], _r_[3], _r_[4], _r_[5], _r_[6], _r_[7], _r_[8], _r_[9]];
   }
   function _m_(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     maybe_caller_identity = [0, S[4]],
     _q_ =
       Make_binable3_gen
        ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
    return [0, _q_[2], _q_[3], _q_[4], _q_[5], _q_[6], _q_[7], _q_[8], _q_[9]];
   }
   function _n_(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     maybe_caller_identity = [0, S[4]],
     _p_ =
       Make_binable2_gen
        ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
    return [0, _p_[2], _p_[3], _p_[4], _p_[5], _p_[6], _p_[7], _p_[8], _p_[9]];
   }
   var
    Bin_prot_Utils =
      [0,
       size_header_length,
       bin_read_size_header,
       bin_write_size_header,
       bin_dump,
       bin_read_stream,
       Of_minimal,
       Make_binable_with_uuid,
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         maybe_caller_identity = [0, S[4]],
         _o_ =
           Make_binable1_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
        return [0,
                _o_[2],
                _o_[3],
                _o_[4],
                _o_[5],
                _o_[6],
                _o_[7],
                _o_[8],
                _o_[9]];
       },
       _n_,
       _m_,
       Make_binable_without_uuid,
       _l_,
       _k_,
       _j_,
       _i_,
       Make_iterable_binable1,
       Make_iterable_binable2,
       Make_iterable_binable3];
   runtime.caml_register_global(40, Bin_prot_Utils, "Bin_prot__Utils");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Std
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Size, Bin_prot__Type_class, Bin_prot__Write
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_lazy$1 = "lazy";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    bin_size_unit = Bin_prot_Size[1],
    bin_size_bool = Bin_prot_Size[2],
    bin_size_string = Bin_prot_Size[3],
    bin_size_bytes = Bin_prot_Size[4],
    bin_size_char = Bin_prot_Size[5],
    bin_size_int = Bin_prot_Size[6],
    bin_size_float = Bin_prot_Size[7],
    bin_size_int32 = Bin_prot_Size[8],
    bin_size_int64 = Bin_prot_Size[9],
    bin_size_nativeint = Bin_prot_Size[10],
    bin_size_nat0 = Bin_prot_Size[11],
    bin_size_ref = Bin_prot_Size[12],
    bin_size_lazy_t = Bin_prot_Size[13],
    bin_size_lazy = Bin_prot_Size[14],
    bin_size_option = Bin_prot_Size[15],
    bin_size_pair = Bin_prot_Size[16],
    bin_size_triple = Bin_prot_Size[17],
    bin_size_list = Bin_prot_Size[18],
    bin_size_array = Bin_prot_Size[19],
    bin_size_hashtbl = Bin_prot_Size[20],
    bin_size_float32_vec = Bin_prot_Size[21],
    bin_size_float64_vec = Bin_prot_Size[22],
    bin_size_vec = Bin_prot_Size[23],
    bin_size_float32_mat = Bin_prot_Size[24],
    bin_size_float64_mat = Bin_prot_Size[25],
    bin_size_mat = Bin_prot_Size[26],
    bin_size_bigstring = Bin_prot_Size[27],
    bin_size_floatarray = Bin_prot_Size[28],
    bin_size_float_array = Bin_prot_Size[29],
    bin_size_variant_int = Bin_prot_Size[30],
    bin_size_int_8bit = Bin_prot_Size[31],
    bin_size_int_16bit = Bin_prot_Size[32],
    bin_size_int_32bit = Bin_prot_Size[33],
    bin_size_int_64bit = Bin_prot_Size[34],
    bin_size_int64_bits = Bin_prot_Size[35],
    bin_size_network16_int = Bin_prot_Size[36],
    bin_size_network32_int = Bin_prot_Size[37],
    bin_size_network32_int32 = Bin_prot_Size[38],
    bin_size_network64_int = Bin_prot_Size[39],
    bin_size_network64_int64 = Bin_prot_Size[40],
    bin_size_array_no_length = Bin_prot_Size[41],
    bin_size_md5 = Bin_prot_Size[42],
    Maximum = Bin_prot_Size[43],
    Minimum = Bin_prot_Size[44],
    bin_unit = Bin_prot_Type_class[7],
    bin_shape_unit = Bin_prot_Type_class[6],
    bin_writer_unit = Bin_prot_Type_class[4],
    bin_write_unit = Bin_prot_Write[1],
    bin_reader_unit = Bin_prot_Type_class[5],
    bin_read_unit = Bin_prot_Read[1],
    cst_float64_vec = "float64_vec",
    cst_float32_vec = "float32_vec",
    cst_vec = "vec",
    cst_float64_mat = "float64_mat",
    cst_float32_mat = "float32_mat",
    cst_mat = "mat",
    cst_bigstring = "bigstring",
    cst_hashtbl = "hashtbl",
    cst_array = "array",
    cst_list = "list",
    cst_option = "option",
    cst_lazy$0 = cst_lazy$1,
    cst_lazy = cst_lazy$1,
    cst_ref = "ref",
    cst_nativeint = "nativeint",
    cst_int64 = "int64",
    cst_int32 = "int32",
    cst_float_array = "float_array",
    cst_floatarray = "floatarray",
    cst_float = "float",
    cst_int = "int",
    cst_char = "char",
    cst_bytes = "bytes",
    cst_string = "string",
    cst_bool = "bool",
    cst_unit = "unit";
   function bin_read_unit$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_unit, pos_ref[1]);
   }
   var
    bin_bool = Bin_prot_Type_class[11],
    bin_shape_bool = Bin_prot_Type_class[10],
    bin_writer_bool = Bin_prot_Type_class[8],
    bin_write_bool = Bin_prot_Write[2],
    bin_reader_bool = Bin_prot_Type_class[9],
    bin_read_bool = Bin_prot_Read[2];
   function bin_read_bool$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bool, pos_ref[1]);
   }
   var
    bin_string = Bin_prot_Type_class[15],
    bin_shape_string = Bin_prot_Type_class[14],
    bin_writer_string = Bin_prot_Type_class[12],
    bin_write_string = Bin_prot_Write[3],
    bin_reader_string = Bin_prot_Type_class[13],
    bin_read_string = Bin_prot_Read[3];
   function bin_read_string$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_string, pos_ref[1]);
   }
   var
    bin_bytes = Bin_prot_Type_class[19],
    bin_shape_bytes = Bin_prot_Type_class[18],
    bin_writer_bytes = Bin_prot_Type_class[16],
    bin_write_bytes = Bin_prot_Write[4],
    bin_reader_bytes = Bin_prot_Type_class[17],
    bin_read_bytes = Bin_prot_Read[4];
   function bin_read_bytes$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bytes, pos_ref[1]);
   }
   var
    bin_char = Bin_prot_Type_class[23],
    bin_shape_char = Bin_prot_Type_class[22],
    bin_writer_char = Bin_prot_Type_class[20],
    bin_write_char = Bin_prot_Write[5],
    bin_reader_char = Bin_prot_Type_class[21],
    bin_read_char = Bin_prot_Read[5];
   function bin_read_char$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_char, pos_ref[1]);
   }
   var
    bin_int = Bin_prot_Type_class[27],
    bin_shape_int = Bin_prot_Type_class[26],
    bin_writer_int = Bin_prot_Type_class[24],
    bin_write_int = Bin_prot_Write[6],
    bin_reader_int = Bin_prot_Type_class[25],
    bin_read_int = Bin_prot_Read[6];
   function bin_read_int$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int, pos_ref[1]);
   }
   var
    bin_float = Bin_prot_Type_class[31],
    bin_shape_float = Bin_prot_Type_class[30],
    bin_writer_float = Bin_prot_Type_class[28],
    bin_write_float = Bin_prot_Write[8],
    bin_reader_float = Bin_prot_Type_class[29],
    bin_read_float = Bin_prot_Read[8];
   function bin_read_float$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float, pos_ref[1]);
   }
   var
    bin_floatarray = Bin_prot_Type_class[109],
    bin_shape_floatarray = Bin_prot_Type_class[108],
    bin_writer_floatarray = Bin_prot_Type_class[106],
    bin_write_floatarray = Bin_prot_Write[27],
    bin_reader_floatarray = Bin_prot_Type_class[107],
    bin_read_floatarray = Bin_prot_Read[27];
   function bin_read_floatarray$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_floatarray, pos_ref[1]);
   }
   var
    bin_shape_float_array = Bin_prot_Type_class[112],
    bin_writer_float_array = Bin_prot_Type_class[110],
    bin_write_float_array = Bin_prot_Write[28],
    bin_reader_float_array = Bin_prot_Type_class[111],
    bin_read_float_array = Bin_prot_Read[28];
   function bin_read_float_array$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float_array, pos_ref[1]);
   }
   var
    bin_int32 = Bin_prot_Type_class[35],
    bin_shape_int32 = Bin_prot_Type_class[34],
    bin_writer_int32 = Bin_prot_Type_class[32],
    bin_write_int32 = Bin_prot_Write[9],
    bin_reader_int32 = Bin_prot_Type_class[33],
    bin_read_int32 = Bin_prot_Read[9];
   function bin_read_int32$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int32, pos_ref[1]);
   }
   var
    bin_int64 = Bin_prot_Type_class[39],
    bin_shape_int64 = Bin_prot_Type_class[38],
    bin_writer_int64 = Bin_prot_Type_class[36],
    bin_write_int64 = Bin_prot_Write[10],
    bin_reader_int64 = Bin_prot_Type_class[37],
    bin_read_int64 = Bin_prot_Read[10];
   function bin_read_int64$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int64, pos_ref[1]);
   }
   var
    bin_nativeint = Bin_prot_Type_class[43],
    bin_shape_nativeint = Bin_prot_Type_class[42],
    bin_writer_nativeint = Bin_prot_Type_class[40],
    bin_write_nativeint = Bin_prot_Write[11],
    bin_reader_nativeint = Bin_prot_Type_class[41],
    bin_read_nativeint = Bin_prot_Read[11];
   function bin_read_nativeint$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_nativeint, pos_ref[1]);
   }
   var
    bin_ref = Bin_prot_Type_class[51],
    bin_shape_ref = Bin_prot_Type_class[50],
    bin_writer_ref = Bin_prot_Type_class[48],
    bin_write_ref = Bin_prot_Write[12],
    bin_reader_ref = Bin_prot_Type_class[49],
    bin_read_ref = Bin_prot_Read[12];
   function bin_read_ref$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_ref, pos_ref[1]);
   }
   var
    bin_lazy_t = Bin_prot_Type_class[55],
    bin_shape_lazy_t = Bin_prot_Type_class[54],
    bin_writer_lazy_t = Bin_prot_Type_class[52],
    bin_write_lazy_t = Bin_prot_Write[13],
    bin_reader_lazy_t = Bin_prot_Type_class[53],
    bin_read_lazy_t = Bin_prot_Read[13];
   function bin_read_lazy_t$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_lazy, pos_ref[1]);
   }
   var
    bin_lazy = Bin_prot_Type_class[55],
    bin_shape_lazy = Bin_prot_Type_class[54],
    bin_writer_lazy = Bin_prot_Type_class[52],
    bin_write_lazy = Bin_prot_Write[13],
    bin_reader_lazy = Bin_prot_Type_class[53],
    bin_read_lazy = Bin_prot_Read[13];
   function bin_read_lazy$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_lazy$0, pos_ref[1]);
   }
   var
    bin_option = Bin_prot_Type_class[59],
    bin_shape_option = Bin_prot_Type_class[58],
    bin_writer_option = Bin_prot_Type_class[56],
    bin_write_option = Bin_prot_Write[14],
    bin_reader_option = Bin_prot_Type_class[57],
    bin_read_option = Bin_prot_Read[14];
   function bin_read_option$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_option, pos_ref[1]);
   }
   var
    bin_list = Bin_prot_Type_class[69],
    bin_shape_list = Bin_prot_Type_class[68],
    bin_writer_list = Bin_prot_Type_class[66],
    bin_write_list = Bin_prot_Write[17],
    bin_reader_list = Bin_prot_Type_class[67],
    bin_read_list = Bin_prot_Read[17];
   function bin_read_list$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_list, pos_ref[1]);
   }
   var
    bin_array = Bin_prot_Type_class[73],
    bin_shape_array = Bin_prot_Type_class[72],
    bin_writer_array = Bin_prot_Type_class[70],
    bin_write_array = Bin_prot_Write[18],
    bin_reader_array = Bin_prot_Type_class[71],
    bin_read_array = Bin_prot_Read[18];
   function bin_read_array$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_array, pos_ref[1]);
   }
   var
    bin_hashtbl = Bin_prot_Type_class[77],
    bin_shape_hashtbl = Bin_prot_Type_class[76],
    bin_writer_hashtbl = Bin_prot_Type_class[74],
    bin_write_hashtbl = Bin_prot_Write[19],
    bin_reader_hashtbl = Bin_prot_Type_class[75],
    bin_read_hashtbl = Bin_prot_Read[19];
   function bin_read_hashtbl$0(f, g, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_hashtbl, pos_ref[1]);
   }
   var
    bin_bigstring = Bin_prot_Type_class[105],
    bin_shape_bigstring = Bin_prot_Type_class[104],
    bin_writer_bigstring = Bin_prot_Type_class[102],
    bin_write_bigstring = Bin_prot_Write[26],
    bin_reader_bigstring = Bin_prot_Type_class[103],
    bin_read_bigstring = Bin_prot_Read[26];
   function bin_read_bigstring$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bigstring, pos_ref[1]);
   }
   var
    bin_mat = Bin_prot_Type_class[101],
    bin_shape_mat = Bin_prot_Type_class[100],
    bin_writer_mat = Bin_prot_Type_class[98],
    bin_write_mat = Bin_prot_Write[25],
    bin_reader_mat = Bin_prot_Type_class[99],
    bin_read_mat = Bin_prot_Read[25];
   function bin_read_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_mat, pos_ref[1]);
   }
   var
    bin_float32_mat = Bin_prot_Type_class[93],
    bin_shape_float32_mat = Bin_prot_Type_class[92],
    bin_writer_float32_mat = Bin_prot_Type_class[90],
    bin_write_float32_mat = Bin_prot_Write[23],
    bin_reader_float32_mat = Bin_prot_Type_class[91],
    bin_read_float32_mat = Bin_prot_Read[23];
   function bin_read_float32_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float32_mat, pos_ref[1]);
   }
   var
    bin_float64_mat = Bin_prot_Type_class[97],
    bin_shape_float64_mat = Bin_prot_Type_class[96],
    bin_writer_float64_mat = Bin_prot_Type_class[94],
    bin_write_float64_mat = Bin_prot_Write[24],
    bin_reader_float64_mat = Bin_prot_Type_class[95],
    bin_read_float64_mat = Bin_prot_Read[24];
   function bin_read_float64_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float64_mat, pos_ref[1]);
   }
   var
    bin_vec = Bin_prot_Type_class[89],
    bin_shape_vec = Bin_prot_Type_class[88],
    bin_writer_vec = Bin_prot_Type_class[86],
    bin_write_vec = Bin_prot_Write[22],
    bin_reader_vec = Bin_prot_Type_class[87],
    bin_read_vec = Bin_prot_Read[22];
   function bin_read_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_vec, pos_ref[1]);
   }
   var
    bin_float32_vec = Bin_prot_Type_class[81],
    bin_shape_float32_vec = Bin_prot_Type_class[80],
    bin_writer_float32_vec = Bin_prot_Type_class[78],
    bin_write_float32_vec = Bin_prot_Write[20],
    bin_reader_float32_vec = Bin_prot_Type_class[79],
    bin_read_float32_vec = Bin_prot_Read[20];
   function bin_read_float32_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float32_vec, pos_ref[1]);
   }
   var
    bin_float64_vec = Bin_prot_Type_class[85],
    bin_shape_float64_vec = Bin_prot_Type_class[84],
    bin_writer_float64_vec = Bin_prot_Type_class[82],
    bin_write_float64_vec = Bin_prot_Write[21],
    bin_reader_float64_vec = Bin_prot_Type_class[83],
    bin_read_float64_vec = Bin_prot_Read[21];
   function bin_read_float64_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float64_vec, pos_ref[1]);
   }
   var
    Bin_prot_Std =
      [0,
       bin_size_unit,
       bin_size_bool,
       bin_size_string,
       bin_size_bytes,
       bin_size_char,
       bin_size_int,
       bin_size_float,
       bin_size_int32,
       bin_size_int64,
       bin_size_nativeint,
       bin_size_nat0,
       bin_size_ref,
       bin_size_lazy_t,
       bin_size_lazy,
       bin_size_option,
       bin_size_pair,
       bin_size_triple,
       bin_size_list,
       bin_size_array,
       bin_size_hashtbl,
       bin_size_float32_vec,
       bin_size_float64_vec,
       bin_size_vec,
       bin_size_float32_mat,
       bin_size_float64_mat,
       bin_size_mat,
       bin_size_bigstring,
       bin_size_floatarray,
       bin_size_float_array,
       bin_size_variant_int,
       bin_size_int_8bit,
       bin_size_int_16bit,
       bin_size_int_32bit,
       bin_size_int_64bit,
       bin_size_int64_bits,
       bin_size_network16_int,
       bin_size_network32_int,
       bin_size_network32_int32,
       bin_size_network64_int,
       bin_size_network64_int64,
       bin_size_array_no_length,
       bin_size_md5,
       Maximum,
       Minimum,
       bin_unit,
       bin_shape_unit,
       bin_writer_unit,
       bin_write_unit,
       bin_reader_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_bool,
       bin_shape_bool,
       bin_writer_bool,
       bin_write_bool,
       bin_reader_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_string,
       bin_shape_string,
       bin_writer_string,
       bin_write_string,
       bin_reader_string,
       bin_read_string,
       bin_read_string$0,
       bin_bytes,
       bin_shape_bytes,
       bin_writer_bytes,
       bin_write_bytes,
       bin_reader_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_char,
       bin_shape_char,
       bin_writer_char,
       bin_write_char,
       bin_reader_char,
       bin_read_char,
       bin_read_char$0,
       bin_int,
       bin_shape_int,
       bin_writer_int,
       bin_write_int,
       bin_reader_int,
       bin_read_int,
       bin_read_int$0,
       bin_float,
       bin_shape_float,
       bin_writer_float,
       bin_write_float,
       bin_reader_float,
       bin_read_float,
       bin_read_float$0,
       bin_floatarray,
       bin_shape_floatarray,
       bin_writer_floatarray,
       bin_write_floatarray,
       bin_reader_floatarray,
       bin_read_floatarray,
       bin_read_floatarray$0,
       bin_shape_float_array,
       bin_writer_float_array,
       bin_write_float_array,
       bin_reader_float_array,
       bin_read_float_array,
       bin_read_float_array$0,
       bin_int32,
       bin_shape_int32,
       bin_writer_int32,
       bin_write_int32,
       bin_reader_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_int64,
       bin_shape_int64,
       bin_writer_int64,
       bin_write_int64,
       bin_reader_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_nativeint,
       bin_shape_nativeint,
       bin_writer_nativeint,
       bin_write_nativeint,
       bin_reader_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_ref,
       bin_shape_ref,
       bin_writer_ref,
       bin_write_ref,
       bin_reader_ref,
       bin_read_ref,
       bin_read_ref$0,
       bin_lazy_t,
       bin_shape_lazy_t,
       bin_writer_lazy_t,
       bin_write_lazy_t,
       bin_reader_lazy_t,
       bin_read_lazy_t,
       bin_read_lazy_t$0,
       bin_lazy,
       bin_shape_lazy,
       bin_writer_lazy,
       bin_write_lazy,
       bin_reader_lazy,
       bin_read_lazy,
       bin_read_lazy$0,
       bin_option,
       bin_shape_option,
       bin_writer_option,
       bin_write_option,
       bin_reader_option,
       bin_read_option,
       bin_read_option$0,
       bin_list,
       bin_shape_list,
       bin_writer_list,
       bin_write_list,
       bin_reader_list,
       bin_read_list,
       bin_read_list$0,
       bin_array,
       bin_shape_array,
       bin_writer_array,
       bin_write_array,
       bin_reader_array,
       bin_read_array,
       bin_read_array$0,
       bin_hashtbl,
       bin_shape_hashtbl,
       bin_writer_hashtbl,
       bin_write_hashtbl,
       bin_reader_hashtbl,
       bin_read_hashtbl,
       bin_read_hashtbl$0,
       bin_bigstring,
       bin_shape_bigstring,
       bin_writer_bigstring,
       bin_write_bigstring,
       bin_reader_bigstring,
       bin_read_bigstring,
       bin_read_bigstring$0,
       bin_mat,
       bin_shape_mat,
       bin_writer_mat,
       bin_write_mat,
       bin_reader_mat,
       bin_read_mat,
       bin_read_mat$0,
       bin_float32_mat,
       bin_shape_float32_mat,
       bin_writer_float32_mat,
       bin_write_float32_mat,
       bin_reader_float32_mat,
       bin_read_float32_mat,
       bin_read_float32_mat$0,
       bin_float64_mat,
       bin_shape_float64_mat,
       bin_writer_float64_mat,
       bin_write_float64_mat,
       bin_reader_float64_mat,
       bin_read_float64_mat,
       bin_read_float64_mat$0,
       bin_vec,
       bin_shape_vec,
       bin_writer_vec,
       bin_write_vec,
       bin_reader_vec,
       bin_read_vec,
       bin_read_vec$0,
       bin_float32_vec,
       bin_shape_float32_vec,
       bin_writer_float32_vec,
       bin_write_float32_vec,
       bin_reader_float32_vec,
       bin_read_float32_vec,
       bin_read_float32_vec$0,
       bin_float64_vec,
       bin_shape_float64_vec,
       bin_writer_float64_vec,
       bin_write_float64_vec,
       bin_reader_float64_vec,
       bin_read_float64_vec,
       bin_read_float64_vec$0];
   runtime.caml_register_global(31, Bin_prot_Std, "Bin_prot__Std");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Md5
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Write, Md5_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Md5_lib = global_data.Md5_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    compare = Md5_lib[1],
    to_binary = Md5_lib[3],
    of_binary_exn = Md5_lib[4],
    unsafe_of_binary = Md5_lib[5],
    to_hex = Md5_lib[6],
    of_hex_exn = Md5_lib[7],
    _a_ =
      caml_call1(Bin_prot_Shape[5][1], "f6bdcdd0-9f75-11e6-9a7e-d3020428efed"),
    bin_shape_t = caml_call2(Bin_prot_Shape[16], _a_, 0),
    bin_size_t = Bin_prot_Size[42],
    bin_write_t = Bin_prot_Write[29],
    bin_read_t = Bin_prot_Read[40],
    cst_Shape_Md5_t = "Shape.Md5.t";
   function bin_read_t$0(buf, pos_ref, vdigest){
    return caml_call2(Bin_prot_Common[19], cst_Shape_Md5_t, pos_ref[1]);
   }
   var
    Bin_prot_Md5 =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       to_hex,
       of_hex_exn,
       compare,
       to_binary,
       of_binary_exn,
       unsafe_of_binary];
   runtime.caml_register_global(8, Bin_prot_Md5, "Bin_prot__Md5");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Blob
//# unitInfo: Requires: Assert_failure, Bin_prot__Common, Bin_prot__Shape, Bin_prot__Type_class, Bin_prot__Utils, Sexplib0__Sexp_conv, Stdlib, Stdlib__Bytes, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bin_prot_Blob_Opaque_t$1 = "Bin_prot.Blob.Opaque.t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Assert_failure = global_data.Assert_failure,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    cst_Bin_prot_Blob_Ignored_t = "Bin_prot.Blob.Ignored.t",
    _h_ =
      [0,
       [11,
        "Opaque blob has ",
        [4,
         0,
         0,
         0,
         [11, " bytes but [of_opaque_exn] read ", [4, 0, 0, 0, 0]]]],
       "Opaque blob has %d bytes but [of_opaque_exn] read %d"],
    cst_Bin_prot_Blob_Opaque_t$0 = cst_Bin_prot_Blob_Opaque_t$1,
    _g_ = [0, 0],
    _f_ = [0, 0],
    cst_Bin_prot_Blob_Opaque_t = cst_Bin_prot_Blob_Opaque_t$1,
    _e_ = [0, 0],
    _d_ = [0, 0],
    cst_Bin_prot_Blob_t = "Bin_prot.Blob.t",
    _b_ =
      [0,
       [11,
        "Bin_prot.Blob.bin_read_t: size (",
        [4, 0, 0, 0, [11, ") <> expected (", [4, 0, 0, 0, [12, 41, 0]]]]],
       "Bin_prot.Blob.bin_read_t: size (%d) <> expected (%d)"],
    _a_ = [0, "src/blob.ml", 17, 4],
    cst_85a2557e_490a_11e6_98ac_4b = "85a2557e-490a-11e6-98ac-4b8953d525fe",
    cst_85a1f76e_490a_11e6_86a9_5b = "85a1f76e-490a-11e6-86a9-5bef585f2602";
   function compare(cmp_a, a_001, b_002){
    return caml_call2(cmp_a, a_001, b_002);
   }
   function sexp_of_t(of_a_003){return of_a_003;}
   function bin_shape_t(t){
    var
     _m_ = caml_call1(Bin_prot_Shape[5][1], cst_85a2557e_490a_11e6_98ac_4b);
    return caml_call2(Bin_prot_Shape[16], _m_, [0, t, 0]);
   }
   function bin_size_t(bin_size_a, a){
    var _l_ = caml_call1(bin_size_a, a);
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], _l_);
   }
   function bin_write_t(bin_write_a, buf, pos, a){
    var
     start_a = caml_call2(Bin_prot_Common[23], pos, Bin_prot_Utils[1]),
     end_a = caml_call3(bin_write_a, buf, start_a, a),
     size = end_a - start_a | 0,
     written = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    if(written === start_a) return end_a;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function bin_read_t(bin_read_a, buf, pos_ref){
    var
     expected_size = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     start_a = pos_ref[1],
     a = caml_call2(bin_read_a, buf, pos_ref),
     end_a = pos_ref[1];
    if((end_a - start_a | 0) !== expected_size){
     var
      _k_ =
        caml_call3(Stdlib_Printf[4], _b_, end_a - start_a | 0, expected_size);
     caml_call1(Stdlib[2], _k_);
    }
    return a;
   }
   function bin_read_t$0(param, _j_, pos_ref){
    return caml_call2(Bin_prot_Common[19], cst_Bin_prot_Blob_t, pos_ref[1]);
   }
   function of_binable(t){return t;}
   function to_binable(t){return t;}
   var
    include =
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0],
         to_binable,
         of_binable]),
    bin_shape_t$0 = include[1],
    bin_size_t$0 = include[2],
    bin_write_t$0 = include[3],
    bin_read_t$1 = include[4],
    bin_read_t$2 = include[5],
    bin_writer_t = include[6],
    bin_reader_t = include[7],
    bin_t = include[8],
    _c_ = caml_call1(Bin_prot_Shape[5][1], cst_85a1f76e_490a_11e6_86a9_5b),
    bin_shape_t$1 = caml_call2(Bin_prot_Shape[16], _c_, 0);
   function bin_size_t$1(t){
    var _i_ = caml_call1(Bin_prot_Common[2], t);
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], _i_);
   }
   function bin_write_t$1(buf, pos, t){
    var
     size = caml_call1(Bin_prot_Common[2], t),
     pos$0 = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    caml_call5(Bin_prot_Common[11], _d_, t, [0, pos$0], buf, size);
    return caml_call2(Bin_prot_Common[23], pos$0, size);
   }
   function bin_read_t$3(buf, pos_ref){
    var
     size = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     t = caml_call1(Bin_prot_Common[1], size);
    caml_call5(Bin_prot_Common[11], [0, pos_ref[1]], buf, _e_, t, size);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], size);
    return t;
   }
   function bin_read_t$4(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Opaque_t, pos_ref[1]);
   }
   var
    T =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4],
    include$0 = caml_call1(Bin_prot_Utils[6], T),
    bin_size_t$2 = include$0[1],
    bin_write_t$2 = include$0[2],
    bin_read_t$5 = include$0[3],
    bin_read_t$6 = include$0[4],
    bin_shape_t$2 = include$0[5],
    bin_writer_t$0 = include$0[6],
    bin_reader_t$0 = include$0[7],
    bin_t$0 = include$0[8];
   function to_opaque(blob, bin_writer){
    return caml_call3(Bin_prot_Utils[4], 0, bin_writer, blob);
   }
   function of_opaque_exn(t, bin_reader){
    return caml_call2(bin_reader[1], t, [0, 0]);
   }
   var compare$0 = runtime.caml_compare;
   function sexp_of_t$0(t){
    return [0, of_opaque_exn(t, Bin_prot_Type_class[13])];
   }
   function bin_size_t$3(t){
    return caml_call2
            (Bin_prot_Common[23], Bin_prot_Utils[1], caml_ml_string_length(t));
   }
   function bin_write_t$3(buf, pos, t){
    var
     size = caml_ml_string_length(t),
     pos$0 = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    caml_call5(Bin_prot_Common[7], _f_, t, [0, pos$0], buf, size);
    return caml_call2(Bin_prot_Common[23], pos$0, size);
   }
   function string_of_bigstring(buf, pos, len){
    var str = runtime.caml_create_bytes(len);
    caml_call5(Bin_prot_Common[10], [0, pos], buf, _g_, str, len);
    return caml_call1(Stdlib_Bytes[48], str);
   }
   function bin_read_t$7(buf, pos_ref){
    var
     len = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     t = string_of_bigstring(buf, pos_ref[1], len);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], len);
    return t;
   }
   function bin_read_t$8(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Opaque_t$0, pos_ref[1]);
   }
   var
    include$1 =
      caml_call1
       (Bin_prot_Utils[6],
        [0,
         bin_shape_t$1,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8]),
    bin_size_t$4 = include$1[1],
    bin_write_t$4 = include$1[2],
    bin_read_t$9 = include$1[3],
    bin_read_t$10 = include$1[4],
    bin_shape_t$3 = include$1[5],
    bin_writer_t$1 = include$1[6],
    bin_reader_t$1 = include$1[7],
    bin_t$1 = include$1[8],
    length = caml_ml_string_length;
   function to_opaque$0(buf, v, bin_writer_v){
    var len = caml_call3(bin_writer_v[2], buf, 0, v);
    return string_of_bigstring(buf, 0, len);
   }
   function of_opaque_exn$0(buf, t, bin_reader_v){
    var len = caml_ml_string_length(t);
    caml_call5(Bin_prot_Common[7], 0, t, 0, buf, len);
    var pos_ref = [0, 0], res = caml_call2(bin_reader_v[1], buf, pos_ref);
    if(pos_ref[1] === len) return res;
    var error = caml_call3(Stdlib_Printf[4], _h_, len, pos_ref[1]);
    return caml_call1(Stdlib[2], error);
   }
   var
    compare$1 = runtime.caml_string_compare,
    sexp_of_t$1 = Sexplib0_Sexp_conv[7];
   function bin_size_t$5(size){
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], size);
   }
   function bin_read_t$11(buf, pos_ref){
    var size = caml_call2(Bin_prot_Utils[2], buf, pos_ref);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], size);
    return size;
   }
   function bin_read_t$12(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Ignored_t, pos_ref[1]);
   }
   var
    bin_reader_t$2 = [0, bin_read_t$11, bin_read_t$12],
    Ignored = [0, bin_size_t$5, bin_read_t$11, bin_read_t$12, bin_reader_t$2],
    Bin_prot_Blob =
      [0,
       compare,
       sexp_of_t,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       [0,
        [0,
         compare$0,
         sexp_of_t$0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$2,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         to_opaque,
         of_opaque_exn],
        [0,
         compare$1,
         sexp_of_t$1,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         length,
         to_opaque$0,
         of_opaque_exn$0]],
       Ignored];
   runtime.caml_register_global(22, Bin_prot_Blob, "Bin_prot__Blob");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
