// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Stdio__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Stdio = [0];
   runtime.caml_register_global(0, Stdio, "Stdio__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio__In_channel
//# unitInfo: Requires: Base, Base__Buffer, Base__Char, Base__Exn, Base__List, Base__String, Caml, Stdlib, Stdlib__Buffer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    flags = [0, 0, 0],
    Base_List = global_data.Base__List,
    Caml = global_data.Caml,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Base_Buffer = global_data.Base__Buffer,
    Stdlib = global_data.Stdlib,
    Base_Exn = global_data.Base__Exn,
    Base = global_data.Base;
   function equal(t1, t2){return caml_call2(Base[203], t1, t2);}
   var
    seek = Caml[96][4],
    pos = Caml[96][5],
    length = Caml[96][6],
    stdin = Caml[38];
   function create(opt, file){
    if(opt) var sth = opt[1], binary = sth; else var binary = 1;
    var flags$0 = binary ? [0, 6, flags] : flags;
    return caml_call3(Caml[81], flags$0, 0, file);
   }
   var close = Caml[93];
   function with_file(binary, file, f){
    var _i_ = create(binary, file);
    return caml_call3(Base_Exn[12], f, _i_, close);
   }
   function may_eof(f){
    try{var _g_ = [0, caml_call1(f, 0)]; return _g_;}
    catch(_h_){
     var _f_ = caml_wrap_exception(_h_);
     if(_f_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_f_, 0);
    }
   }
   function input(t, buf, pos, len){
    return caml_call4(Caml[84], t, buf, pos, len);
   }
   function really_input(t, buf, pos, len){
    return may_eof
            (function(param){return caml_call4(Caml[85], t, buf, pos, len);});
   }
   function really_input_exn(t, buf, pos, len){
    return caml_call4(Caml[85], t, buf, pos, len);
   }
   function input_byte(t){
    return may_eof(function(param){return caml_call1(Caml[87], t);});
   }
   function input_char(t){
    return may_eof(function(param){return caml_call1(Caml[82], t);});
   }
   function input_binary_int(t){
    return may_eof(function(param){return caml_call1(Caml[88], t);});
   }
   function unsafe_input_value(t){
    return may_eof(function(param){return caml_call1(Caml[89], t);});
   }
   function input_buffer(t, buf, len){
    return may_eof
            (function(param){
              return caml_call3(Stdlib_Buffer[22], buf, t, len);
             });
   }
   var set_binary_mode = Caml[95];
   function input_all(t){
    var buffer = caml_call1(Base_Buffer[2], 65536), chunk_size = 65536;
    try{for(;;) caml_call3(Stdlib_Buffer[22], buffer, t, chunk_size);}
    catch(_e_){
     var _d_ = caml_wrap_exception(_e_);
     if(_d_ === Stdlib[12]) return caml_call1(Base_Buffer[3], buffer);
     throw caml_maybe_attach_backtrace(_d_, 0);
    }
   }
   function trim(fix_win_eol, line){
    if(! fix_win_eol) return line;
    var len = runtime.caml_ml_string_length(line);
    if(0 < len){
     var _c_ = runtime.caml_string_get(line, len - 1 | 0);
     if(caml_call2(Base_Char[15], _c_, 13))
      return caml_call3(Base_String[2], line, 0, len - 1 | 0);
    }
    return line;
   }
   function input_line(opt, t){
    if(opt) var sth = opt[1], fix_win_eol = sth; else var fix_win_eol = 1;
    var match = may_eof(function(param){return caml_call1(Caml[83], t);});
    if(! match) return 0;
    var line = match[1];
    return [0, trim(fix_win_eol, line)];
   }
   function input_line_exn(opt, t){
    if(opt) var sth = opt[1], fix_win_eol = sth; else var fix_win_eol = 1;
    var line = caml_call1(Caml[83], t);
    return trim(fix_win_eol, line);
   }
   function fold_lines(fix_win_eol, t, init, f){
    var ac = init;
    for(;;){
     var match = input_line(fix_win_eol, t);
     if(! match) return ac;
     var line = match[1], ac$0 = caml_call2(f, ac, line), ac = ac$0;
    }
   }
   function input_lines(fix_win_eol, t){
    var
     _b_ =
       fold_lines
        (fix_win_eol, t, 0, function(lines, line){return [0, line, lines];});
    return caml_call1(Base_List[38], _b_);
   }
   function iter_lines(fix_win_eol, t, f){
    return fold_lines
            (fix_win_eol,
             t,
             0,
             function(param, line){return caml_call1(f, line);});
   }
   function read_lines(fix_win_eol, fname){
    return with_file
            (0, fname, function(_a_){return input_lines(fix_win_eol, _a_);});
   }
   function read_all(fname){return with_file(0, fname, input_all);}
   var
    Stdio_In_channel =
      [0,
       equal,
       stdin,
       create,
       with_file,
       close,
       input,
       really_input,
       really_input_exn,
       input_char,
       input_byte,
       input_binary_int,
       unsafe_input_value,
       input_buffer,
       input_all,
       input_line,
       input_line_exn,
       fold_lines,
       input_lines,
       iter_lines,
       seek,
       pos,
       length,
       set_binary_mode,
       read_lines,
       read_all];
   runtime.caml_register_global(10, Stdio_In_channel, "Stdio__In_channel");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio__Out_channel
//# unitInfo: Requires: Base, Base__Exn, Base__List, Caml, Stdlib__Buffer, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\n",
    flags = [0, 1, [0, 3, 0]],
    Base_Exn = global_data.Base__Exn,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Caml = global_data.Caml,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ = [0, "<stderr>"],
    _b_ = [0, "<stdout>"],
    _c_ = [0, "<Out_channel.t>"];
   function equal(t1, t2){return caml_call2(Base[203], t1, t2);}
   var
    seek = Caml[96][1],
    pos = Caml[96][2],
    length = Caml[96][3],
    stdout = Caml[39],
    stderr = Caml[40];
   function sexp_of_t(t){
    return caml_call2(Base[203], t, stderr)
            ? _a_
            : caml_call2(Base[203], t, stdout) ? _b_ : _c_;
   }
   function create(opt, _j_, _i_, _h_, file){
    if(opt) var sth = opt[1], binary = sth; else var binary = 1;
    if(_j_) var sth$0 = _j_[1], append = sth$0; else var append = 0;
    if(_i_)
     var sth$1 = _i_[1], fail_if_exists = sth$1;
    else
     var fail_if_exists = 0;
    if(_h_) var sth$2 = _h_[1], perm = sth$2; else var perm = 438;
    var
     _k_ = binary ? 6 : 7,
     flags$0 = [0, _k_, flags],
     _l_ = append ? 2 : 4,
     flags$1 = [0, _l_, flags$0],
     flags$2 = fail_if_exists ? [0, 5, flags$1] : flags$1;
    return caml_call3(Caml[62], flags$2, perm, file);
   }
   var
    set_binary_mode = Caml[78],
    flush = Caml[63],
    close = Caml[76],
    close_no_err = Caml[77];
   function output(t, buf, pos, len){
    return caml_call4(Caml[68], t, buf, pos, len);
   }
   function output_substring(t, buf, pos, len){
    return caml_call4(Caml[69], t, buf, pos, len);
   }
   var
    output_string = Caml[66],
    output_bytes = Caml[67],
    output_char = Caml[65],
    output_byte = Caml[70],
    output_binary_int = Caml[71],
    output_buffer = Stdlib_Buffer[10],
    output_value = Caml[72];
   function newline(t){return caml_call2(output_string, t, cst);}
   function output_lines(t, lines){
    function _g_(line){caml_call2(output_string, t, line); return newline(t);}
    return caml_call2(Base_List[9], lines, _g_);
   }
   var
    printf = Stdlib_Printf[2],
    eprintf = Stdlib_Printf[3],
    fprintf = Stdlib_Printf[1],
    kfprintf = Stdlib_Printf[8],
    print_string = Caml[42],
    print_endline = Caml[46],
    prerr_endline = Caml[53];
   function print_s(mach, sexp){
    var
     _f_ =
       mach
        ? caml_call1(Base[84][14], sexp)
        : caml_call2(Base[84][13], 0, sexp);
    return caml_call1(print_endline, _f_);
   }
   function eprint_s(mach, sexp){
    var
     _e_ =
       mach
        ? caml_call1(Base[84][14], sexp)
        : caml_call2(Base[84][13], 0, sexp);
    return caml_call1(prerr_endline, _e_);
   }
   function with_file(binary, append, fail_if_exists, perm, file, f){
    var _d_ = create(binary, append, fail_if_exists, perm, file);
    return caml_call3(Base_Exn[12], f, _d_, close);
   }
   function write_lines(file, lines){
    return with_file
            (0, 0, 0, 0, file, function(t){return output_lines(t, lines);});
   }
   function write_all(file, data){
    return with_file
            (0,
             0,
             0,
             0,
             file,
             function(t){return caml_call2(output_string, t, data);});
   }
   var
    Stdio_Out_channel =
      [0,
       sexp_of_t,
       equal,
       stdout,
       stderr,
       create,
       with_file,
       close,
       close_no_err,
       set_binary_mode,
       flush,
       output,
       output_string,
       output_substring,
       output_bytes,
       output_char,
       output_byte,
       output_binary_int,
       output_buffer,
       output_value,
       newline,
       output_lines,
       fprintf,
       printf,
       print_s,
       eprint_s,
       eprintf,
       kfprintf,
       print_string,
       print_endline,
       prerr_endline,
       seek,
       pos,
       length,
       write_lines,
       write_all];
   runtime.caml_register_global(11, Stdio_Out_channel, "Stdio__Out_channel");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio
//# unitInfo: Requires: Stdio__In_channel, Stdio__Out_channel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdio_In_channel = global_data.Stdio__In_channel,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    stdin = Stdio_In_channel[2],
    stdout = Stdio_Out_channel[3],
    stderr = Stdio_Out_channel[4],
    eprintf = Stdio_Out_channel[26],
    printf = Stdio_Out_channel[23],
    print_s = Stdio_Out_channel[24],
    eprint_s = Stdio_Out_channel[25],
    print_string = Stdio_Out_channel[28],
    print_endline = Stdio_Out_channel[29],
    prerr_endline = Stdio_Out_channel[30],
    Stdio =
      [0,
       stdin,
       stdout,
       stderr,
       printf,
       print_s,
       eprint_s,
       eprintf,
       print_string,
       print_endline,
       prerr_endline];
   runtime.caml_register_global(2, Stdio, "Stdio");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
