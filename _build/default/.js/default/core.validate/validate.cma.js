// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Validate
//# unitInfo: Requires: Assert_failure, Base, Base__Error, Base__Field, Base__Int, Base__List, Base__Maybe_bound, Base__Or_error, Base__Printf, Base__Staged, Base__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Validate$0 = "Validate",
    cst_validate$0 = "validate",
    cst_validate_src_validate_ml = "validate/src/validate.ml",
    cst_value = "value ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Base_Maybe_bound = global_data.Base__Maybe_bound,
    Assert_failure = global_data.Assert_failure,
    Base_Printf = global_data.Base__Printf,
    Base_List = global_data.Base__List,
    Base_Int = global_data.Base__Int,
    Base_Staged = global_data.Base__Staged,
    Base_Field = global_data.Base__Field,
    Base_Or_error = global_data.Base__Or_error,
    Base = global_data.Base,
    Base_Error = global_data.Base__Error,
    Base_String = global_data.Base__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Validate$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_validate$0);
   caml_call1(Expect_test_collector[5][1], cst_validate_src_validate_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_validate$0, cst);
   var
    _c_ = [0, cst_validate_src_validate_ml, 154, 20],
    _d_ =
      [0,
       [11, cst_value, [2, 0, [11, " < bound ", [2, 0, 0]]]],
       "value %s < bound %s"],
    _e_ =
      [0,
       [11, cst_value, [2, 0, [11, " <= bound ", [2, 0, 0]]]],
       "value %s <= bound %s"],
    _f_ = [0, cst_validate_src_validate_ml, 159, 20],
    _g_ =
      [0,
       [11, cst_value, [2, 0, [11, " > bound ", [2, 0, 0]]]],
       "value %s > bound %s"],
    _h_ =
      [0,
       [11, cst_value, [2, 0, [11, " >= bound ", [2, 0, 0]]]],
       "value %s >= bound %s"],
    cst_snd = "snd",
    cst_fst = "fst",
    _b_ = [0, 0],
    cst_validation_errors = "validation errors",
    _a_ = [0, "."],
    cst_Exception_raised_during_va = "Exception raised during validation",
    cst_validate = cst_validate$0,
    cst_Validate = cst_Validate$0,
    pass = 0;
   function fails(message, a, sexp_of_a){
    return [0,
            [0, 0, caml_call5(Base_Error[17], 0, 0, message, a, sexp_of_a)],
            0];
   }
   function fail(message){
    return [0, [0, 0, caml_call1(Base_Error[12], message)], 0];
   }
   function failf(format){return caml_call2(Base_Printf[4], fail, format);}
   function fail_s(sexp){
    return [0, [0, 0, caml_call1(Base_Error[18], sexp)], 0];
   }
   function combine(t1, t2){return caml_call2(Base[178], t1, t2);}
   var of_list = Base_List[138];
   function name(name, t){
    if(! t) return 0;
    function _P_(param){
     var error = param[2], path = param[1];
     return [0, [0, name, path], error];
    }
    return caml_call2(Base_List[76], t, _P_);
   }
   function name_list(n, l){return name(n, caml_call1(of_list, l));}
   function fail_fn(message, param){return fail(message);}
   function pass_bool(param){return pass;}
   function pass_unit(param){return pass;}
   function protect(f, v){
    try{var _O_ = caml_call1(f, v); return _O_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _N_ = [0, [0, cst$0, caml_call1(Base[106], exn)], 0];
     return fail_s
             (caml_call2(Base[84][7], cst_Exception_raised_during_va, _N_));
    }
   }
   function try_with(f){
    var _M_ = 0;
    return protect(function(param){caml_call1(f, 0); return pass;}, _M_);
   }
   function path_string(path){return caml_call2(Base_String[54], _a_, path);}
   function errors(t){
    function _J_(param){
     var
      error = param[2],
      path = param[1],
      _K_ = path_string(path),
      _L_ = caml_call2(Base_Error[20], error, _K_);
     return caml_call1(Base_Error[9], _L_);
    }
    return caml_call2(Base_List[76], t, _J_);
   }
   function result(t){
    if(caml_call1(Base_List[8], t)) return _b_;
    function _F_(x_005){
     function _I_(param){
      var
       arg1_002 = param[2],
       arg0_001 = param[1],
       res0_003 = caml_call1(Base[164], arg0_001),
       res1_004 = caml_call1(Base_Error[6], arg1_002);
      return [1, [0, res0_003, [0, res1_004, 0]]];
     }
     return caml_call2(Base_List[4], _I_, x_005);
    }
    function _G_(param){
     var error = param[2], path = param[1];
     return [0, path_string(path), error];
    }
    var _H_ = caml_call2(Base_List[76], t, _G_);
    return caml_call5
            (Base_Or_error[34], 0, 0, cst_validation_errors, _H_, _F_);
   }
   function maybe_raise(t){
    var _E_ = result(t);
    return caml_call1(Base_Or_error[31], _E_);
   }
   function valid_or_error(check, x){
    function _C_(param){return x;}
    var _D_ = result(protect(check, x));
    return caml_call2(Base_Or_error[43], _D_, _C_);
   }
   function field_direct(check, fld, record, v){
    var result = protect(check, v);
    return name(caml_call1(Base_Field[2], fld), result);
   }
   function field(check, record, fld){
    var v = caml_call2(Base_Field[3], fld, record);
    return field_direct(check, fld, record, v);
   }
   function field_folder(check, record){
    return function(acc, fld){return [0, field(check, record, fld), acc];};
   }
   function field_direct_folder(check){
    function _B_(acc, fld, record, v){
     var result = field_direct(check, fld, record, v);
     return result ? [0, result, acc] : acc;
    }
    return caml_call1(Base_Staged[1], _B_);
   }
   function all(checks, v){
    var checks$0 = checks, errs = 0;
    for(;;){
     if(! checks$0)
      return caml_call1(of_list, caml_call1(Base_List[38], errs));
     var checks$1 = checks$0[2], check = checks$0[1], err = protect(check, v);
     if(err){
      var errs$0 = [0, err, errs], checks$0 = checks$1, errs = errs$0;
      continue;
     }
     var checks$0 = checks$1;
    }
   }
   function of_result(f){
    function _z_(v){
     var match = caml_call1(f, v);
     if(0 === match[0]) return pass;
     var error = match[1];
     return fail(error);
    }
    return function(_A_){return protect(_z_, _A_);};
   }
   function of_error(f){
    function _x_(v){
     var match = caml_call1(f, v);
     if(0 === match[0]) return pass;
     var error = match[1];
     return [0, [0, 0, error], 0];
    }
    return function(_y_){return protect(_x_, _y_);};
   }
   function booltest(f, if_false){
    function _v_(v){return caml_call1(f, v) ? pass : fail(if_false);}
    return function(_w_){return protect(_v_, _w_);};
   }
   function pair(fst, snd, param){
    var
     snd_value = param[2],
     fst_value = param[1],
     _u_ = [0, name(cst_snd, protect(snd, snd_value)), 0];
    return caml_call1
            (of_list, [0, name(cst_fst, protect(fst, fst_value)), _u_]);
   }
   function list_indexed(check, list){
    function _s_(i, el){
     var _t_ = protect(check, el);
     return name(caml_call1(Base_Int[11], i + 1 | 0), _t_);
    }
    return caml_call1(of_list, caml_call2(Base_List[96], list, _s_));
   }
   function list(extract_name, check, list){
    function _r_(el){
     var t = protect(check, el);
     return t
             ? protect
               (function(t){return name(caml_call1(extract_name, el), t);}, t)
             : 0;
    }
    return caml_call1(of_list, caml_call2(Base_List[76], list, _r_));
   }
   function alist(name, f, list$0){
    function _q_(param){var x = param[2]; return caml_call1(f, x);}
    return list
            (function(param){
              var key = param[1];
              return caml_call1(name, key);
             },
             _q_,
             list$0);
   }
   function first_failure(t1, t2){
    return caml_call1(Base_List[8], t1) ? t2 : t1;
   }
   function of_error_opt(param){
    if(! param) return pass;
    var error = param[1];
    return fail(error);
   }
   function bounded(name, lower, upper, compare, x){
    switch(caml_call4(Base_Maybe_bound[16], lower, upper, x, compare)){
      case 0:
       if(typeof lower === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       if(0 === lower[0]){
        var
         incl = lower[1],
         _i_ = caml_call1(name, incl),
         _j_ = caml_call1(name, x);
        return fail(caml_call3(Base_Printf[2], _d_, _j_, _i_));
       }
       var
        excl = lower[1],
        _k_ = caml_call1(name, excl),
        _l_ = caml_call1(name, x);
       return fail(caml_call3(Base_Printf[2], _e_, _l_, _k_));
      case 1:
       return pass;
      default:
       if(typeof upper === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
       if(0 === upper[0]){
        var
         incl$0 = upper[1],
         _m_ = caml_call1(name, incl$0),
         _n_ = caml_call1(name, x);
        return fail(caml_call3(Base_Printf[2], _g_, _n_, _m_));
       }
       var
        excl$0 = upper[1],
        _o_ = caml_call1(name, excl$0),
        _p_ = caml_call1(name, x);
       return fail(caml_call3(Base_Printf[2], _h_, _p_, _o_));
    }
   }
   function symbol(t1, t2){return combine(t1, t2);}
   var Infix = [0, symbol];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_validate);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Validate);
   var
    Validate =
      [0,
       pass,
       fail,
       fails,
       fail_s,
       failf,
       combine,
       of_list,
       name,
       name_list,
       fail_fn,
       pass_bool,
       pass_unit,
       protect,
       try_with,
       result,
       errors,
       maybe_raise,
       valid_or_error,
       field,
       field_direct,
       field_folder,
       field_direct_folder,
       all,
       of_result,
       of_error,
       booltest,
       pair,
       list_indexed,
       list,
       first_failure,
       of_error_opt,
       alist,
       bounded,
       Infix];
   runtime.caml_register_global(35, Validate, cst_Validate$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ2YWxpZGF0ZS5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsicGFzcyIsImZhaWxzIiwibWVzc2FnZSIsImEiLCJzZXhwX29mX2EiLCJmYWlsIiwiZmFpbGYiLCJmb3JtYXQiLCJmYWlsX3MiLCJzZXhwIiwiY29tYmluZSIsInQxIiwidDIiLCJvZl9saXN0IiwibmFtZSIsInQiLCJlcnJvciIsInBhdGgiLCJuYW1lX2xpc3QiLCJuIiwibCIsImZhaWxfZm4iLCJwYXNzX2Jvb2wiLCJwYXNzX3VuaXQiLCJwcm90ZWN0IiwiZiIsInYiLCJleG4kMCIsImV4biIsInRyeV93aXRoIiwicGF0aF9zdHJpbmciLCJlcnJvcnMiLCJyZXN1bHQiLCJ4XzAwNSIsImFyZzFfMDAyIiwiYXJnMF8wMDEiLCJyZXMwXzAwMyIsInJlczFfMDA0IiwibWF5YmVfcmFpc2UiLCJ2YWxpZF9vcl9lcnJvciIsImNoZWNrIiwieCIsImZpZWxkX2RpcmVjdCIsImZsZCIsInJlY29yZCIsImZpZWxkIiwiZmllbGRfZm9sZGVyIiwiYWNjIiwiZmllbGRfZGlyZWN0X2ZvbGRlciIsImFsbCIsImNoZWNrcyIsImNoZWNrcyQwIiwiZXJycyIsImNoZWNrcyQxIiwiZXJyIiwiZXJycyQwIiwib2ZfcmVzdWx0Iiwib2ZfZXJyb3IiLCJib29sdGVzdCIsImlmX2ZhbHNlIiwicGFpciIsImZzdCIsInNuZCIsInNuZF92YWx1ZSIsImZzdF92YWx1ZSIsImxpc3RfaW5kZXhlZCIsImxpc3QiLCJpIiwiZWwiLCJleHRyYWN0X25hbWUiLCJhbGlzdCIsImxpc3QkMCIsImtleSIsImZpcnN0X2ZhaWx1cmUiLCJvZl9lcnJvcl9vcHQiLCJib3VuZGVkIiwibG93ZXIiLCJ1cHBlciIsImNvbXBhcmUiLCJpbmNsIiwiZXhjbCIsImluY2wkMCIsImV4Y2wkMCIsInN5bWJvbCJdLCJzb3VyY2VzIjpbIi9ob21lL25hdGhhbi8ub3BhbS9kZWZhdWx0L2xpYi9jb3JlL3ZhbGlkYXRlL3ZhbGlkYXRlLm1s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WUFFekQrRDtJQUFlLG1CQW5JZjFFO1FBcUlLZ0I7SUFBUyxPQS9IZFgsS0ErSEtXO0dBQW1CO1lBR3hCMkQsUUFBUzdELE1BQU04RCxPQUFPQyxPQUFPQyxTQUFRckM7SUFDdkMsT0FBTSxpQ0FEV21DLE9BQU9DLE9BQWVwQyxHQUFScUM7O2lCQUFkRjtRQUtDO2dCQUxEQTtRQU1xRDtTQUE1REcsT0FOT0g7U0FNcUQsaUJBTjNEOUQsTUFNRGlFO1NBQW1ELGlCQU5sRGpFLE1BQTRCMkI7UUFNaEIsT0F4SXJCcEMsS0F3SXFCOztPQUNnRDtRQUE3RDJFLE9BUE9KO1FBT3NELGlCQVA1RDlELE1BT0RrRTtRQUFvRCxpQkFQbkRsRSxNQUE0QjJCO09BT2hCLE9BeklyQnBDLEtBeUlxQjs7Y0EvSXJCTDs7aUJBd0lzQjZFO1FBVU47Z0JBVk1BO1FBVzhDO1NBQTVESSxTQVhjSjtTQVc4QyxpQkFYM0QvRCxNQVdEbUU7U0FBbUQsaUJBWGxEbkUsTUFBNEIyQjtRQVdoQixPQTdJckJwQyxLQTZJcUI7O09BQ2dEO1FBQTdENkUsU0FaY0w7UUFZK0MsaUJBWjVEL0QsTUFZRG9FO1FBQW9ELGlCQVpuRHBFLE1BQTRCMkI7T0FZaEIsT0E5SXJCcEMsS0E4SXFCOztHQUE2RDtZQUloRjhFLE9BQU94RSxJQUFHQyxJQUFLLE9BL0lqQkYsUUErSVNDLElBQUdDLElBQWtCO0dBRG5CLGdCQUNUdUU7Ozs7Ozs7O09BeEpGbkY7T0FNQUs7T0FKQUo7T0FNQU87T0FEQUY7T0FFQUk7T0FDQUc7T0FFQUM7T0FNQUk7T0FDQUc7T0FDQUM7T0FDQUM7T0FFQUM7T0FNQUs7T0F5QkFHO09BZkFEO09BaUJBTztPQUNBQztPQU9BTTtPQUxBSDtPQVVBSTtPQUtBRTtPQU9BQztPQVlBTztPQU9BQztPQU9BQztPQUVBRTtPQUlBSztPQUtBQztPQVdBTztPQUVBQztPQUhBSjtPQVFBSzs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBCYXNlXG5cbigqKiBFYWNoIHNpbmdsZV9lcnJvciBpcyBhIHBhdGggaW5kaWNhdGluZyB0aGUgbG9jYXRpb24gd2l0aGluIHRoZSBkYXRhc3RydWN0dXJlIGluXG4gICAgcXVlc3Rpb24gdGhhdCBpcyBiZWluZyB2YWxpZGF0ZWQsIGFsb25nIHdpdGggYW4gZXJyb3IgbWVzc2FnZS4gKilcbnR5cGUgc2luZ2xlX2Vycm9yID1cbiAgeyBwYXRoIDogc3RyaW5nIGxpc3RcbiAgOyBlcnJvciA6IEVycm9yLnRcbiAgfVxuXG50eXBlIHQgPSBzaW5nbGVfZXJyb3IgbGlzdFxudHlwZSAnYSBjaGVjayA9ICdhIC0+IHRcblxubGV0IHBhc3MgOiB0ID0gW11cblxubGV0IGZhaWxzIG1lc3NhZ2UgYSBzZXhwX29mX2EgPVxuICBbIHsgcGF0aCA9IFtdOyBlcnJvciA9IEVycm9yLmNyZWF0ZSBtZXNzYWdlIGEgc2V4cF9vZl9hIH0gXVxuOztcblxubGV0IGZhaWwgbWVzc2FnZSA9IFsgeyBwYXRoID0gW107IGVycm9yID0gRXJyb3Iub2Zfc3RyaW5nIG1lc3NhZ2UgfSBdXG5sZXQgZmFpbGYgZm9ybWF0ID0gUHJpbnRmLmtzcHJpbnRmIGZhaWwgZm9ybWF0XG5sZXQgZmFpbF9zIHNleHAgPSBbIHsgcGF0aCA9IFtdOyBlcnJvciA9IEVycm9yLmNyZWF0ZV9zIHNleHAgfSBdXG5sZXQgY29tYmluZSB0MSB0MiA9IHQxIEAgdDJcbmxldCBvZl9saXN0ID0gTGlzdC5jb25jYXRcblxubGV0IG5hbWUgbmFtZSB0ID1cbiAgbWF0Y2ggdCB3aXRoXG4gIHwgW10gLT4gW10gKCogd2hlbiBzdWNjZXNzZnVsLCBhdm9pZCB0aGUgYWxsb2NhdGlvbiBvZiBhIGNsb3N1cmUgZm9yIFt+Zl0sIGJlbG93ICopXG4gIHwgXyAtPiBMaXN0Lm1hcCB0IH5mOihmdW4geyBwYXRoOyBlcnJvciB9IC0+IHsgcGF0aCA9IG5hbWUgOjogcGF0aDsgZXJyb3IgfSlcbjs7XG5cbmxldCBuYW1lX2xpc3QgbiBsID0gbmFtZSBuIChvZl9saXN0IGwpXG5sZXQgZmFpbF9mbiBtZXNzYWdlIF8gPSBmYWlsIG1lc3NhZ2VcbmxldCBwYXNzX2Jvb2wgKF8gOiBib29sKSA9IHBhc3NcbmxldCBwYXNzX3VuaXQgKF8gOiB1bml0KSA9IHBhc3NcblxubGV0IHByb3RlY3QgZiB2ID1cbiAgdHJ5IGYgdiB3aXRoXG4gIHwgZXhuIC0+XG4gICAgZmFpbF9zIChTZXhwLm1lc3NhZ2UgXCJFeGNlcHRpb24gcmFpc2VkIGR1cmluZyB2YWxpZGF0aW9uXCIgWyBcIlwiLCBzZXhwX29mX2V4biBleG4gXSlcbjs7XG5cbmxldCB0cnlfd2l0aCBmID1cbiAgcHJvdGVjdFxuICAgIChmdW4gKCkgLT5cbiAgICAgICBmICgpO1xuICAgICAgIHBhc3MpXG4gICAgKClcbjs7XG5cbmxldCBwYXRoX3N0cmluZyBwYXRoID0gU3RyaW5nLmNvbmNhdCB+c2VwOlwiLlwiIHBhdGhcblxubGV0IGVycm9ycyB0ID1cbiAgTGlzdC5tYXAgdCB+ZjooZnVuIHsgcGF0aDsgZXJyb3IgfSAtPlxuICAgIEVycm9yLnRvX3N0cmluZ19odW0gKEVycm9yLnRhZyBlcnJvciB+dGFnOihwYXRoX3N0cmluZyBwYXRoKSkpXG47O1xuXG5sZXQgcmVzdWx0X2ZhaWwgdCA9XG4gIE9yX2Vycm9yLmVycm9yXG4gICAgXCJ2YWxpZGF0aW9uIGVycm9yc1wiXG4gICAgKExpc3QubWFwIHQgfmY6KGZ1biB7IHBhdGg7IGVycm9yIH0gLT4gcGF0aF9zdHJpbmcgcGF0aCwgZXJyb3IpKVxuICAgIFslc2V4cF9vZjogKHN0cmluZyAqIEVycm9yLnQpIExpc3QudF1cbltAQGNvbGRdXG47O1xuXG4oKiogW3Jlc3VsdF0gaXMgY2FyZWZ1bGx5IGltcGxlbWVudGVkIHNvIHRoYXQgaXQgY2FuIGJlIGlubGluZWQgLS0gY2FsbGluZyBbcmVzdWx0X2ZhaWxdLFxuICAgIHdoaWNoIGlzIG5vdCBpbmxpbmVhYmxlLCBpcyBrZXkgdG8gdGhpcy4gKilcbmxldCByZXN1bHQgdCA9IGlmIExpc3QuaXNfZW1wdHkgdCB0aGVuIE9rICgpIGVsc2UgcmVzdWx0X2ZhaWwgdFxuXG5sZXQgbWF5YmVfcmFpc2UgdCA9IE9yX2Vycm9yLm9rX2V4biAocmVzdWx0IHQpXG5sZXQgdmFsaWRfb3JfZXJyb3IgY2hlY2sgeCA9IE9yX2Vycm9yLm1hcCAocmVzdWx0IChwcm90ZWN0IGNoZWNrIHgpKSB+ZjooZnVuICgpIC0+IHgpXG5cbmxldCBmaWVsZF9kaXJlY3QgY2hlY2sgZmxkIF9yZWNvcmQgdiA9XG4gIGxldCByZXN1bHQgPSBwcm90ZWN0IGNoZWNrIHYgaW5cbiAgbmFtZSAoRmllbGQubmFtZSBmbGQpIHJlc3VsdFxuOztcblxubGV0IGZpZWxkIGNoZWNrIHJlY29yZCBmbGQgPVxuICBsZXQgdiA9IEZpZWxkLmdldCBmbGQgcmVjb3JkIGluXG4gIGZpZWxkX2RpcmVjdCBjaGVjayBmbGQgcmVjb3JkIHZcbjs7XG5cbmxldCBmaWVsZF9mb2xkZXIgY2hlY2sgcmVjb3JkID1cbiAgKCk7XG4gIGZ1biBhY2MgZmxkIC0+IGZpZWxkIGNoZWNrIHJlY29yZCBmbGQgOjogYWNjXG47O1xuXG5sZXQgZmllbGRfZGlyZWN0X2ZvbGRlciBjaGVjayA9XG4gIFN0YWdlZC5zdGFnZSAoZnVuIGFjYyBmbGQgcmVjb3JkIHYgLT5cbiAgICBtYXRjaCBmaWVsZF9kaXJlY3QgY2hlY2sgZmxkIHJlY29yZCB2IHdpdGhcbiAgICB8IFtdIC0+IGFjYyAoKiBBdm9pZCBhbGxvY2F0aW5nIGEgbmV3IGxpc3QgaW4gdGhlIHN1Y2Nlc3MgY2FzZSAqKVxuICAgIHwgcmVzdWx0IC0+IHJlc3VsdCA6OiBhY2MpXG47O1xuXG5sZXQgYWxsIGNoZWNrcyB2ID1cbiAgbGV0IHJlYyBsb29wIGNoZWNrcyB2IGVycnMgPVxuICAgIG1hdGNoIGNoZWNrcyB3aXRoXG4gICAgfCBbXSAtPiBlcnJzXG4gICAgfCBjaGVjayA6OiBjaGVja3MgLT5cbiAgICAgIChtYXRjaCBwcm90ZWN0IGNoZWNrIHYgd2l0aFxuICAgICAgIHwgW10gLT4gbG9vcCBjaGVja3MgdiBlcnJzXG4gICAgICAgfCBlcnIgLT4gbG9vcCBjaGVja3MgdiAoZXJyIDo6IGVycnMpKVxuICBpblxuICBvZl9saXN0IChMaXN0LnJldiAobG9vcCBjaGVja3MgdiBbXSkpXG47O1xuXG5sZXQgb2ZfcmVzdWx0IGYgPVxuICBwcm90ZWN0IChmdW4gdiAtPlxuICAgIG1hdGNoIGYgdiB3aXRoXG4gICAgfCBPayAoKSAtPiBwYXNzXG4gICAgfCBFcnJvciBlcnJvciAtPiBmYWlsIGVycm9yKVxuOztcblxubGV0IG9mX2Vycm9yIGYgPVxuICBwcm90ZWN0IChmdW4gdiAtPlxuICAgIG1hdGNoIGYgdiB3aXRoXG4gICAgfCBPayAoKSAtPiBwYXNzXG4gICAgfCBFcnJvciBlcnJvciAtPiBbIHsgcGF0aCA9IFtdOyBlcnJvciB9IF0pXG47O1xuXG5sZXQgYm9vbHRlc3QgZiB+aWZfZmFsc2UgPSBwcm90ZWN0IChmdW4gdiAtPiBpZiBmIHYgdGhlbiBwYXNzIGVsc2UgZmFpbCBpZl9mYWxzZSlcblxubGV0IHBhaXIgfmZzdCB+c25kIChmc3RfdmFsdWUsIHNuZF92YWx1ZSkgPVxuICBvZl9saXN0IFsgbmFtZSBcImZzdFwiIChwcm90ZWN0IGZzdCBmc3RfdmFsdWUpOyBuYW1lIFwic25kXCIgKHByb3RlY3Qgc25kIHNuZF92YWx1ZSkgXVxuOztcblxubGV0IGxpc3RfaW5kZXhlZCBjaGVjayBsaXN0ID1cbiAgTGlzdC5tYXBpIGxpc3QgfmY6KGZ1biBpIGVsIC0+IG5hbWUgKEludC50b19zdHJpbmcgKGkgKyAxKSkgKHByb3RlY3QgY2hlY2sgZWwpKVxuICB8PiBvZl9saXN0XG47O1xuXG5sZXQgbGlzdCB+bmFtZTpleHRyYWN0X25hbWUgY2hlY2sgbGlzdCA9XG4gIExpc3QubWFwIGxpc3QgfmY6KGZ1biBlbCAtPlxuICAgIG1hdGNoIHByb3RlY3QgY2hlY2sgZWwgd2l0aFxuICAgIHwgW10gLT4gW11cbiAgICB8IHQgLT5cbiAgICAgICgqIGV4dHJhIGxldmVsIG9mIHByb3RlY3Rpb24gaW4gY2FzZSBleHRyYWN0X25hbWUgdGhyb3dzIGFuIGV4Y2VwdGlvbiAqKVxuICAgICAgcHJvdGVjdCAoZnVuIHQgLT4gbmFtZSAoZXh0cmFjdF9uYW1lIGVsKSB0KSB0KVxuICB8PiBvZl9saXN0XG47O1xuXG5sZXQgYWxpc3Qgfm5hbWUgZiBsaXN0JyA9IGxpc3QgKGZ1biAoXywgeCkgLT4gZiB4KSBsaXN0JyB+bmFtZTooZnVuIChrZXksIF8pIC0+IG5hbWUga2V5KVxubGV0IGZpcnN0X2ZhaWx1cmUgdDEgdDIgPSBpZiBMaXN0LmlzX2VtcHR5IHQxIHRoZW4gdDIgZWxzZSB0MVxuXG5sZXQgb2ZfZXJyb3Jfb3B0ID0gZnVuY3Rpb25cbiAgfCBOb25lIC0+IHBhc3NcbiAgfCBTb21lIGVycm9yIC0+IGZhaWwgZXJyb3Jcbjs7XG5cbmxldCBib3VuZGVkIH5uYW1lIH5sb3dlciB+dXBwZXIgfmNvbXBhcmUgeCA9XG4gIG1hdGNoIE1heWJlX2JvdW5kLmNvbXBhcmVfdG9faW50ZXJ2YWxfZXhuIH5sb3dlciB+dXBwZXIgfmNvbXBhcmUgeCB3aXRoXG4gIHwgSW5fcmFuZ2UgLT4gcGFzc1xuICB8IEJlbG93X2xvd2VyX2JvdW5kIC0+XG4gICAgKG1hdGNoIGxvd2VyIHdpdGhcbiAgICAgfCBVbmJvdW5kZWQgLT4gYXNzZXJ0IGZhbHNlXG4gICAgIHwgSW5jbCBpbmNsIC0+IGZhaWwgKFByaW50Zi5zcHJpbnRmIFwidmFsdWUgJXMgPCBib3VuZCAlc1wiIChuYW1lIHgpIChuYW1lIGluY2wpKVxuICAgICB8IEV4Y2wgZXhjbCAtPiBmYWlsIChQcmludGYuc3ByaW50ZiBcInZhbHVlICVzIDw9IGJvdW5kICVzXCIgKG5hbWUgeCkgKG5hbWUgZXhjbCkpKVxuICB8IEFib3ZlX3VwcGVyX2JvdW5kIC0+XG4gICAgKG1hdGNoIHVwcGVyIHdpdGhcbiAgICAgfCBVbmJvdW5kZWQgLT4gYXNzZXJ0IGZhbHNlXG4gICAgIHwgSW5jbCBpbmNsIC0+IGZhaWwgKFByaW50Zi5zcHJpbnRmIFwidmFsdWUgJXMgPiBib3VuZCAlc1wiIChuYW1lIHgpIChuYW1lIGluY2wpKVxuICAgICB8IEV4Y2wgZXhjbCAtPiBmYWlsIChQcmludGYuc3ByaW50ZiBcInZhbHVlICVzID49IGJvdW5kICVzXCIgKG5hbWUgeCkgKG5hbWUgZXhjbCkpKVxuOztcblxubW9kdWxlIEluZml4ID0gc3RydWN0XG4gIGxldCAoICsrICkgdDEgdDIgPSBjb21iaW5lIHQxIHQyXG5lbmRcbiJdfQ==
