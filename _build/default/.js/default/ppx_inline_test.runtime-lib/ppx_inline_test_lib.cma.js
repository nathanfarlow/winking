// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_inline_test_lib = [0];
   runtime.caml_register_global(0, Ppx_inline_test_lib, "Ppx_inline_test_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_inline_test_lib__Runtime
//# unitInfo: Requires: Base, Base__Int63, Base__List, Base__Random, Base__String, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Filename, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__Random, Stdlib__Result, Stdlib__Scanf, Stdlib__String, Stdlib__Sys, Time_now
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = "\n",
    cst$15 = " ",
    cst_line = " , line ",
    cst_File = " File ",
    cst_threw = " threw",
    cst_s$0 = "%s",
    cst_s = "%s%!",
    cst$12 = ".\n",
    cst_Ppx_inline_test_lib_Runtim$0 = "Ppx_inline_test_lib__Runtime",
    cst_TES = "TES",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    cst_T_MODULE_at$0 = "T_MODULE at ",
    cst_T_MODULES = "T_MODULES",
    cst_inline_test_runner$0 = "inline-test-runner",
    cst_inline_tests_log$0 = "inline_tests.log",
    cst_ppx_inline_test_error_the_ =
      "ppx_inline_test error: the following -only-test flags matched nothing:",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$11 = cst$13,
    cst$9 = cst$14,
    cst$10 = cst$15,
    cst$7 = cst$14,
    cst$8 = cst$15,
    cst$5 = cst$14,
    cst$6 = "  ",
    cst$3 = cst$14,
    cst$4 = cst$13,
    cst$2 = ".",
    cst$0 = cst$13,
    cst$1 = ": ",
    enable_everything = [0, 0, 0],
    cst = cst$13,
    am_running_inline_test_env_var = cst_TESTING_FRAMEWORK,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Result = global_data.Stdlib__Result,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Random = global_data.Base__Random,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int63 = global_data.Base__Int63,
    Time_now = global_data.Time_now,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Array = global_data.Stdlib__Array,
    _E_ = [0, [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, 0]]]], " %s:%d"],
    _F_ = [0, [12, 32, [2, 0, 0]], " %s"],
    _z_ =
      [0,
       [11,
        "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n",
        [10, 0]],
       "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n%!"],
    _A_ =
      [0,
       [11,
        "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n",
        [10, 0]],
       "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n%!"],
    _B_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _C_ =
      [0,
       [4,
        0,
        0,
        0,
        [11,
         " tests ran, ",
         [4, 0, 0, 0, [11, " test_modules ran\n", [10, 0]]]]],
       "%d tests ran, %d test_modules ran\n%!"],
    _D_ =
      [0,
       [11, cst_ppx_inline_test_error_the_, 0],
       cst_ppx_inline_test_error_the_],
    _G_ = [0, [11, cst$12, [10, 0]], ".\n%!"],
    _H_ =
      [0,
       [11, "ppx_inline_test error: no tests have been run.\n", [10, 0]],
       "ppx_inline_test error: no tests have been run.\n%!"],
    _J_ = [0, [11, cst_T_MODULES, 0], cst_T_MODULES],
    _K_ = [0, [11, ", ", [4, 0, 0, 0, [11, " TES", 0]]], ", %d TES"],
    _I_ =
      [0,
       [11,
        "FAILED ",
        [4,
         0,
         0,
         0,
         [11, " / ", [4, 0, 0, 0, [11, " tests", [2, 0, [12, 10, [10, 0]]]]]]]],
       "FAILED %d / %d tests%s\n%!"],
    _x_ =
      [0,
       [11,
        cst_T_MODULE_at$0,
        [2,
         0,
         [11,
          cst_threw,
          [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]]],
       "T_MODULE at %s threw%s%s.\n%s%s\n%!"],
    _y_ = [0, [11, cst_TES, 0], cst_TES],
    cst_ppx_inline_test_cannot_use =
      "ppx_inline_test: cannot use -list-partition or -partition without specifying a partition at preprocessing time",
    _r_ = [0, [2, 0, [12, 10, [2, 0, 0]]], "%s\n%s"],
    _s_ = [0, [2, 0, [10, 0]], cst_s],
    _t_ = [0, 1],
    _u_ =
      [0,
       [11, " (", [8, [0, 0, 0], 0, [0, 3], [11, " sec)\n", [10, 0]]]],
       " (%.3f sec)\n%!"],
    _v_ =
      [0,
       [2, 0, [11, " is false.\n", [2, 0, [12, 10, [10, 0]]]]],
       "%s is false.\n%s\n%!"],
    _w_ =
      [0,
       [2,
        0,
        [11,
         cst_threw,
         [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]],
       "%s threw%s%s.\n%s%s\n%!"],
    _q_ = [0, [2, 0, [10, 0]], cst_s],
    _p_ = [0, [2, 0, [10, 0]], cst_s],
    _o_ = [0, [12, 10, [2, 0, [12, 10, [10, 0]]]], "\n%s\n%!"],
    cst_T_MODULE_at = cst_T_MODULE_at$0,
    cst_in_TES = "  in TES",
    cst_time_without_resetting_ran = "time_without_resetting_random_seeds",
    cst_Ppx_inline_test_lib_Runtim = cst_Ppx_inline_test_lib_Runtim$0,
    cst_inline_tests_log = cst_inline_tests_log$0,
    _S_ =
      [0,
       [11,
        "Argument ",
        [2,
         0,
         [11, " doesn't fit the format filename[:line_number]\n", [10, 0]]]],
       "Argument %s doesn't fit the format filename[:line_number]\n%!"],
    _O_ =
      [0,
       [2,
        0,
        [11, ": unexpected anonymous argument ", [2, 0, [12, 10, [10, 0]]]]],
       "%s: unexpected anonymous argument %s\n%!"],
    _h_ =
      [0,
       [11,
        cst_File,
        [3,
         0,
         [11,
          cst_line,
          [4,
           0,
           0,
           0,
           [11,
            " , characters ",
            [4, 0, 0, 0, [11, " - ", [4, 0, 0, 0, [12, 32, [10, 0]]]]]]]]]],
       " File %S , line %d , characters %d - %d %!"],
    _g_ =
      [0,
       [11, cst_File, [3, 0, [11, cst_line, [4, 0, 0, 0, [12, 32, [10, 0]]]]]],
       " File %S , line %d %!"],
    _f_ = [0, [11, cst_File, [3, 0, [12, 32, [10, 0]]]], " File %S %!"],
    _e_ =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [2, 0, 0]]]]]]]]],
       "File %S, line %d, characters %d-%d%s"],
    _a_ = [0, [2, 0, 0], cst_s$0],
    _b_ = [0, [2, 0, 0], cst_s$0],
    cst_success = "success",
    cst_failure = "failure",
    cst_error = "error",
    cst_inline_test_runner = cst_inline_test_runner$0,
    _N_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " [args]", 0]]]]]],
       "%s %s %s [args]"],
    cst_Path_to_the_root_of_the_so = " Path to the root of the source tree",
    cst_source_tree_root = "-source-tree-root",
    cst_Allow_output_patterns_in_t =
      " Allow output patterns in tests expectations",
    cst_allow_output_patterns = "-allow-output-patterns",
    cst_Diff_command_for_tests_tha =
      " Diff command for tests that require diffing (use - to disable diffing)",
    cst_diff_cmd = "-diff-cmd",
    cst_Update_expect_tests_in_pla = " Update expect tests in place",
    cst_in_place = "-in-place",
    cst_Summarize_tests_without_us = " Summarize tests without using color",
    cst_no_color = "-no-color",
    cst_location_Run_only_the_test =
      'location Run only the tests specified by all the -only-test options.\n                      Locations can be one of these forms:\n                      - file.ml\n                      - file.ml:line_number\n                      - File "file.ml"\n                      - File "file.ml", line 23\n                      - File "file.ml", line 23, characters 2-3',
    cst_only_test = "-only-test",
    cst_substring_Only_run_tests_w =
      "substring Only run tests whose names contain the given substring",
    cst_matching = "-matching",
    cst_tag_Only_run_tests_tagged_ =
      "tag Only run tests tagged with [tag] (overrides previous -drop-tag)",
    cst_require_tag = "-require-tag",
    cst_tag_Only_run_tests_not_tag =
      "tag Only run tests not tagged with [tag] (overrides previous -require-tag)",
    cst_drop_tag = "-drop-tag",
    cst_Log_the_tests_run_in_inlin = " Log the tests run in inline_tests.log",
    cst_log = "-log",
    cst_Show_the_number_of_tests_r = " Show the number of tests ran",
    cst_show_counts = "-show-counts",
    cst_End_with_an_error_if_no_te = " End with an error if no tests were run",
    cst_strict = "-strict",
    cst_Run_tests_only_up_to_the_f =
      " Run tests only up to the first error (doesn't work for expect tests)",
    cst_stop_on_error = "-stop-on-error",
    cst_Show_the_tests_as_they_run = " Show the tests as they run",
    cst_verbose = "-verbose",
    cst_Only_run_the_tests_in_the_ =
      " Only run the tests in the given partition",
    cst_partition = "-partition",
    cst_Lists_all_the_partitions_t =
      " Lists all the partitions that contain at least one test or test_module",
    cst_list_partitions = "-list-partitions",
    cst_Do_not_run_tests_but_show_ =
      " Do not run tests but show what would have been run",
    cst_list_test_names = "-list-test-names",
    _n_ = [0, 187165616, 545942154],
    _L_ = [0, 187165616, -863538453];
   function to_string(param){
    switch(param){
      case 0:
       return cst_success;
      case 1:
       return cst_failure;
      default: return cst_error;
    }
   }
   function combine(t1, t2){
    var switch$0 = 0;
    switch(t1){
      case 0:
       if(! t2) return 0; break;
      case 1: break;
      default: switch$0 = 1;
    }
    if(! switch$0 && 2 !== t2) return 1;
    return 2;
   }
   function combine_all(ts){
    return caml_call3(Stdlib_List[25], combine, 0, ts);
   }
   var
    test_modules_ran = [0, 0],
    test_modules_failed = [0, 0],
    tests_ran = [0, 0],
    tests_failed = [0, 0],
    dynamic_lib = [0, 0],
    action = [0, -950194894];
   try{
    caml_sys_getenv("FORCE_DROP_INLINE_TEST");
    var _aa_ = 1, force_drop = _aa_;
   }
   catch(_bY_){
    var _c_ = caml_wrap_exception(_bY_);
    if(_c_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_c_, 0);
    var force_drop = 0;
   }
   function get(param){return force_drop ? -950194894 : action[1];}
   var _d_ = caml_call2(Stdlib_Hashtbl[1], 0, 23), current = [0, cst];
   function found_test(param){
    var
     _bW_ = caml_string_notequal(current[1], cst$13),
     _bX_ = _bW_ ? 1 - caml_call2(Stdlib_Hashtbl[9], _d_, current[1]) : _bW_;
    return _bX_ ? caml_call3(Stdlib_Hashtbl[5], _d_, current[1], 0) : _bX_;
   }
   function is_current(param){
    if(! param) return 1;
    var p = param[1];
    return caml_string_equal(p, current[1]);
   }
   var current$0 = [0, 0];
   function current_tags(param){
    var t = current$0[1];
    function _bU_(m){return m[2];}
    var _bV_ = caml_call2(Stdlib_List[19], _bU_, t);
    return caml_call1(Stdlib_List[13], _bV_);
   }
   var
    verbose = [0, 0],
    strict = [0, 0],
    show_counts = [0, 0],
    list_test_names = [0, 0],
    delayed_errors = [0, 0],
    stop_on_error = [0, 0],
    log = [0, 0],
    time_sec = [0, 0.],
    use_color = [0, 1],
    in_place = [0, 0],
    diff_command = [0, 0],
    source_tree_root = [0, 0],
    allow_output_patterns = [0, 0];
   function displayed_descr(param){
    var
     _bS_ = caml_obj_tag(param),
     descr =
       250 === _bS_
        ? param[1]
        : 246 === _bS_ ? caml_call1(CamlinternalLazy[2], param) : param;
    return function(filename, line, start_pos, end_pos){
     var
      _bT_ =
        caml_string_equal(descr, cst$13)
         ? cst$0
         : caml_call2(Stdlib[28], cst$1, descr);
     return caml_call6
             (Stdlib_Printf[4], _e_, filename, line, start_pos, end_pos, _bT_);};
   }
   var
    _i_ = caml_sys_argv(0),
    match = caml_call1(Stdlib_Array[11], _i_),
    switch$0 = 0;
   if(match){
    var _j_ = match[2];
    if(_j_){
     var name = match[1];
     if(! caml_string_notequal(_j_[1], cst_inline_test_runner$0)){
      var match$0 = _j_[2];
      if(match$0){
       var rest = match$0[2], lib = match$0[1];
       if(Base[85][1]){
        var
         tests = [0, 0],
         list_partitions = [0, 0],
         partition = [0, 0],
         tag_predicate = [0, enable_everything],
         name_filter = [0, 0],
         msg$1 =
           caml_call4
            (Stdlib_Printf[4], _N_, name, cst_inline_test_runner, lib),
         f =
           function(anon){
            caml_call3(Stdlib_Printf[3], _O_, name, anon);
            return caml_call1(Stdlib[99], 1);
           },
         _P_ = 0,
         _Q_ =
           [0,
            [0,
             cst_allow_output_patterns,
             [2, allow_output_patterns],
             cst_Allow_output_patterns_in_t],
            [0,
             [0,
              cst_source_tree_root,
              [4, function(s){source_tree_root[1] = [0, s]; return 0;}],
              cst_Path_to_the_root_of_the_so],
             _P_]],
         _R_ =
           [0,
            [0, cst_no_color, [3, use_color], cst_Summarize_tests_without_us],
            [0,
             [0, cst_in_place, [2, in_place], cst_Update_expect_tests_in_pla],
             [0,
              [0,
               cst_diff_cmd,
               [4, function(s){diff_command[1] = [0, s]; return 0;}],
               cst_Diff_command_for_tests_tha],
              _Q_]]],
         _T_ =
           [0,
            [0,
             cst_only_test,
             [4,
              function(str){
               try{
                var
                 _bK_ =
                   function(file, line, start_pos, end_pos){return [0, file, [0, line]];
                   },
                 _bL_ = [0, caml_call3(Stdlib_Scanf[4], str, _h_, _bK_)],
                 match = _bL_;
               }
               catch(_bP_){
                try{
                 var
                  _bI_ = function(file, line){return [0, file, [0, line]];},
                  _bJ_ = [0, caml_call3(Stdlib_Scanf[4], str, _g_, _bI_)],
                  match = _bJ_;
                }
                catch(_bQ_){
                 try{
                  var
                   _bG_ = function(file){return [0, file, 0];},
                   _bH_ = [0, caml_call3(Stdlib_Scanf[4], str, _f_, _bG_)],
                   match = _bH_;
                 }
                 catch(_bR_){var match = 0;}
                }
               }
               if(match)
                var
                 match$0 = match[1],
                 index = match$0[2],
                 file = match$0[1],
                 index$0 = index,
                 filename = file;
               else if(caml_call2(Stdlib_String[14], str, 58)){
                var
                 i = caml_call2(Stdlib_String[35], str, 58),
                 filename$0 = caml_call3(Stdlib_String[15], str, 0, i),
                 index_string =
                   caml_call3
                    (Stdlib_String[15],
                     str,
                     i + 1 | 0,
                     (caml_ml_string_length(str) - i | 0) - 1 | 0);
                try{
                 var
                  _bN_ = runtime.caml_int_of_string(index_string),
                  index$1 = _bN_;
                }
                catch(_bO_){
                 var _bM_ = caml_wrap_exception(_bO_);
                 if(_bM_[1] !== Stdlib[7])
                  throw caml_maybe_attach_backtrace(_bM_, 0);
                 caml_call2(Stdlib_Printf[3], _S_, str);
                 var index$1 = caml_call1(Stdlib[99], 1);
                }
                var index$0 = [0, index$1], filename = filename$0;
               }
               else
                var index$0 = 0, filename = str;
               tests[1] = [0, [0, filename, index$0, [0, 0]], tests[1]];
               return 0;
              }],
             cst_location_Run_only_the_test],
            _R_],
         _U_ =
           [0,
            [0,
             cst_matching,
             [4,
              function(s){name_filter[1] = [0, s, name_filter[1]]; return 0;}],
             cst_substring_Only_run_tests_w],
            _T_],
         _V_ =
           [0,
            [0,
             cst_require_tag,
             [4,
              function(tag){
               var t = tag_predicate[1], _bC_ = t[2];
               function _bD_(_bF_){return caml_string_notequal(tag, _bF_);}
               var _bE_ = caml_call2(Stdlib_List[41], _bD_, _bC_);
               tag_predicate[1] = [0, [0, tag, t[1]], _bE_];
               return 0;
              }],
             cst_tag_Only_run_tests_tagged_],
            _U_],
         _W_ =
           [0,
            [0,
             cst_drop_tag,
             [4,
              function(tag){
               var t = tag_predicate[1], _by_ = [0, tag, t[2]], _bz_ = t[1];
               function _bA_(_bB_){return caml_string_notequal(tag, _bB_);}
               tag_predicate[1] =
                [0, caml_call2(Stdlib_List[41], _bA_, _bz_), _by_];
               return 0;
              }],
             cst_tag_Only_run_tests_not_tag],
            _V_],
         _X_ =
           [0,
            [0, cst_verbose, [2, verbose], cst_Show_the_tests_as_they_run],
            [0,
             [0,
              cst_stop_on_error,
              [2, stop_on_error],
              cst_Run_tests_only_up_to_the_f],
             [0,
              [0, cst_strict, [2, strict], cst_End_with_an_error_if_no_te],
              [0,
               [0,
                cst_show_counts,
                [2, show_counts],
                cst_Show_the_number_of_tests_r],
               [0,
                [0,
                 cst_log,
                 [0,
                  function(param){
                   try{runtime.caml_sys_remove(cst_inline_tests_log$0);}
                   catch(_bx_){}
                   log[1] = [0, caml_call1(Stdlib[60], cst_inline_tests_log)];
                   return 0;
                  }],
                 cst_Log_the_tests_run_in_inlin],
                _W_]]]]],
         _Y_ =
           [0,
            [0,
             cst_partition,
             [4, function(i){partition[1] = [0, i]; return 0;}],
             cst_Only_run_the_tests_in_the_],
            _X_],
         _Z_ =
           [0,
            [0,
             cst_list_partitions,
             [0, function(param){list_partitions[1] = 1; return 0;}],
             cst_Lists_all_the_partitions_t],
            _Y_],
         ___ =
           [0,
            [0,
             cst_list_test_names,
             [0,
              function(param){
               list_test_names[1] = 1;
               verbose[1] = 1;
               return 0;
              }],
             cst_Do_not_run_tests_but_show_],
            _Z_],
         l = caml_call2(Stdlib_Arg[11], 0, ___),
         argv = caml_call1(Stdlib_Array[12], [0, name, rest]);
        try{caml_call5(Stdlib_Arg[3], 0, argv, l, f, msg$1);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] === Stdlib_Arg[8]){
          var msg = exn[2];
          caml_call2(Stdlib_Printf[3], _a_, msg);
          caml_call1(Stdlib[99], 1);
         }
         else{
          if(exn[1] !== Stdlib_Arg[7])
           throw caml_maybe_attach_backtrace(exn, 0);
          var msg$0 = exn[2];
          caml_call2(Stdlib_Printf[2], _b_, msg$0);
          caml_call1(Stdlib[99], 0);
         }
        }
        var
         _$_ = list_partitions[1] ? -260537174 : [0, 1025081494, partition[1]],
         v =
           [0,
            -753295984,
            [0, [0, lib, tests[1], name_filter[1], tag_predicate[1]], _$_]];
        action[1] = v;
        switch$0 = 1;
       }
      }
     }
    }
   }
   var am_test_runner = typeof get(0) === "number" ? 0 : 1, switch$1 = 0;
   try{caml_sys_getenv("PPX_INLINE_TEST_LIB_AM_RUNNING_INLINE_TEST");}
   catch(_bv_){
    var _k_ = caml_wrap_exception(_bv_);
    if(_k_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_k_, 0);
    var switch$2 = 0;
    try{var val = caml_sys_getenv(cst_TESTING_FRAMEWORK);}
    catch(_bw_){
     var _l_ = caml_wrap_exception(_bw_);
     if(_l_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_l_, 0);
     var _m_ = 0;
     switch$2 = 1;
    }
    if(! switch$2)
     var _M_ = caml_string_notequal(val, "inline-test") ? 0 : 1, _m_ = _M_;
    var am_running_inline_test = _m_;
    switch$1 = 1;
   }
   if(! switch$1) var am_running_inline_test = 1;
   var
    testing = am_test_runner ? _n_ : am_running_inline_test ? _L_ : 822171972;
   function wall_time_clock_ns(param){return caml_call1(Time_now[1], 0);}
   var
    where_to_cut_backtrace =
      [246,
       function(param){
        var
         _bt_ = caml_call2(Stdlib[28], cst$2, cst_time_without_resetting_ran),
         _bu_ = caml_call2(Stdlib[28], cst_Ppx_inline_test_lib_Runtim, _bt_);
        return caml_call2(Base_String[70][2], 0, _bu_);
       }];
   function time_without_resetting_random_(f){
    var before_ns = wall_time_clock_ns(0);
    try{var _bs_ = [0, caml_call1(f, 0)], res = _bs_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      res = [1, [0, exn, caml_call1(Stdlib_Printexc[6], 0)]];
    }
    var
     _bq_ = wall_time_clock_ns(0),
     _br_ = caml_call2(Base_Int63[42], _bq_, before_ns);
    time_sec[1] = caml_call1(Base_Int63[3], _br_) / 1000000000.;
    return res;
   }
   var
    saved_caml_random_state =
      [246,
       function(_bp_){
        return caml_call1(Stdlib_Random[12][1], [0, 100, 200, 300]);
       }],
    saved_base_random_state =
      [246,
       function(_bo_){
        return caml_call1(Base_Random[18][2], [0, 111, 222, 333]);
       }];
   function string_of_module_descr(param){
    var t = current$0[1];
    function _bh_(m){return m[1];}
    var _bi_ = caml_call2(Stdlib_List[19], _bh_, t);
    function _bj_(s){
     var
      _bl_ = caml_call1(Stdlib_String[28], s),
      _bm_ = caml_call2(Stdlib[28], _bl_, cst$3),
      _bn_ = caml_call2(Stdlib[28], cst_T_MODULE_at, _bm_);
     return caml_call2(Stdlib[28], cst_in_TES, _bn_);
    }
    var _bk_ = caml_call2(Stdlib_List[19], _bj_, _bi_);
    return caml_call2(Stdlib_String[6], cst$4, _bk_);
   }
   function print_delayed_errors(param){
    var delayed_errors$0 = caml_call1(Stdlib_List[9], delayed_errors[1]);
    if(! delayed_errors$0) return 0;
    var _bf_ = caml_call2(Stdlib_String[1], 70, 61);
    caml_call2(Stdlib_Printf[3], _o_, _bf_);
    function _bg_(message){return caml_call2(Stdlib_Printf[3], _p_, message);}
    return caml_call2(Stdlib_List[17], _bg_, delayed_errors$0);
   }
   function eprintf_or_delay(fmt){
    function _bd_(s){
     if(verbose[1])
      delayed_errors[1] = [0, s, delayed_errors[1]];
     else
      caml_call2(Stdlib_Printf[3], _q_, s);
     var _be_ = stop_on_error[1];
     return _be_ ? (print_delayed_errors(0), caml_call1(Stdlib[99], 2)) : _be_;
    }
    return caml_call2(Stdlib_Printf[10], _bd_, fmt);
   }
   function add_hooks(C){
    return function(f, param){caml_call1(C[1], 0); return caml_call1(f, 0);};
   }
   function hum_backtrace(backtrace){
    var
     _a7_ = caml_call1(Base_String[88], backtrace),
     _a8_ = Base_List[133],
     _a9_ =
       caml_call2
        (_a8_,
         _a7_,
         function(str){
          var
           _bb_ = caml_obj_tag(where_to_cut_backtrace),
           _bc_ =
             250 === _bb_
              ? where_to_cut_backtrace[1]
              : 246
                === _bb_
                ? caml_call1(CamlinternalLazy[2], where_to_cut_backtrace)
                : where_to_cut_backtrace;
          return 1 - caml_call2(Base_String[70][5], _bc_, str);
         }),
     _a__ = Base_List[76],
     _a$_ =
       caml_call2
        (_a__,
         _a9_,
         function(str){
          var _ba_ = caml_call2(Base[197], str, cst$5);
          return caml_call2(Base[197], cst$6, _ba_);
         });
    return caml_call2(Base_String[54], 0, _a$_);
   }
   function test_inner
   (config,
    descr,
    tags,
    def_filename,
    def_line_number,
    start_pos,
    end_pos,
    f,
    bool_of_f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _aN_ = match[2],
     what_to_do = _aN_[2],
     match$0 = _aN_[1],
     which_tags = match$0[4],
     name_filter = match$0[3],
     only_test_location = match$0[2],
     libname = match$0[1],
     f$0 = caml_call1(add_hooks(config), f),
     descr$0 =
       [246,
        function(_a6_){
         return caml_call4
                 (displayed_descr(descr),
                  def_filename,
                  def_line_number,
                  start_pos,
                  end_pos);
        }],
     _aO_ = current_tags(0),
     complete_tags = caml_call2(Stdlib[37], tags, _aO_),
     _aP_ = caml_equal([0, libname], dynamic_lib[1]);
    if(_aP_){
     if(only_test_location)
      var
       _aL_ =
         function(param){
          var
           used = param[3],
           line_number_opt = param[2],
           filename = param[1],
           position_start =
             caml_ml_string_length(def_filename)
             - caml_ml_string_length(filename)
             | 0,
           _a1_ = 0 <= position_start ? 1 : 0;
          if(_a1_){
           var
            end_of_def_filename =
              caml_call3
               (Stdlib_String[15],
                def_filename,
                position_start,
                caml_ml_string_length(filename)),
            _a2_ = caml_string_equal(end_of_def_filename, filename);
           if(_a2_){
            var
             _a3_ = 0 === position_start ? 1 : 0,
             _a4_ =
               _a3_
               ||
                (47
                  ===
                   runtime.caml_string_get
                    (def_filename, position_start - 1 | 0)
                  ? 1
                  : 0);
            if(_a4_)
             if(line_number_opt)
              var
               line_number = line_number_opt[1],
               _a5_ = caml_equal(def_line_number, line_number);
             else
              var _a5_ = 1;
            else
             var _a5_ = _a4_;
           }
           else
            var _a5_ = _a2_;
           var found = _a5_;
          }
          else
           var found = _a1_;
          if(found) used[1] = 1;
          return found;
         },
       _aQ_ = caml_call2(Stdlib_List[33], _aL_, only_test_location);
     else
      var _aQ_ = 1;
     if(_aQ_){
      var
       _aC_ = which_tags[1],
       _aD_ =
         function(req){
          return 1 - caml_call2(Stdlib_List[36], req, complete_tags);
         },
       _aE_ = caml_call2(Stdlib_List[33], _aD_, _aC_);
      if(_aE_)
       var _aR_ = _aE_;
      else
       var
        _aF_ = which_tags[2],
        _aG_ =
          function(dropped){
           return caml_call2(Stdlib_List[36], dropped, complete_tags);
          },
        _aR_ = caml_call2(Stdlib_List[33], _aG_, _aF_);
      var _aS_ = 1 - _aR_;
      if(_aS_){
       var
        _aT_ = caml_obj_tag(descr$0),
        descr$1 =
          250 === _aT_
           ? descr$0[1]
           : 246 === _aT_ ? caml_call1(CamlinternalLazy[2], descr$0) : descr$0;
       if(name_filter)
        var
         _aM_ =
           function(substring){
            return caml_call2(Base_String[76], descr$1, substring);
           },
         _aU_ = caml_call2(Stdlib_List[33], _aM_, name_filter);
       else
        var _aU_ = 1;
       var should_run = _aU_;
      }
      else
       var should_run = _aS_;
     }
     else
      var should_run = _aQ_;
    }
    else
     var should_run = _aP_;
    if(should_run){
     if(typeof what_to_do === "number") return found_test(0);
     var partition = what_to_do[2], _aV_ = is_current(partition);
     if(_aV_){
      var
       _aW_ = caml_obj_tag(descr$0),
       descr$2 =
         250 === _aW_
          ? descr$0[1]
          : 246 === _aW_ ? caml_call1(CamlinternalLazy[2], descr$0) : descr$0;
      tests_ran[1]++;
      var match$1 = log[1];
      if(match$1){
       var ch = match$1[1], _aX_ = string_of_module_descr(0);
       caml_call4(Stdlib_Printf[1], ch, _r_, descr$2, _aX_);
      }
      if(verbose[1]) caml_call2(Stdlib_Printf[2], _s_, descr$2);
      if(list_test_names[1])
       var result$0 = _t_;
      else{
       var
        caml_random_state = caml_call1(Stdlib_Random[13], 0),
        base_random_state = caml_call1(Base_Random[18][4], Base_Random[18][1]),
        _aH_ = caml_obj_tag(saved_caml_random_state),
        _aI_ =
          250 === _aH_
           ? saved_caml_random_state[1]
           : 246
             === _aH_
             ? caml_call1(CamlinternalLazy[2], saved_caml_random_state)
             : saved_caml_random_state;
       caml_call1(Stdlib_Random[14], _aI_);
       var
        _aJ_ = caml_obj_tag(saved_base_random_state),
        _aK_ =
          250 === _aJ_
           ? saved_base_random_state[1]
           : 246
             === _aJ_
             ? caml_call1(CamlinternalLazy[2], saved_base_random_state)
             : saved_base_random_state;
       caml_call1(Base_Random[19], _aK_);
       var result = time_without_resetting_random_(f$0);
       caml_call1(Stdlib_Random[14], caml_random_state);
       caml_call1(Base_Random[19], base_random_state);
       var result$0 = caml_call2(Stdlib_Result[8], bool_of_f, result);
      }
      if(verbose[1]) caml_call2(Stdlib_Printf[2], _u_, time_sec[1]);
      if(0 !== result$0[0]){
       var match$2 = result$0[1], backtrace = match$2[2], exn = match$2[1];
       tests_failed[1]++;
       var
        backtrace$0 = hum_backtrace(backtrace),
        exn_str = caml_call1(Sexplib0_Sexp_conv[68], exn),
        sep = caml_call2(Stdlib_String[14], exn_str, 10) ? cst$7 : cst$8,
        _aZ_ = string_of_module_descr(0);
       return caml_call5
               (eprintf_or_delay(_w_),
                descr$2,
                sep,
                exn_str,
                backtrace$0,
                _aZ_);
      }
      if(result$0[1]) return 0;
      tests_failed[1]++;
      var _aY_ = string_of_module_descr(0);
      return caml_call2(eprintf_or_delay(_v_), descr$2, _aY_);
     }
     var _a0_ = _aV_;
    }
    else
     var _a0_ = should_run;
    return _a0_;
   }
   function set_lib_and_partition(static_lib, partition){
    if(dynamic_lib[1]) return 0;
    dynamic_lib[1] = [0, static_lib];
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     match$0 = match[2],
     what_to_do = match$0[2],
     which_tests = match$0[1],
     _aB_ = caml_string_equal(which_tests[1], static_lib);
    if(! _aB_) return _aB_;
    var switch$0 = 0;
    if(typeof what_to_do !== "number" && ! what_to_do[2]){var requires_partition = 0; switch$0 = 1;}
    if(! switch$0) var requires_partition = 1;
    if(caml_string_equal(partition, cst$13) && requires_partition)
     return caml_call1(Stdlib[2], cst_ppx_inline_test_cannot_use);
    current[1] = partition;
    return 0;
   }
   function unset_lib(static_lib){
    var match = dynamic_lib[1];
    if(! match) return 0;
    var
     lib = match[1],
     _az_ = caml_string_equal(lib, static_lib),
     _aA_ = _az_ ? (dynamic_lib[1] = 0, 0) : _az_;
    return _aA_;
   }
   function test
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(b){return b;});
   }
   function test_unit
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(param){return 1;});
   }
   function test_module
   (config, descr, tags, def_filename, def_line_number, start_pos, end_pos, f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _as_ = match[2],
     what_to_do = _as_[2],
     match$0 = _as_[1],
     which_tags = match$0[4],
     libname = match$0[1],
     f$0 = caml_call1(add_hooks(config), f),
     _at_ = current_tags(0),
     partial_tags = caml_call2(Stdlib[37], tags, _at_),
     _au_ = caml_equal([0, libname], dynamic_lib[1]);
    if(_au_)
     var
      _aq_ = which_tags[2],
      _ar_ =
        function(dropped){
         return caml_call2(Stdlib_List[36], dropped, partial_tags);
        },
      should_run = 1 - caml_call2(Stdlib_List[33], _ar_, _aq_);
    else
     var should_run = _au_;
    if(should_run){
     if(typeof what_to_do === "number") return found_test(0);
     var partition = what_to_do[2], _av_ = is_current(partition);
     if(_av_){
      test_modules_ran[1]++;
      var
       descr$0 =
         caml_call4
          (displayed_descr(descr),
           def_filename,
           def_line_number,
           start_pos,
           end_pos),
       prev = current$0[1];
      current$0[1] = [0, [0, descr$0, tags], prev];
      try{var x = time_without_resetting_random_(f$0); current$0[1] = prev;}
      catch(e$0){
       var e = caml_wrap_exception(e$0);
       current$0[1] = prev;
       throw caml_maybe_attach_backtrace(e, 0);
      }
      if(0 === x[0]) return 0;
      var match$1 = x[1], backtrace = match$1[2], exn = match$1[1];
      test_modules_failed[1]++;
      var
       backtrace$0 = hum_backtrace(backtrace),
       exn_str = caml_call1(Sexplib0_Sexp_conv[68], exn),
       sep = caml_call2(Stdlib_String[14], exn_str, 10) ? cst$9 : cst$10,
       _aw_ = string_of_module_descr(0),
       _ax_ = caml_call1(Stdlib_String[28], descr$0);
      return caml_call5
              (eprintf_or_delay(caml_call2(Stdlib[98], _y_, _x_)),
               _ax_,
               sep,
               exn_str,
               backtrace$0,
               _aw_);
     }
     var _ay_ = _av_;
    }
    else
     var _ay_ = should_run;
    return _ay_;
   }
   function summarize(param){
    var match = get(0);
    if(typeof match === "number"){
     var switch$0 = 0;
     if(runtime.caml_notequal(caml_sys_argv(0), [0])){
      var _ai_ = runtime.caml_check_bound(caml_sys_argv(0), 0)[1];
      if
       (caml_string_equal
         (caml_call1(Stdlib_Filename[13], _ai_), "inline_tests_runner.exe")){caml_call1(Stdlib_Printf[3], _z_); switch$0 = 1;}
     }
     if(! switch$0) caml_call1(Stdlib_Printf[3], _A_);
     return 2;
    }
    var _aj_ = match[2], which_tests = _aj_[1];
    if(typeof _aj_[2] === "number"){
     var
      _ae_ = 0,
      _af_ = function(k, param, acc){return [0, k, acc];},
      _ag_ = caml_call3(Stdlib_Hashtbl[14], _af_, _d_, _ae_),
      _ah_ = caml_call2(Stdlib_List[56], Stdlib_String[9], _ag_),
      _ak_ = caml_call1(Stdlib_Printf[2], _B_);
     caml_call2(Stdlib_List[17], _ak_, _ah_);
     return 0;
    }
    var match$0 = log[1];
    if(match$0){var ch = match$0[1]; caml_call1(Stdlib[76], ch);}
    print_delayed_errors(0);
    var count = tests_failed[1], count_test_modules = test_modules_failed[1];
    if(0 === count && 0 === count_test_modules){
     if(show_counts[1])
      caml_call3(Stdlib_Printf[3], _C_, tests_ran[1], test_modules_ran[1]);
     var
      _al_ = which_tests[2],
      _am_ = function(param){var used = param[3]; return 1 - used[1];},
      unused_tests = caml_call2(Stdlib_List[41], _am_, _al_),
      errors = unused_tests ? [0, unused_tests] : 0;
     if(errors){
      var tests = errors[1];
      caml_call1(Stdlib_Printf[3], _D_);
      var
       _an_ =
         function(param){
          var line_number_opt = param[2], filename = param[1];
          if(! line_number_opt)
           return caml_call2(Stdlib_Printf[3], _F_, filename);
          var line_number = line_number_opt[1];
          return caml_call3(Stdlib_Printf[3], _E_, filename, line_number);
         };
      caml_call2(Stdlib_List[17], _an_, tests);
      caml_call1(Stdlib_Printf[3], _G_);
      return 2;
     }
     if(0 === tests_ran[1] && strict[1]){
      caml_call1(Stdlib_Printf[3], _H_);
      return 2;
     }
     return 0;
    }
    if(0 === count_test_modules)
     var _ao_ = cst$11;
    else
     var
      _ap_ = caml_call2(Stdlib[98], _K_, _J_),
      _ao_ = caml_call2(Stdlib_Printf[4], _ap_, count_test_modules);
    caml_call4(Stdlib_Printf[3], _I_, count, tests_ran[1], _ao_);
    return 1;
   }
   var
    use_color$0 = use_color[1],
    in_place$0 = in_place[1],
    diff_command$0 = diff_command[1],
    source_tree_root$0 = source_tree_root[1],
    allow_output_patterns$0 = allow_output_patterns[1],
    evaluators = [0, [0, summarize, 0]];
   function add_evaluator(f){evaluators[1] = [0, f, evaluators[1]]; return 0;}
   function exit(param){
    var _ab_ = caml_call1(Stdlib_List[9], evaluators[1]);
    function _ac_(f){return caml_call1(f, 0);}
    switch(combine_all(caml_call2(Stdlib_List[19], _ac_, _ab_))){
      case 0:
       var _ad_ = 0; break;
      case 1:
       var _ad_ = 2; break;
      default: var _ad_ = 1;
    }
    return caml_call1(Stdlib[99], _ad_);
   }
   var
    Ppx_inline_test_lib_Runtime =
      [0,
       [0, combine, combine_all, to_string],
       set_lib_and_partition,
       unset_lib,
       test,
       test_unit,
       test_module,
       testing,
       use_color$0,
       in_place$0,
       diff_command$0,
       source_tree_root$0,
       allow_output_patterns$0,
       am_running_inline_test,
       am_running_inline_test_env_var,
       add_evaluator,
       exit];
   runtime.caml_register_global
    (124, Ppx_inline_test_lib_Runtime, cst_Ppx_inline_test_lib_Runtim$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
