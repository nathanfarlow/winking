// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Base_quickcheck__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_quickcheck = [0];
   runtime.caml_register_global(0, Base_quickcheck, "Base_quickcheck__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__With_basic_types
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Base_quickcheck_With_basic_typ = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_With_basic_typ, "Base_quickcheck__With_basic_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Bigarray_helpers
//# unitInfo: Requires: Base, Base__Array, Stdlib__Bigarray
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_get_2 = runtime.caml_ba_get_2,
    caml_ba_layout = runtime.caml_ba_layout;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Base_Array = global_data.Base__Array,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray;
   function offset(param){return param ? 1 : 0;}
   var Layout = [0, offset];
   function iteri(t, f){
    var
     _v_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _v_),
     _x_ = caml_ba_dim_1(t) - 1 | 0,
     _w_ = 0;
    if(_x_ >= 0){
     var i = _w_;
     for(;;){
      caml_call2(f, i + offset | 0, caml_ba_get_1(t, i + offset | 0));
      var _y_ = i + 1 | 0;
      if(_x_ !== i){var i = _y_; continue;}
      break;
     }
    }
    return 0;
   }
   function init(kind, layout, dim, f){
    var t = caml_call3(Stdlib_Bigarray[19][1], kind, layout, dim);
    iteri
     (t,
      function(i, param){
       return runtime.caml_ba_set_1(t, i, caml_call1(f, i));
      });
    return t;
   }
   function fold(t, init, f){
    var init$0 = [0, init];
    iteri
     (t,
      function(i, param){
       var _u_ = caml_ba_get_1(t, i);
       init$0[1] = caml_call2(f, init$0[1], _u_);
       return 0;
      });
    return init$0[1];
   }
   function to_array(t){
    var _r_ = caml_ba_layout(t), offset = caml_call1(Layout[1], _r_);
    function _s_(i){return caml_ba_get_1(t, i + offset | 0);}
    var _t_ = caml_ba_dim_1(t);
    return caml_call2(Base_Array[27], _t_, _s_);
   }
   function sexp_of_t(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_001 = to_array(t);
    return caml_call2(Base[90], sexp_of_elt, x_001);
   }
   function hash_fold(hash_fold_elt, state, t){
    var _q_ = caml_ba_dim_1(t), state$0 = caml_call2(Base[116], state, _q_);
    return fold(t, state$0, hash_fold_elt);
   }
   function iteri$0(t, f){
    var
     _j_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _j_),
     _l_ = caml_ba_dim_1(t) - 1 | 0,
     _k_ = 0;
    if(_l_ >= 0){
     var i = _k_;
     for(;;){
      var _n_ = caml_ba_dim_2(t) - 1 | 0, _m_ = 0;
      if(_n_ >= 0){
       var j = _m_;
       for(;;){
        caml_call3
         (f,
          i + offset | 0,
          j + offset | 0,
          caml_ba_get_2(t, i + offset | 0, j + offset | 0));
        var _p_ = j + 1 | 0;
        if(_n_ !== j){var j = _p_; continue;}
        break;
       }
      }
      var _o_ = i + 1 | 0;
      if(_l_ !== i){var i = _o_; continue;}
      break;
     }
    }
    return 0;
   }
   function init$0(kind, layout, dim1, dim2, f){
    var t = caml_call4(Stdlib_Bigarray[20][1], kind, layout, dim1, dim2);
    iteri$0
     (t,
      function(i, j, param){
       return runtime.caml_ba_set_2(t, i, j, caml_call2(f, i, j));
      });
    return t;
   }
   function fold$0(t, init, f){
    var init$0 = [0, init];
    iteri$0
     (t,
      function(param, _i_, elt){
       init$0[1] = caml_call2(f, init$0[1], elt);
       return 0;
      });
    return init$0[1];
   }
   function to_array$0(t){
    var _d_ = caml_ba_layout(t), offset = caml_call1(Layout[1], _d_);
    function _e_(i){
     function _g_(j){return caml_ba_get_2(t, i + offset | 0, j + offset | 0);}
     var _h_ = caml_ba_dim_2(t);
     return caml_call2(Base_Array[27], _h_, _g_);
    }
    var _f_ = caml_ba_dim_1(t);
    return caml_call2(Base_Array[27], _f_, _e_);
   }
   function sexp_of_t$0(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_002 = to_array$0(t), _c_ = caml_call1(Base[90], sexp_of_elt);
    return caml_call2(Base[90], _c_, x_002);
   }
   function hash_fold$0(hash_fold_elt, state, t){
    var
     _a_ = caml_ba_dim_1(t),
     state$0 = caml_call2(Base[116], state, _a_),
     _b_ = caml_ba_dim_2(t),
     state$1 = caml_call2(Base[116], state$0, _b_);
    return fold$0(t, state$1, hash_fold_elt);
   }
   var
    Base_quickcheck_Bigarray_helpe =
      [0,
       Layout,
       [0, sexp_of_t, init, iteri, fold, to_array, hash_fold],
       [0, sexp_of_t$0, init$0, iteri$0, fold$0, to_array$0, hash_fold$0]];
   runtime.caml_register_global
    (3, Base_quickcheck_Bigarray_helpe, "Base_quickcheck__Bigarray_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer0
//# unitInfo: Requires: Base, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    _a_ = [0, "size"],
    cst_Base_quickcheck_Observer_o =
      "Base_quickcheck.Observer.observe: size < 0";
   function create(f){return f;}
   function observe(t, x, size, hash){
    if(0 <= size) return caml_call3(t, x, size, hash);
    var
     _c_ = [0, [1, [0, _a_, [0, caml_call1(Base[119], size), 0]]], 0],
     _d_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Observer_o),
         _c_]];
    return caml_call1(Base[202], _d_);
   }
   function opaque(param, _b_, hash){return hash;}
   var Base_quickcheck_Observer0 = [0, opaque, create, observe];
   runtime.caml_register_global
    (4, Base_quickcheck_Observer0, "Base_quickcheck__Observer0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Generator
//# unitInfo: Requires: Assert_failure, Base, Base__Applicative, Base__Array, Base__Bytes, Base__Char, Base__Either, Base__Error, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__Lazy, Base__List, Base__Map, Base__Monad, Base__Nativeint, Base__Option, Base__Sequence, Base__Set, Base__Staged, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Observer0, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lower_bound = "lower_bound",
    cst_src_generator_ml = "src/generator.ml",
    cst_upper_bound = "upper_bound",
    cst_weight = "weight",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_xor = runtime.caml_int64_xor,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_Array = global_data.Base__Array,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Set = global_data.Base__Set,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Float = global_data.Base__Float,
    Splittable_random = global_data.Splittable_random,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Int63 = global_data.Base__Int63,
    Base_Char = global_data.Base__Char,
    Base_Lazy = global_data.Base__Lazy,
    Base_Int = global_data.Base__Int,
    Base_Either = global_data.Base__Either,
    Base_Option = global_data.Base__Option,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Error = global_data.Base__Error,
    Base_Hash = global_data.Base__Hash,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Staged = global_data.Base__Staged,
    Base_Applicative = global_data.Base__Applicative,
    Base_Monad = global_data.Base__Monad,
    Base_Int32 = global_data.Base__Int32,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Bytes = global_data.Base__Bytes,
    _az_ = [0, 0, 0],
    _au_ = [0, cst_upper_bound],
    _av_ = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_bo =
      "Float.uniform_exclusive: bounds are not finite",
    _aw_ = [0, cst_upper_bound],
    _ax_ = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_re =
      "Float.uniform_exclusive: requested range is empty",
    _h_ = [0, 0],
    _g_ = [0, 1],
    _f_ = [0, cst_src_generator_ml, 198, 4],
    _e_ = [0, cst_src_generator_ml, 225, 6],
    cst_Base_quickcheck_Generator_$5 =
      "Base_quickcheck.Generator.weighted_recursive_union: lists must be non-empty",
    _d_ = [0, cst_src_generator_ml, 160, 14],
    _b_ = [0, cst_weight],
    cst_Base_quickcheck_Generator_$2 =
      "Base_quickcheck.Generator.of_weighted_list: weight is not finite",
    _c_ = [0, cst_weight],
    cst_Base_quickcheck_Generator_$3 =
      "Base_quickcheck.Generator.of_weighted_list: weight is negative",
    cst_Base_quickcheck_Generator_$1 =
      "Base_quickcheck.Generator.of_weighted_list: empty list",
    cst_Base_quickcheck_Generator_$4 =
      "Base_quickcheck.Generator.of_weighted_list: total weight is zero",
    cst_Base_quickcheck_Generator_$0 =
      "Base_quickcheck.Generator.of_list: empty list",
    _a_ = [0, "size"],
    cst_Base_quickcheck_Generator_ =
      "Base_quickcheck.Generator.generate: size < 0";
   function create(f){return caml_call1(Base_Staged[1], f);}
   function generate(t, size, random){
    if(0 <= size) return caml_call3(Base_Staged[2], t, size, random);
    var
     _dv_ = [0, [1, [0, _a_, [0, caml_call1(Base[119], size), 0]]], 0],
     _dw_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_),
         _dv_]];
    return caml_call1(Base[202], _dw_);
   }
   var size = create(function(size, param){return size;});
   function fn(dom, rng){
    return create
            (function(size, random){
              var random$0 = caml_call1(Splittable_random[1][5], random);
              return function(x){
               var
                _dt_ = caml_call1(Base_Hash[7], 0),
                hash =
                  caml_call4(Base_quickcheck_Observer0[3], dom, x, size, _dt_),
                random = caml_call1(Splittable_random[1][4], random$0),
                _du_ = caml_call1(Base_Hash[9], hash);
               caml_call2(Splittable_random[1][3], random, _du_);
               return generate(rng, size, random);};
             });
   }
   function with_size(t, size){
    return create(function(param, random){return generate(t, size, random);});
   }
   function perturb(t, salt){
    return create
            (function(size, random){
              caml_call2(Splittable_random[1][3], random, salt);
              return generate(t, size, random);
             });
   }
   function filter_map(t, f){
    function loop(size, random){
     var size$0 = size;
     for(;;){
      var x = generate(t, size$0, random), match = caml_call1(f, x);
      if(match){var y = match[1]; return y;}
      var size$1 = size$0 + 1 | 0, size$0 = size$1;
     }
    }
    return create(loop);
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function return$0(x){return create(function(param, _ds_){return x;});}
   function map(t, f){
    return create
            (function(size, random){
              return caml_call1(f, generate(t, size, random));
             });
   }
   function apply(tf, tx){
    return create
            (function(size, random){
              var
               f = generate(tf, size, random),
               x = generate(tx, size, random);
              return caml_call1(f, x);
             });
   }
   function bind(t, f){
    return create
            (function(size, random){
              var x = generate(t, size, random);
              return generate(caml_call1(f, x), size, random);
             });
   }
   function all(list){
    return create
            (function(size, random){
              function _dq_(_dr_){return generate(_dr_, size, random);}
              return caml_call2(Base_List[76], list, _dq_);
             });
   }
   function all_unit(list){
    return create
            (function(size, random){
              function _do_(_dp_){return generate(_dp_, size, random);}
              return caml_call2(Base_List[9], list, _do_);
             });
   }
   var
    map$0 = [0, -198771759, map],
    For_applicative =
      caml_call1(Base_Applicative[5], [0, return$0, apply, map$0]),
    both = For_applicative[3],
    map2 = For_applicative[9],
    map3 = For_applicative[10],
    include = For_applicative[13],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    map$1 = [0, -198771759, map],
    For_monad = caml_call1(Base_Monad[1], [0, bind, return$0, map$1]),
    ignore_m = For_monad[8],
    join = For_monad[7],
    include$0 = For_monad[3],
    symbol_bind = include$0[1],
    symbol_map = include$0[2];
   function of_list(list){
    if(caml_call1(Base_List[8], list)){
     var
      _dn_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$0);
     caml_call1(Base_Error[30], _dn_);
    }
    var
     array = caml_call1(Base_Array[39], list),
     hi = array.length - 1 - 1 | 0,
     lo = 0;
    return create
            (function(param, random){
              var index = caml_call3(Splittable_random[3], random, lo, hi);
              return caml_check_bound(array, index)[1 + index];
             });
   }
   function union(list){return caml_call1(join, of_list(list));}
   function of_weighted_list(alist){
    if(caml_call1(Base_List[8], alist)){
     var
      _df_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$1);
     caml_call1(Base_Error[30], _df_);
    }
    var
     match = caml_call1(Base_List[92], alist),
     values = match[2],
     weights = match[1],
     value_array = caml_call1(Base_Array[39], values);
    function _dg_(param){return 0.;}
    var array = caml_call2(Base_Array[27], value_array.length - 1, _dg_);
    function _dh_(index, acc, weight){
     if(1 - caml_call1(Base_Float[84], weight)){
      var
       _dj_ = [0, [1, [0, _b_, [0, caml_call1(Base[112], weight), 0]]], 0],
       _dk_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$2),
           _dj_]];
      caml_call1(Base_Error[30], _dk_);
     }
     if(caml_call2(Base_Float[13], weight, 0.)){
      var
       _dl_ = [0, [1, [0, _c_, [0, caml_call1(Base[112], weight), 0]]], 0],
       _dm_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$3),
           _dl_]];
      caml_call1(Base_Error[30], _dm_);
     }
     var cumulative = caml_call2(Base[190], acc, weight);
     runtime.caml_array_set(array, index, cumulative);
     return cumulative;
    }
    var sum = caml_call3(Base_List[99], weights, 0., _dh_);
    if(caml_call2(Base_Float[10], sum, 0.)){
     var
      _di_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$4);
     caml_call1(Base_Error[30], _di_);
    }
    return create
            (function(param, random){
              var
               choice = caml_call3(Splittable_random[8], random, 0., sum),
               match =
                 caml_call6
                  (Base_Array[5],
                   0,
                   0,
                   array,
                   Base_Float[16],
                   926943384,
                   choice);
              if(! match)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
              var index = match[1];
              return caml_check_bound(value_array, index)[1 + index];
             });
   }
   function weighted_union(alist){
    return caml_call1(join, of_weighted_list(alist));
   }
   function of_lazy(lazy_t){
    return create
            (function(size, random){
              var
               _dd_ = caml_obj_tag(lazy_t),
               _de_ =
                 250 === _dd_
                  ? lazy_t[1]
                  : 246
                    === _dd_
                    ? caml_call1(CamlinternalLazy[2], lazy_t)
                    : lazy_t;
              return generate(_de_, size, random);
             });
   }
   function fixed_point(of_generator){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246,
       function(param){return caml_call1(of_generator, of_lazy(lazy_t));}]);
    var _dc_ = caml_obj_tag(lazy_t);
    return 250 === _dc_
            ? lazy_t[1]
            : 246 === _dc_ ? caml_call1(CamlinternalLazy[2], lazy_t) : lazy_t;
   }
   function weighted_recursive_union(nonrec_list, f){
    return fixed_point
            (function(self){
              function _c7_(param){
               var t = param[2], w = param[1];
               function _db_(n){return with_size(t, n - 1 | 0);}
               return [0, w, caml_call2(For_monad[11][4][2], size, _db_)];
              }
              var
               _c8_ = caml_call1(f, self),
               rec_list = caml_call2(Base_List[76], _c8_, _c7_),
               _c9_ = caml_call1(Base_List[8], nonrec_list),
               _c__ = _c9_ || caml_call1(Base_List[8], rec_list);
              if(_c__){
               var
                _c$_ =
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$5);
               caml_call1(Base[202], _c$_);
              }
              var
               nonrec_gen = weighted_union(nonrec_list),
               rec_gen =
                 weighted_union(caml_call2(Base[178], nonrec_list, rec_list));
              function _da_(param){return 0 === param ? nonrec_gen : rec_gen;}
              return caml_call2(For_monad[11][4][2], size, _da_);
             });
   }
   function recursive_union(nonrec_list, f){
    function weighted(list){
     function _c6_(t){return [0, 1., t];}
     return caml_call2(Base_List[76], list, _c6_);
    }
    function _c5_(self){return weighted(caml_call1(f, self));}
    return weighted_recursive_union(weighted(nonrec_list), _c5_);
   }
   function sizes(opt, _cS_, param){
    if(opt) var sth = opt[1], min_length = sth; else var min_length = 0;
    if(_cS_)
     var sth$0 = _cS_[1], max_length = sth$0;
    else
     var max_length = Base_Int[60];
    return create
            (function(size, random){
              if(min_length > max_length)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
              var
               upper_bound = min_length + size | 0,
               max_length$0 =
                 min_length <= upper_bound
                  ? caml_call2(Base[189], max_length, upper_bound)
                  : max_length,
               len =
                 caml_call3
                  (Splittable_random[10][1], random, min_length, max_length$0);
              if(0 === len) return 0;
              function _cT_(param){return 0;}
              var
               sizes = caml_call2(Base_Array[27], len, _cT_),
               remaining = size - (len - min_length | 0) | 0,
               max_index = len - 1 | 0,
               _cU_ = 1;
              if(remaining >= 1){
               var for$0 = _cU_;
               for(;;){
                var
                 index =
                   caml_call3(Splittable_random[10][1], random, 0, max_index);
                sizes[1 + index] =
                 caml_check_bound(sizes, index)[1 + index] + 1 | 0;
                var _c1_ = for$0 + 1 | 0;
                if(remaining !== for$0){var for$0 = _c1_; continue;}
                break;
               }
              }
              var _cW_ = max_index - 1 | 0, _cV_ = 0;
              if(_cW_ >= 0){
               var i = _cV_;
               for(;;){
                var
                 j = caml_call3(Splittable_random[3], random, i, max_index);
                caml_call3(Base_Array[74], sizes, i, j);
                var _c0_ = i + 1 | 0;
                if(_cW_ !== i){var i = _c0_; continue;}
                break;
               }
              }
              var _cX_ = len - min_length | 0;
              function _cY_(_c4_){return _c4_;}
              function _cZ_(_c3_, _c2_){return _c3_ + _c2_ | 0;}
              if
               ((caml_call3
                 (Base_Array[16], [0, Base_Int[74], _cZ_], sizes, _cY_)
                + _cX_
                | 0)
                === size)
               return caml_call1(Base_Array[19], sizes);
              throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
             });
   }
   var
    unit = caml_call1(For_monad[11][1], 0),
    bool =
      create
       (function(param, random){
         return caml_call1(Splittable_random[2], random);
        });
   function option(value_t){
    var _cR_ = [0, map(value_t, Base_Option[20]), 0];
    return union([0, caml_call1(For_monad[11][1], 0), _cR_]);
   }
   function either(fst_t, snd_t){
    var _cQ_ = [0, map(snd_t, Base_Either[18]), 0];
    return union([0, map(fst_t, Base_Either[17]), _cQ_]);
   }
   function result(ok_t, err_t){
    function _cP_(param){
     if(0 === param[0]){var ok = param[1]; return [0, ok];}
     var err = param[1];
     return [1, err];
    }
    return map(either(ok_t, err_t), _cP_);
   }
   function list_generic(min_length, max_length, elt_gen){
    function _cM_(sizes){
     function _cO_(size){return with_size(elt_gen, size);}
     return all(caml_call2(Base_List[76], sizes, _cO_));
    }
    var _cN_ = sizes(min_length, max_length, 0);
    return caml_call2(For_monad[11][4][2], _cN_, _cM_);
   }
   function list(elt_gen){return list_generic(0, 0, elt_gen);}
   function list_non_empty(elt_gen){return list_generic(_g_, 0, elt_gen);}
   function list_with_length(elt_gen, length){
    return list_generic([0, length], [0, length], elt_gen);
   }
   function list_filtered(elts){
    var
     elts$0 = caml_call1(Base_Array[39], elts),
     length_of_input = elts$0.length - 1;
    return create
            (function(param, random){
              var
               length_of_output =
                 caml_call3(Splittable_random[3], random, 0, length_of_input);
              function _cF_(_cL_){return _cL_;}
              var
               indices = caml_call2(Base_Array[27], length_of_input, _cF_),
               _cH_ = length_of_output - 1 | 0,
               _cG_ = 0;
              if(_cH_ >= 0){
               var i = _cG_;
               for(;;){
                var
                 j =
                   caml_call3
                    (Splittable_random[3], random, i, length_of_input - 1 | 0);
                caml_call3(Base_Array[74], indices, i, j);
                var _cJ_ = i + 1 | 0;
                if(_cH_ !== i){var i = _cJ_; continue;}
                break;
               }
              }
              caml_call4
               (Base_Array[49],
                _h_,
                [0, length_of_output],
                indices,
                Base_Int[13]);
              function _cI_(i){
               var _cK_ = caml_check_bound(indices, i)[1 + i];
               return caml_check_bound(elts$0, _cK_)[1 + _cK_];
              }
              return caml_call2(Base_List[123], length_of_output, _cI_);
             });
   }
   function list_permutations(list){
    return create
            (function(param, random){
              var
               array = caml_call1(Base_Array[39], list),
               _cD_ = array.length - 1 - 1 | 0,
               _cC_ = 1;
              if(_cD_ >= 1){
               var i = _cC_;
               for(;;){
                var j = caml_call3(Splittable_random[3], random, 0, i);
                caml_call3(Base_Array[74], array, i, j);
                var _cE_ = i + 1 | 0;
                if(_cD_ !== i){var i = _cE_; continue;}
                break;
               }
              }
              return caml_call1(Base_Array[19], array);
             });
   }
   function array(t){var _cB_ = Base_Array[39]; return map(list(t), _cB_);}
   function ref(t){return map(t, function(_cA_){return [0, _cA_];});}
   function lazy_t(t){return map(t, Base_Lazy[21]);}
   function char_uniform_inclusive(lo, hi){
    return create
            (function(param, random){
              var
               _cx_ = caml_call1(Base_Char[29], hi),
               _cy_ = caml_call1(Base_Char[29], lo),
               _cz_ = caml_call3(Splittable_random[3], random, _cy_, _cx_);
              return caml_call1(Base_Char[32], _cz_);
             });
   }
   var
    char_uppercase = char_uniform_inclusive(65, 90),
    char_lowercase = char_uniform_inclusive(97, 122),
    char_digit = char_uniform_inclusive(48, 57),
    char_print_uniform = char_uniform_inclusive(32, 126),
    char_uniform = char_uniform_inclusive(Base_Char[50], Base_Char[51]),
    char_alpha = union([0, char_lowercase, [0, char_uppercase, 0]]),
    char_alphanum =
      weighted_union([0, [0, 52., char_alpha], [0, [0, 10., char_digit], 0]]),
    char_whitespace =
      of_list(caml_call2(Base_List[54], Base_Char[1], Base_Char[42])),
    char_print =
      weighted_union
       ([0, [0, 10., char_alphanum], [0, [0, 1., char_print_uniform], 0]]),
    _i_ = [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[51])], 0],
    char$0 =
      weighted_union
       ([0,
         [0, 100., char_print],
         [0,
          [0, 10., char_uniform],
          [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[50])], _i_]]]);
   function small_int(allow_zero){
    return create
            (function(size, random){
              var
               lower_bound = allow_zero ? 0 : 1,
               upper_bound = size + 1 | 0,
               weighted_low =
                 caml_call3
                  (Splittable_random[10][1],
                   random,
                   0,
                   upper_bound - lower_bound | 0),
               weighted_high = upper_bound - weighted_low | 0;
              return weighted_high;
             });
   }
   var
    small_positive_or_zero_int = small_int(1),
    small_strictly_positive_int = small_int(0);
   function For_integer(Integer){
    function uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[96], random, lo, hi);
              });
    }
    function log_uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[97], random, lo, hi);
              });
    }
    function non_uniform(f, lo, hi){
     var
      _cv_ = [0, [0, 0.9, caml_call2(f, lo, hi)], 0],
      _cw_ = [0, [0, 0.05, caml_call1(For_monad[11][1], hi)], _cv_];
     return weighted_union
             ([0, [0, 0.05, caml_call1(For_monad[11][1], lo)], _cw_]);
    }
    function inclusive(_ct_, _cu_){
     return non_uniform(uniform_inclusive, _ct_, _cu_);
    }
    function log_inclusive(_cr_, _cs_){
     return non_uniform(log_uniform_inclusive, _cr_, _cs_);
    }
    var
     uniform_all = uniform_inclusive(Integer[85], Integer[84]),
     let_syntax_004 = log_inclusive(Integer[38], Integer[84]);
    function _cp_(param){
     var magnitude = param[2], negative = param[1];
     return negative ? caml_call1(Integer[70], magnitude) : magnitude;
    }
    var
     _cq_ = caml_call2(For_monad[11][4][4], bool, let_syntax_004),
     all = caml_call2(For_monad[11][4][3], _cq_, _cp_);
    return [0,
            uniform_inclusive,
            log_uniform_inclusive,
            non_uniform,
            inclusive,
            log_inclusive,
            uniform_all,
            all];
   }
   var
    t_sexp_grammar = Base_Int[1],
    of_float = Base_Int[2],
    to_float = Base_Int[3],
    of_int_exn = Base_Int[4],
    to_int_exn = Base_Int[5],
    hash_fold_t = Base_Int[6],
    hash = Base_Int[7],
    t_of_sexp = Base_Int[8],
    sexp_of_t = Base_Int[9],
    of_string = Base_Int[10],
    to_string = Base_Int[11],
    equal = Base_Int[12],
    compare = Base_Int[13],
    min = Base_Int[14],
    max = Base_Int[15],
    ascending = Base_Int[16],
    descending = Base_Int[17],
    between = Base_Int[18],
    clamp_exn = Base_Int[19],
    clamp = Base_Int[20],
    comparator = Base_Int[21],
    pp = Base_Int[22],
    hashable = Base_Int[23],
    is_positive = Base_Int[24],
    is_non_negative = Base_Int[25],
    is_negative = Base_Int[26],
    is_non_positive = Base_Int[27],
    sign = Base_Int[28],
    invariant = Base_Int[29],
    Hex = Base_Int[30],
    to_string_hum = Base_Int[31],
    one = Base_Int[32],
    minus_one = Base_Int[33],
    rem = Base_Int[34],
    round = Base_Int[35],
    round_towards_zero = Base_Int[36],
    round_down = Base_Int[37],
    round_up = Base_Int[38],
    round_nearest = Base_Int[39],
    succ = Base_Int[40],
    pred = Base_Int[41],
    pow = Base_Int[42],
    bit_and = Base_Int[43],
    bit_or = Base_Int[44],
    bit_xor = Base_Int[45],
    bit_not = Base_Int[46],
    popcount = Base_Int[47],
    shift_left = Base_Int[48],
    shift_right = Base_Int[49],
    decr = Base_Int[50],
    incr = Base_Int[51],
    of_int32_exn = Base_Int[52],
    to_int32_exn = Base_Int[53],
    of_int64_exn = Base_Int[54],
    to_int64 = Base_Int[55],
    of_nativeint_exn = Base_Int[56],
    to_nativeint_exn = Base_Int[57],
    of_float_unchecked = Base_Int[58],
    num_bits = Base_Int[59],
    max_value = Base_Int[60],
    min_value = Base_Int[61],
    shift_right_logical = Base_Int[62],
    ceil_pow2 = Base_Int[63],
    floor_pow2 = Base_Int[64],
    ceil_log2 = Base_Int[65],
    floor_log2 = Base_Int[66],
    is_pow2 = Base_Int[67],
    clz = Base_Int[68],
    ctz = Base_Int[69],
    O = Base_Int[70],
    symbol$2 = Base_Int[71],
    lnot = Base_Int[72],
    abs = Base_Int[73],
    zero = Base_Int[74],
    symbol$3 = Base_Int[75],
    symbol$4 = Base_Int[76],
    symbol$5 = Base_Int[77],
    uniform = Splittable_random[3],
    log_uniform = Splittable_random[10][1];
   function _j_(_co_, _cn_){return _co_ >>> _cn_ | 0;}
   function _k_(_cm_, _cl_){return _cm_ >> _cl_;}
   function _l_(_ck_, _cj_){return _ck_ << _cj_;}
   var _m_ = O[2];
   function _n_(_ci_, _ch_){return _ci_ ^ _ch_;}
   function _o_(_cg_, _cf_){return _cg_ | _cf_;}
   function _p_(_ce_, _cd_){return _ce_ & _cd_;}
   var _q_ = O[7], _r_ = O[6], _s_ = O[5], _t_ = O[4];
   function _u_(_cc_){return - _cc_ | 0;}
   var _v_ = O[3];
   function _w_(_cb_, _ca_){return _cb_ !== _ca_ ? 1 : 0;}
   function _x_(_b$_, _b__){return _b$_ < _b__ ? 1 : 0;}
   function _y_(_b9_, _b8_){return _b8_ < _b9_ ? 1 : 0;}
   function _z_(_b7_, _b6_){return _b7_ === _b6_ ? 1 : 0;}
   function _A_(_b5_, _b4_){return _b5_ <= _b4_ ? 1 : 0;}
   function _B_(_b3_, _b2_){return _b2_ <= _b3_ ? 1 : 0;}
   var _C_ = O[1];
   function _D_(_b1_){return - _b1_ | 0;}
   var _E_ = caml_div, _F_ = caml_mul;
   function _G_(_b0_, _bZ_){return _b0_ - _bZ_ | 0;}
   var
    _H_ =
      [0,
       function(_bY_, _bX_){return _bY_ + _bX_ | 0;},
       _G_,
       _F_,
       _E_,
       _D_,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_,
       _j_];
   function _I_(_bW_, _bV_){return _bW_ >>> _bV_ | 0;}
   function _J_(_bU_, _bT_){return _bU_ >> _bT_;}
   function _K_(_bS_, _bR_){return _bS_ << _bR_;}
   function _L_(_bQ_, _bP_){return _bQ_ ^ _bP_;}
   function _M_(_bO_, _bN_){return _bO_ | _bN_;}
   function _N_(_bM_, _bL_){return _bM_ & _bL_;}
   var _O_ = caml_div;
   function _P_(_bK_){return - _bK_ | 0;}
   function _Q_(_bJ_){return - _bJ_ | 0;}
   var _R_ = caml_mul;
   function _S_(_bI_, _bH_){return _bI_ - _bH_ | 0;}
   function _T_(_bG_, _bF_){return _bG_ + _bF_ | 0;}
   function _U_(_bE_, _bD_){return _bE_ !== _bD_ ? 1 : 0;}
   function _V_(_bC_, _bB_){return _bC_ < _bB_ ? 1 : 0;}
   function _W_(_bA_, _bz_){return _bz_ < _bA_ ? 1 : 0;}
   function _X_(_by_, _bx_){return _by_ === _bx_ ? 1 : 0;}
   function _Y_(_bw_, _bv_){return _bw_ <= _bv_ ? 1 : 0;}
   var
    For_int =
      For_integer
       ([0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(_bu_, _bt_){return _bt_ <= _bu_ ? 1 : 0;},
         _Y_,
         _X_,
         _W_,
         _V_,
         _U_,
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         invariant,
         Hex,
         to_string_hum,
         zero,
         one,
         minus_one,
         _T_,
         _S_,
         _R_,
         symbol$2,
         _Q_,
         _P_,
         symbol$4,
         symbol$3,
         _O_,
         rem,
         symbol$5,
         _N_,
         _M_,
         _L_,
         lnot,
         _K_,
         _J_,
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         of_float_unchecked,
         num_bits,
         max_value,
         min_value,
         _I_,
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         floor_log2,
         is_pow2,
         clz,
         ctz,
         _H_,
         uniform,
         log_uniform]),
    int$0 = For_int[7],
    int_uniform = For_int[6],
    int_inclusive = For_int[4],
    int_uniform_inclusive = For_int[1],
    int_log_inclusive = For_int[5],
    int_log_uniform_inclusive = For_int[2],
    t_sexp_grammar$0 = Base_Int32[1],
    of_float$0 = Base_Int32[2],
    to_float$0 = Base_Int32[3],
    of_int_exn$0 = Base_Int32[4],
    to_int_exn$0 = Base_Int32[5],
    hash_fold_t$0 = Base_Int32[6],
    hash$0 = Base_Int32[7],
    t_of_sexp$0 = Base_Int32[8],
    sexp_of_t$0 = Base_Int32[9],
    of_string$0 = Base_Int32[10],
    to_string$0 = Base_Int32[11],
    symbol$6 = Base_Int32[12],
    symbol$7 = Base_Int32[13],
    symbol$8 = Base_Int32[14],
    symbol$9 = Base_Int32[15],
    symbol$10 = Base_Int32[16],
    symbol$11 = Base_Int32[17],
    equal$0 = Base_Int32[18],
    compare$0 = Base_Int32[19],
    min$0 = Base_Int32[20],
    max$0 = Base_Int32[21],
    ascending$0 = Base_Int32[22],
    descending$0 = Base_Int32[23],
    between$0 = Base_Int32[24],
    clamp_exn$0 = Base_Int32[25],
    clamp$0 = Base_Int32[26],
    comparator$0 = Base_Int32[27],
    pp$0 = Base_Int32[28],
    hashable$0 = Base_Int32[29],
    is_positive$0 = Base_Int32[30],
    is_non_negative$0 = Base_Int32[31],
    is_negative$0 = Base_Int32[32],
    is_non_positive$0 = Base_Int32[33],
    sign$0 = Base_Int32[34],
    invariant$0 = Base_Int32[35],
    Hex$0 = Base_Int32[36],
    to_string_hum$0 = Base_Int32[37],
    zero$0 = Base_Int32[38],
    one$0 = Base_Int32[39],
    minus_one$0 = Base_Int32[40],
    symbol$12 = Base_Int32[41],
    symbol$13 = Base_Int32[42],
    symbol$14 = Base_Int32[43],
    symbol$15 = Base_Int32[44],
    neg = Base_Int32[45],
    symbol$16 = Base_Int32[46],
    symbol$17 = Base_Int32[47],
    symbol$18 = Base_Int32[48],
    symbol$19 = Base_Int32[49],
    rem$0 = Base_Int32[50],
    symbol$20 = Base_Int32[51],
    land = Base_Int32[52],
    lor = Base_Int32[53],
    lxor = Base_Int32[54],
    lnot$0 = Base_Int32[55],
    lsl = Base_Int32[56],
    asr = Base_Int32[57],
    round$0 = Base_Int32[58],
    round_towards_zero$0 = Base_Int32[59],
    round_down$0 = Base_Int32[60],
    round_up$0 = Base_Int32[61],
    round_nearest$0 = Base_Int32[62],
    abs$0 = Base_Int32[63],
    succ$0 = Base_Int32[64],
    pred$0 = Base_Int32[65],
    pow$0 = Base_Int32[66],
    bit_and$0 = Base_Int32[67],
    bit_or$0 = Base_Int32[68],
    bit_xor$0 = Base_Int32[69],
    bit_not$0 = Base_Int32[70],
    popcount$0 = Base_Int32[71],
    shift_left$0 = Base_Int32[72],
    shift_right$0 = Base_Int32[73],
    decr$0 = Base_Int32[74],
    incr$0 = Base_Int32[75],
    of_int32_exn$0 = Base_Int32[76],
    to_int32_exn$0 = Base_Int32[77],
    of_int64_exn$0 = Base_Int32[78],
    to_int64$0 = Base_Int32[79],
    of_nativeint_exn$0 = Base_Int32[80],
    to_nativeint_exn$0 = Base_Int32[81],
    of_float_unchecked$0 = Base_Int32[82],
    num_bits$0 = Base_Int32[83],
    max_value$0 = Base_Int32[84],
    min_value$0 = Base_Int32[85],
    lsr = Base_Int32[86],
    shift_right_logical$0 = Base_Int32[87],
    ceil_pow2$0 = Base_Int32[88],
    floor_pow2$0 = Base_Int32[89],
    ceil_log2$0 = Base_Int32[90],
    floor_log2$0 = Base_Int32[91],
    is_pow2$0 = Base_Int32[92],
    clz$0 = Base_Int32[93],
    ctz$0 = Base_Int32[94],
    O$0 = Base_Int32[95],
    uniform$0 = Splittable_random[4],
    log_uniform$0 = Splittable_random[10][2],
    For_int32 =
      For_integer
       ([0,
         t_sexp_grammar$0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         of_string$0,
         to_string$0,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         symbol$11,
         equal$0,
         compare$0,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$0,
         pp$0,
         hashable$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         invariant$0,
         Hex$0,
         to_string_hum$0,
         zero$0,
         one$0,
         minus_one$0,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         neg,
         symbol$16,
         symbol$17,
         symbol$18,
         symbol$19,
         rem$0,
         symbol$20,
         land,
         lor,
         lxor,
         lnot$0,
         lsl,
         asr,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         succ$0,
         pred$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$0,
         shift_left$0,
         shift_right$0,
         decr$0,
         incr$0,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$0,
         max_value$0,
         min_value$0,
         lsr,
         shift_right_logical$0,
         ceil_pow2$0,
         floor_pow2$0,
         ceil_log2$0,
         floor_log2$0,
         is_pow2$0,
         clz$0,
         ctz$0,
         O$0,
         uniform$0,
         log_uniform$0]),
    int32 = For_int32[7],
    int32_uniform = For_int32[6],
    int32_inclusive = For_int32[4],
    int32_uniform_inclusive = For_int32[1],
    int32_log_inclusive = For_int32[5],
    int32_log_uniform_inclusive = For_int32[2],
    t_sexp_grammar$1 = Base_Int63[1],
    of_float$1 = Base_Int63[2],
    to_float$1 = Base_Int63[3],
    of_int_exn$1 = Base_Int63[4],
    to_int_exn$1 = Base_Int63[5],
    hash_fold_t$1 = Base_Int63[6],
    hash$1 = Base_Int63[7],
    t_of_sexp$1 = Base_Int63[8],
    sexp_of_t$1 = Base_Int63[9],
    of_string$1 = Base_Int63[10],
    to_string$1 = Base_Int63[11],
    symbol$21 = Base_Int63[12],
    symbol$22 = Base_Int63[13],
    symbol$23 = Base_Int63[14],
    symbol$24 = Base_Int63[15],
    symbol$25 = Base_Int63[16],
    symbol$26 = Base_Int63[17],
    equal$1 = Base_Int63[18],
    compare$1 = Base_Int63[19],
    min$1 = Base_Int63[20],
    max$1 = Base_Int63[21],
    ascending$1 = Base_Int63[22],
    descending$1 = Base_Int63[23],
    between$1 = Base_Int63[24],
    clamp_exn$1 = Base_Int63[25],
    clamp$1 = Base_Int63[26],
    comparator$1 = Base_Int63[27],
    pp$1 = Base_Int63[28],
    hashable$1 = Base_Int63[29],
    is_positive$1 = Base_Int63[30],
    is_non_negative$1 = Base_Int63[31],
    is_negative$1 = Base_Int63[32],
    is_non_positive$1 = Base_Int63[33],
    sign$1 = Base_Int63[34],
    invariant$1 = Base_Int63[35],
    Hex$1 = Base_Int63[36],
    to_string_hum$1 = Base_Int63[37],
    zero$1 = Base_Int63[38],
    one$1 = Base_Int63[39],
    minus_one$1 = Base_Int63[40],
    symbol$27 = Base_Int63[41],
    symbol$28 = Base_Int63[42],
    symbol$29 = Base_Int63[43],
    symbol$30 = Base_Int63[44],
    neg$0 = Base_Int63[45],
    symbol$31 = Base_Int63[46],
    symbol$32 = Base_Int63[47],
    symbol$33 = Base_Int63[48],
    symbol$34 = Base_Int63[49],
    rem$1 = Base_Int63[50],
    symbol$35 = Base_Int63[51],
    land$0 = Base_Int63[52],
    lor$0 = Base_Int63[53],
    lxor$0 = Base_Int63[54],
    lnot$1 = Base_Int63[55],
    lsl$0 = Base_Int63[56],
    asr$0 = Base_Int63[57],
    round$1 = Base_Int63[58],
    round_towards_zero$1 = Base_Int63[59],
    round_down$1 = Base_Int63[60],
    round_up$1 = Base_Int63[61],
    round_nearest$1 = Base_Int63[62],
    abs$1 = Base_Int63[63],
    succ$1 = Base_Int63[64],
    pred$1 = Base_Int63[65],
    pow$1 = Base_Int63[66],
    bit_and$1 = Base_Int63[67],
    bit_or$1 = Base_Int63[68],
    bit_xor$1 = Base_Int63[69],
    bit_not$1 = Base_Int63[70],
    popcount$1 = Base_Int63[71],
    shift_left$1 = Base_Int63[72],
    shift_right$1 = Base_Int63[73],
    decr$1 = Base_Int63[74],
    incr$1 = Base_Int63[75],
    of_int32_exn$1 = Base_Int63[76],
    to_int32_exn$1 = Base_Int63[77],
    of_int64_exn$1 = Base_Int63[78],
    to_int64$1 = Base_Int63[79],
    of_nativeint_exn$1 = Base_Int63[80],
    to_nativeint_exn$1 = Base_Int63[81],
    of_float_unchecked$1 = Base_Int63[82],
    num_bits$1 = Base_Int63[83],
    max_value$1 = Base_Int63[84],
    min_value$1 = Base_Int63[85],
    lsr$0 = Base_Int63[86],
    shift_right_logical$1 = Base_Int63[87],
    ceil_pow2$1 = Base_Int63[88],
    floor_pow2$1 = Base_Int63[89],
    ceil_log2$1 = Base_Int63[90],
    is_pow2$1 = Base_Int63[91],
    clz$1 = Base_Int63[92],
    ctz$1 = Base_Int63[93],
    O$1 = Base_Int63[94],
    floor_log2$1 = Base_Int63[113],
    uniform$1 = Splittable_random[5],
    log_uniform$1 = Splittable_random[10][3],
    For_int63 =
      For_integer
       ([0,
         t_sexp_grammar$1,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$1,
         sexp_of_t$1,
         of_string$1,
         to_string$1,
         symbol$21,
         symbol$22,
         symbol$23,
         symbol$24,
         symbol$25,
         symbol$26,
         equal$1,
         compare$1,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         pp$1,
         hashable$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         invariant$1,
         Hex$1,
         to_string_hum$1,
         zero$1,
         one$1,
         minus_one$1,
         symbol$27,
         symbol$28,
         symbol$29,
         symbol$30,
         neg$0,
         symbol$31,
         symbol$32,
         symbol$33,
         symbol$34,
         rem$1,
         symbol$35,
         land$0,
         lor$0,
         lxor$0,
         lnot$1,
         lsl$0,
         asr$0,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         succ$1,
         pred$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$1,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$1,
         max_value$1,
         min_value$1,
         lsr$0,
         shift_right_logical$1,
         ceil_pow2$1,
         floor_pow2$1,
         ceil_log2$1,
         floor_log2$1,
         is_pow2$1,
         clz$1,
         ctz$1,
         O$1,
         uniform$1,
         log_uniform$1]),
    int63 = For_int63[7],
    int63_uniform = For_int63[6],
    int63_inclusive = For_int63[4],
    int63_uniform_inclusive = For_int63[1],
    int63_log_inclusive = For_int63[5],
    int63_log_uniform_inclusive = For_int63[2],
    t_sexp_grammar$2 = Base_Int64[1],
    of_float$2 = Base_Int64[2],
    to_float$2 = Base_Int64[3],
    of_int_exn$2 = Base_Int64[4],
    to_int_exn$2 = Base_Int64[5],
    hash_fold_t$2 = Base_Int64[6],
    hash$2 = Base_Int64[7],
    t_of_sexp$2 = Base_Int64[8],
    sexp_of_t$2 = Base_Int64[9],
    of_string$2 = Base_Int64[10],
    to_string$2 = Base_Int64[11],
    equal$2 = Base_Int64[12],
    compare$2 = Base_Int64[13],
    min$2 = Base_Int64[14],
    max$2 = Base_Int64[15],
    ascending$2 = Base_Int64[16],
    descending$2 = Base_Int64[17],
    between$2 = Base_Int64[18],
    clamp_exn$2 = Base_Int64[19],
    clamp$2 = Base_Int64[20],
    comparator$2 = Base_Int64[21],
    pp$2 = Base_Int64[22],
    hashable$2 = Base_Int64[23],
    is_positive$2 = Base_Int64[24],
    is_non_negative$2 = Base_Int64[25],
    is_negative$2 = Base_Int64[26],
    is_non_positive$2 = Base_Int64[27],
    sign$2 = Base_Int64[28],
    invariant$2 = Base_Int64[29],
    Hex$2 = Base_Int64[30],
    to_string_hum$2 = Base_Int64[31],
    one$2 = Base_Int64[32],
    minus_one$2 = Base_Int64[33],
    rem$2 = Base_Int64[34],
    round$2 = Base_Int64[35],
    round_towards_zero$2 = Base_Int64[36],
    round_down$2 = Base_Int64[37],
    round_up$2 = Base_Int64[38],
    round_nearest$2 = Base_Int64[39],
    succ$2 = Base_Int64[40],
    pred$2 = Base_Int64[41],
    pow$2 = Base_Int64[42],
    bit_and$2 = Base_Int64[43],
    bit_or$2 = Base_Int64[44],
    bit_xor$2 = Base_Int64[45],
    bit_not$2 = Base_Int64[46],
    popcount$2 = Base_Int64[47],
    shift_left$2 = Base_Int64[48],
    shift_right$2 = Base_Int64[49],
    decr$2 = Base_Int64[50],
    incr$2 = Base_Int64[51],
    of_int32_exn$2 = Base_Int64[52],
    to_int32_exn$2 = Base_Int64[53],
    of_int64_exn$2 = Base_Int64[54],
    to_int64$2 = Base_Int64[55],
    of_nativeint_exn$2 = Base_Int64[56],
    to_nativeint_exn$2 = Base_Int64[57],
    of_float_unchecked$2 = Base_Int64[58],
    num_bits$2 = Base_Int64[59],
    max_value$2 = Base_Int64[60],
    min_value$2 = Base_Int64[61],
    shift_right_logical$2 = Base_Int64[62],
    ceil_pow2$2 = Base_Int64[63],
    floor_pow2$2 = Base_Int64[64],
    ceil_log2$2 = Base_Int64[65],
    floor_log2$2 = Base_Int64[66],
    is_pow2$2 = Base_Int64[67],
    clz$2 = Base_Int64[68],
    ctz$2 = Base_Int64[69],
    O$2 = Base_Int64[70],
    symbol$36 = Base_Int64[71],
    lnot$2 = Base_Int64[72],
    abs$2 = Base_Int64[73],
    zero$2 = Base_Int64[74],
    symbol$37 = Base_Int64[75],
    symbol$38 = Base_Int64[76],
    symbol$39 = Base_Int64[77],
    uniform$2 = Splittable_random[6],
    log_uniform$2 = Splittable_random[10][4],
    For_int64 =
      For_integer
       ([0,
         t_sexp_grammar$2,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$2,
         sexp_of_t$2,
         of_string$2,
         to_string$2,
         caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         caml_notequal,
         equal$2,
         compare$2,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$2,
         pp$2,
         hashable$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         invariant$2,
         Hex$2,
         to_string_hum$2,
         zero$2,
         one$2,
         minus_one$2,
         caml_int64_add,
         caml_int64_sub,
         caml_int64_mul,
         symbol$36,
         caml_int64_neg,
         caml_int64_neg,
         symbol$38,
         symbol$37,
         caml_int64_div,
         rem$2,
         symbol$39,
         caml_int64_and,
         caml_int64_or,
         caml_int64_xor,
         lnot$2,
         caml_int64_shift_left,
         caml_int64_shift_right,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         succ$2,
         pred$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$2,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$2,
         max_value$2,
         min_value$2,
         caml_int64_shift_right_unsigne,
         shift_right_logical$2,
         ceil_pow2$2,
         floor_pow2$2,
         ceil_log2$2,
         floor_log2$2,
         is_pow2$2,
         clz$2,
         ctz$2,
         [0,
          caml_int64_add,
          caml_int64_sub,
          caml_int64_mul,
          caml_int64_div,
          caml_int64_neg,
          O$2[1],
          caml_greaterequal,
          caml_lessequal,
          caml_equal,
          caml_greaterthan,
          caml_lessthan,
          caml_notequal,
          O$2[3],
          caml_int64_neg,
          O$2[4],
          O$2[5],
          O$2[6],
          O$2[7],
          caml_int64_and,
          caml_int64_or,
          caml_int64_xor,
          O$2[2],
          caml_int64_shift_left,
          caml_int64_shift_right,
          caml_int64_shift_right_unsigne],
         uniform$2,
         log_uniform$2]),
    int64 = For_int64[7],
    int64_uniform = For_int64[6],
    int64_inclusive = For_int64[4],
    int64_uniform_inclusive = For_int64[1],
    int64_log_inclusive = For_int64[5],
    int64_log_uniform_inclusive = For_int64[2],
    t_sexp_grammar$3 = Base_Nativeint[1],
    of_float$3 = Base_Nativeint[2],
    to_float$3 = Base_Nativeint[3],
    of_int_exn$3 = Base_Nativeint[4],
    to_int_exn$3 = Base_Nativeint[5],
    hash_fold_t$3 = Base_Nativeint[6],
    hash$3 = Base_Nativeint[7],
    t_of_sexp$3 = Base_Nativeint[8],
    sexp_of_t$3 = Base_Nativeint[9],
    of_string$3 = Base_Nativeint[10],
    to_string$3 = Base_Nativeint[11],
    symbol$40 = Base_Nativeint[12],
    symbol$41 = Base_Nativeint[13],
    symbol$42 = Base_Nativeint[14],
    symbol$43 = Base_Nativeint[15],
    symbol$44 = Base_Nativeint[16],
    symbol$45 = Base_Nativeint[17],
    equal$3 = Base_Nativeint[18],
    compare$3 = Base_Nativeint[19],
    min$3 = Base_Nativeint[20],
    max$3 = Base_Nativeint[21],
    ascending$3 = Base_Nativeint[22],
    descending$3 = Base_Nativeint[23],
    between$3 = Base_Nativeint[24],
    clamp_exn$3 = Base_Nativeint[25],
    clamp$3 = Base_Nativeint[26],
    comparator$3 = Base_Nativeint[27],
    pp$3 = Base_Nativeint[28],
    hashable$3 = Base_Nativeint[29],
    is_positive$3 = Base_Nativeint[30],
    is_non_negative$3 = Base_Nativeint[31],
    is_negative$3 = Base_Nativeint[32],
    is_non_positive$3 = Base_Nativeint[33],
    sign$3 = Base_Nativeint[34],
    invariant$3 = Base_Nativeint[35],
    Hex$3 = Base_Nativeint[36],
    to_string_hum$3 = Base_Nativeint[37],
    zero$3 = Base_Nativeint[38],
    one$3 = Base_Nativeint[39],
    minus_one$3 = Base_Nativeint[40],
    symbol$46 = Base_Nativeint[41],
    symbol$47 = Base_Nativeint[42],
    symbol$48 = Base_Nativeint[43],
    symbol$49 = Base_Nativeint[44],
    neg$1 = Base_Nativeint[45],
    symbol$50 = Base_Nativeint[46],
    symbol$51 = Base_Nativeint[47],
    symbol$52 = Base_Nativeint[48],
    symbol$53 = Base_Nativeint[49],
    rem$3 = Base_Nativeint[50],
    symbol$54 = Base_Nativeint[51],
    land$1 = Base_Nativeint[52],
    lor$1 = Base_Nativeint[53],
    lxor$1 = Base_Nativeint[54],
    lnot$3 = Base_Nativeint[55],
    lsl$1 = Base_Nativeint[56],
    asr$1 = Base_Nativeint[57],
    round$3 = Base_Nativeint[58],
    round_towards_zero$3 = Base_Nativeint[59],
    round_down$3 = Base_Nativeint[60],
    round_up$3 = Base_Nativeint[61],
    round_nearest$3 = Base_Nativeint[62],
    abs$3 = Base_Nativeint[63],
    succ$3 = Base_Nativeint[64],
    pred$3 = Base_Nativeint[65],
    pow$3 = Base_Nativeint[66],
    bit_and$3 = Base_Nativeint[67],
    bit_or$3 = Base_Nativeint[68],
    bit_xor$3 = Base_Nativeint[69],
    bit_not$3 = Base_Nativeint[70],
    popcount$3 = Base_Nativeint[71],
    shift_left$3 = Base_Nativeint[72],
    shift_right$3 = Base_Nativeint[73],
    decr$3 = Base_Nativeint[74],
    incr$3 = Base_Nativeint[75],
    of_int32_exn$3 = Base_Nativeint[76],
    to_int32_exn$3 = Base_Nativeint[77],
    of_int64_exn$3 = Base_Nativeint[78],
    to_int64$3 = Base_Nativeint[79],
    of_nativeint_exn$3 = Base_Nativeint[80],
    to_nativeint_exn$3 = Base_Nativeint[81],
    of_float_unchecked$3 = Base_Nativeint[82],
    num_bits$3 = Base_Nativeint[83],
    max_value$3 = Base_Nativeint[84],
    min_value$3 = Base_Nativeint[85],
    lsr$1 = Base_Nativeint[86],
    shift_right_logical$3 = Base_Nativeint[87],
    ceil_pow2$3 = Base_Nativeint[88],
    floor_pow2$3 = Base_Nativeint[89],
    ceil_log2$3 = Base_Nativeint[90],
    floor_log2$3 = Base_Nativeint[91],
    is_pow2$3 = Base_Nativeint[92],
    clz$3 = Base_Nativeint[93],
    ctz$3 = Base_Nativeint[94],
    O$3 = Base_Nativeint[95],
    uniform$3 = Splittable_random[7],
    log_uniform$3 = Splittable_random[10][5],
    For_nativeint =
      For_integer
       ([0,
         t_sexp_grammar$3,
         of_float$3,
         to_float$3,
         of_int_exn$3,
         to_int_exn$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$3,
         sexp_of_t$3,
         of_string$3,
         to_string$3,
         symbol$40,
         symbol$41,
         symbol$42,
         symbol$43,
         symbol$44,
         symbol$45,
         equal$3,
         compare$3,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$3,
         pp$3,
         hashable$3,
         is_positive$3,
         is_non_negative$3,
         is_negative$3,
         is_non_positive$3,
         sign$3,
         invariant$3,
         Hex$3,
         to_string_hum$3,
         zero$3,
         one$3,
         minus_one$3,
         symbol$46,
         symbol$47,
         symbol$48,
         symbol$49,
         neg$1,
         symbol$50,
         symbol$51,
         symbol$52,
         symbol$53,
         rem$3,
         symbol$54,
         land$1,
         lor$1,
         lxor$1,
         lnot$3,
         lsl$1,
         asr$1,
         round$3,
         round_towards_zero$3,
         round_down$3,
         round_up$3,
         round_nearest$3,
         abs$3,
         succ$3,
         pred$3,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$3,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$3,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$3,
         max_value$3,
         min_value$3,
         lsr$1,
         shift_right_logical$3,
         ceil_pow2$3,
         floor_pow2$3,
         ceil_log2$3,
         floor_log2$3,
         is_pow2$3,
         clz$3,
         ctz$3,
         O$3,
         uniform$3,
         log_uniform$3]),
    nativeint = For_nativeint[7],
    nativeint_uniform = For_nativeint[6],
    nativeint_inclusive = For_nativeint[4],
    nativeint_uniform_inclusive = For_nativeint[1],
    nativeint_log_inclusive = For_nativeint[5],
    nativeint_log_uniform_inclusiv = For_nativeint[2],
    float_zero_exponent = caml_call1(Base_Float[121], 0.),
    float_zero_mantissa = caml_call1(Base_Float[122], 0.),
    float_max_positive_subnormal_v =
      caml_call2(Base_Float[51], 759637122, Base_Float[47]),
    float_subnormal_exponent = caml_call1(Base_Float[121], Base_Float[46]),
    float_min_subnormal_mantissa = caml_call1(Base_Float[122], Base_Float[46]),
    float_max_subnormal_mantissa =
      caml_call1(Base_Float[122], float_max_positive_subnormal_v),
    float_max_positive_normal_valu = Base_Float[45],
    float_min_normal_exponent = caml_call1(Base_Float[121], Base_Float[47]),
    float_max_normal_exponent =
      caml_call1(Base_Float[121], float_max_positive_normal_valu),
    float_max_normal_mantissa =
      caml_call1(Base_Float[122], float_max_positive_normal_valu),
    float_inf_exponent = caml_call1(Base_Float[121], Base_Float[33]),
    float_inf_mantissa = caml_call1(Base_Float[122], Base_Float[33]),
    float_nan_exponent = caml_call1(Base_Float[121], Base_Float[32]),
    float_min_nan_mantissa = caml_call1(Base_Int63[64], float_inf_mantissa),
    float_num_mantissa_bits = 52;
   function _Z_(num_bits){
    function _bp_(bits){
     return caml_call2(Base_Int63[72], bits, 52 - num_bits | 0);
    }
    var
     _bq_ = caml_call2(Base_Int63[72], Base_Int63[39], num_bits),
     _br_ = caml_call1(Base_Int63[65], _bq_),
     _bs_ = caml_call2(For_int63[4], Base_Int63[38], _br_);
    return caml_call2(For_monad[11][4][3], _bs_, _bp_);
   }
   var
    ___ = caml_call2(For_int[1], 0, float_num_mantissa_bits),
    float_normal_mantissa = caml_call2(For_monad[11][4][2], ___, _Z_),
    lower_bound = caml_call1(Base_Float[121], 1.),
    _ad_ = 0;
   function _$_(offset){return lower_bound + offset | 0;}
   var
    _aa_ =
      caml_call2(For_int[5], 0, float_max_normal_exponent - lower_bound | 0),
    _ae_ = [0, caml_call2(For_monad[11][4][3], _aa_, _$_), _ad_];
   function _ab_(offset){return lower_bound - offset | 0;}
   var
    _ac_ =
      caml_call2(For_int[5], 0, lower_bound - float_min_normal_exponent | 0),
    float_exponent =
      union([0, caml_call2(For_monad[11][4][3], _ac_, _ab_), _ae_]);
   function _af_(negative){
    return caml_call3
            (Base_Float[119],
             negative,
             float_zero_exponent,
             float_zero_mantissa);
   }
   var
    float_zero = caml_call2(For_monad[11][4][3], bool, _af_),
    let_syntax_012 = caml_call1(For_monad[11][1], float_subnormal_exponent),
    let_syntax_013 =
      caml_call2
       (For_int63[5],
        float_min_subnormal_mantissa,
        float_max_subnormal_mantissa);
   function _ag_(param){
    var
     match = param[2],
     mantissa = match[2],
     exponent = match[1],
     negative = param[1];
    return caml_call3(Base_Float[119], negative, exponent, mantissa);
   }
   var
    _ah_ = caml_call2(For_monad[11][4][4], let_syntax_012, let_syntax_013),
    _ai_ = caml_call2(For_monad[11][4][4], bool, _ah_),
    float_subnormal = caml_call2(For_monad[11][4][3], _ai_, _ag_);
   function _aj_(param){
    var
     match = param[2],
     mantissa = match[2],
     exponent = match[1],
     negative = param[1];
    return caml_call3(Base_Float[119], negative, exponent, mantissa);
   }
   var
    _ak_ =
      caml_call2(For_monad[11][4][4], float_exponent, float_normal_mantissa),
    _al_ = caml_call2(For_monad[11][4][4], bool, _ak_),
    float_normal = caml_call2(For_monad[11][4][3], _al_, _aj_);
   function _am_(negative){
    return caml_call3
            (Base_Float[119],
             negative,
             float_inf_exponent,
             float_inf_mantissa);
   }
   var
    float_infinite = caml_call2(For_monad[11][4][3], bool, _am_),
    let_syntax_021 = caml_call1(For_monad[11][1], float_nan_exponent),
    let_syntax_022 =
      caml_call2
       (For_int63[4], float_min_nan_mantissa, float_max_normal_mantissa);
   function _an_(param){
    var
     match = param[2],
     mantissa = match[2],
     exponent = match[1],
     negative = param[1];
    return caml_call3(Base_Float[119], negative, exponent, mantissa);
   }
   var
    _ao_ = caml_call2(For_monad[11][4][4], let_syntax_021, let_syntax_022),
    _ap_ = caml_call2(For_monad[11][4][4], bool, _ao_),
    float_nan = caml_call2(For_monad[11][4][3], _ap_, _an_);
   function float_of_class(c){
    switch(c){
      case 0:
       return float_infinite;
      case 1:
       return float_nan;
      case 2:
       return float_normal;
      case 3:
       return float_subnormal;
      default: return float_zero;
    }
   }
   function float_matching_classes(filter){
    function _bm_(c){
     if(! caml_call1(filter, c)) return 0;
     var _bn_ = float_of_class(c);
     switch(c){
       case 0:
        var _bo_ = 1.; break;
       case 1:
        var _bo_ = 1.; break;
       case 2:
        var _bo_ = 100.; break;
       case 3:
        var _bo_ = 10.; break;
       default: var _bo_ = 1.;
     }
     return [0, [0, _bo_, _bn_]];
    }
    return weighted_union
            (caml_call2(Base_List[126], Base_Float[113][2], _bm_));
   }
   var
    float_finite =
      float_matching_classes(function(param){return 2 <= param ? 1 : 0;}),
    float_without_nan =
      float_matching_classes(function(param){return 1 === param ? 0 : 1;}),
    float$0 = float_matching_classes(function(param){return 1;}),
    float_finite_non_zero =
      float_matching_classes
       (function(param){return 1 < param - 2 >>> 0 ? 0 : 1;});
   function _aq_(t){return caml_call1(Base_Float[102], t);}
   var
    float_strictly_positive =
      caml_call2(For_monad[11][4][3], float_finite_non_zero, _aq_);
   function _ar_(t){
    var _bl_ = caml_call1(Base_Float[102], t);
    return caml_call1(Base[196], _bl_);
   }
   var
    float_strictly_negative =
      caml_call2(For_monad[11][4][3], float_finite_non_zero, _ar_);
   function _as_(t){return caml_call1(Base_Float[102], t);}
   var
    float_positive_or_zero =
      caml_call2(For_monad[11][4][3], float_finite, _as_);
   function _at_(t){
    var _bk_ = caml_call1(Base_Float[102], t);
    return caml_call1(Base[196], _bk_);
   }
   var
    float_negative_or_zero =
      caml_call2(For_monad[11][4][3], float_finite, _at_);
   function float_uniform_exclusive(lower_bound, upper_bound){
    var
     _bc_ = 1 - caml_call1(Base_Float[84], lower_bound),
     _bd_ = _bc_ || 1 - caml_call1(Base_Float[84], upper_bound);
    if(_bd_){
     var
      _be_ =
        [0, [1, [0, _au_, [0, caml_call1(Base[112], upper_bound), 0]]], 0],
      _bf_ =
        [0, [1, [0, _av_, [0, caml_call1(Base[112], lower_bound), 0]]], _be_],
      _bg_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Float_uniform_exclusive_bo),
          _bf_]];
     caml_call1(Base[202], _bg_);
    }
    var
     lower_inclusive = caml_call2(Base_Float[51], 19067, lower_bound),
     upper_inclusive = caml_call2(Base_Float[51], 759637122, upper_bound);
    if(caml_call2(Base_Float[103][11], lower_inclusive, upper_inclusive)){
     var
      _bh_ =
        [0, [1, [0, _aw_, [0, caml_call1(Base[112], upper_bound), 0]]], 0],
      _bi_ =
        [0, [1, [0, _ax_, [0, caml_call1(Base[112], lower_bound), 0]]], _bh_],
      _bj_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Float_uniform_exclusive_re),
          _bi_]];
     caml_call1(Base[202], _bj_);
    }
    return create
            (function(param, random){
              return caml_call3
                      (Splittable_random[8],
                       random,
                       lower_inclusive,
                       upper_inclusive);
             });
   }
   function float_inclusive(lower_bound, upper_bound){
    if(caml_call2(Base_Float[15], lower_bound, upper_bound))
     return caml_call1(For_monad[11][1], lower_bound);
    var _a__ = caml_call2(Base_Float[51], 19067, lower_bound);
    if(caml_call2(Base_Float[11], _a__, upper_bound)){
     var _a$_ = [0, caml_call1(For_monad[11][1], upper_bound), 0];
     return union([0, caml_call1(For_monad[11][1], lower_bound), _a$_]);
    }
    var
     _ba_ =
       [0, [0, 0.9, float_uniform_exclusive(lower_bound, upper_bound)], 0],
     _bb_ = [0, [0, 0.05, caml_call1(For_monad[11][1], upper_bound)], _ba_];
    return weighted_union
            ([0, [0, 0.05, caml_call1(For_monad[11][1], lower_bound)], _bb_]);
   }
   function string_with_length_of(char_gen, length){
    var _a9_ = list_with_length(char_gen, length);
    return map(_a9_, Base_String[123]);
   }
   function string_of(char_gen){
    return bind
            (small_positive_or_zero_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   function string_non_empty_of(char_gen){
    return bind
            (small_strictly_positive_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   var
    string = string_of(char$0),
    string_non_empty = string_non_empty_of(char$0);
   function string_with_length(length){
    return string_with_length_of(char$0, length);
   }
   var bytes = map(string, Base_Bytes[25]);
   function sexp_of(atom){
    return fixed_point
            (function(self){
              function _a3_(size){
               function _a4_(param){
                if(0 === param){
                 var _a6_ = function(atom){return [0, atom];};
                 return caml_call2(For_monad[11][4][3], atom, _a6_);
                }
                function _a7_(list){return [1, list];}
                var _a8_ = list(self);
                return caml_call2(For_monad[11][4][3], _a8_, _a7_);
               }
               var _a5_ = caml_call2(For_int[2], 0, size + 1 | 0);
               return caml_call2(For_monad[11][4][2], _a5_, _a4_);
              }
              return caml_call2(For_monad[11][4][2], size, _a3_);
             });
   }
   var sexp = sexp_of(string);
   function map_tree_using_comparator(comparator, key_gen, data_gen){
    function _aX_(keys){
     var keys$0 = caml_call2(Base_List[114], keys, comparator[1]);
     function _aZ_(data){
      var
       _a1_ = caml_call2(Base_List[95], keys$0, data),
       _a2_ = caml_call2(Base_Map[104][3][9], comparator, _a1_);
      return caml_call1(For_monad[11][1], _a2_);
     }
     var _a0_ = list_with_length(data_gen, caml_call1(Base_List[7], keys$0));
     return caml_call2(For_monad[11][4][2], _a0_, _aZ_);
    }
    var _aY_ = list(key_gen);
    return caml_call2(For_monad[11][4][2], _aY_, _aX_);
   }
   function set_tree_using_comparator(comparator, elt_gen){
    var _aW_ = caml_call1(Base_Set[74][3][54], comparator);
    return map(list(elt_gen), _aW_);
   }
   function map_t_m(m, key_gen, data_gen){
    var
     comparator = m[1],
     _aV_ = map_tree_using_comparator(comparator, key_gen, data_gen);
    return map(_aV_, caml_call1(Base_Map[104][95], comparator));
   }
   function set_t_m(m, elt_gen){
    var
     comparator = m[1],
     _aU_ = set_tree_using_comparator(comparator, elt_gen);
    return map(_aU_, caml_call1(Base_Set[74][64], comparator));
   }
   function bigarray1(t, kind, layout){
    function _aQ_(elts){
     var
      elts$0 = caml_call1(Base_Array[39], elts),
      dim = elts$0.length - 1,
      offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
     function _aS_(i){
      var _aT_ = i - offset | 0;
      return caml_check_bound(elts$0, _aT_)[1 + _aT_];
     }
     return caml_call4
             (Base_quickcheck_Bigarray_helpe[2][2], kind, layout, dim, _aS_);
    }
    var _aR_ = list(t);
    return caml_call2(For_monad[11][4][3], _aR_, _aQ_);
   }
   var
    bigstring = bigarray1(char$0, 12, 0),
    float32_vec = bigarray1(float$0, 0, 1),
    float64_vec = bigarray1(float$0, 1, 1);
   function _ay_(max_total_size){
    if(0 === max_total_size) return caml_call1(For_monad[11][1], _az_);
    function _aJ_(a){
     function _aL_(b){
      function _aP_(param){return param ? [0, a, b] : [0, b, a];}
      return caml_call2(For_monad[11][4][3], bool, _aP_);
     }
     var max_b = caml_div(max_total_size, a);
     function _aM_(b_weighted_low){return max_b - b_weighted_low | 0;}
     var
      _aN_ = caml_call2(int_log_uniform_inclusive, 0, max_b),
      _aO_ = caml_call2(For_monad[11][4][3], _aN_, _aM_);
     return caml_call2(For_monad[11][4][2], _aO_, _aL_);
    }
    var _aK_ = caml_call2(int_log_uniform_inclusive, 1, max_total_size);
    return caml_call2(For_monad[11][4][2], _aK_, _aJ_);
   }
   var bigarray2_dim = caml_call2(For_monad[11][4][2], size, _ay_);
   function bigarray2(t, kind, layout){
    function _aD_(param){
     var dim2 = param[2], dim1 = param[1];
     function _aE_(elts){
      var
       elts$0 = caml_call2(Base_Array[78], elts, Base_Array[39]),
       offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
      function _aG_(i, j){
       var _aH_ = j - offset | 0, _aI_ = i - offset | 0;
       return caml_check_bound(caml_check_bound(elts$0, _aI_)[1 + _aI_], _aH_)
               [1 + _aH_];
      }
      return caml_call5
              (Base_quickcheck_Bigarray_helpe[3][2],
               kind,
               layout,
               dim1,
               dim2,
               _aG_);
     }
     var _aF_ = list_with_length(list_with_length(t, dim2), dim1);
     return caml_call2(For_monad[11][4][3], _aF_, _aE_);
    }
    return caml_call2(For_monad[11][4][2], bigarray2_dim, _aD_);
   }
   var
    float32_mat = bigarray2(float$0, 0, 1),
    float64_mat = bigarray2(float$0, 1, 1);
   function coverage(Cmp){
    return function(sample){
     function _aA_(counts, value){
      function _aC_(param){
       if(! param) return 1;
       var prev = param[1];
       return prev + 1 | 0;
      }
      return caml_call3(Base_Map[35], counts, value, _aC_);
     }
     var _aB_ = caml_call1(Base_Map[6], Cmp);
     return caml_call3(Base_Sequence[8], sample, _aB_, _aA_);};
   }
   function monitor(t, f){
    return map(t, function(value){caml_call1(f, value); return value;});
   }
   var
    Debug = [0, coverage, monitor],
    Base_quickcheck_Generator =
      [0,
       unit,
       bool,
       char$0,
       string,
       bytes,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t_m,
       set_t_m,
       map_tree_using_comparator,
       set_tree_using_comparator,
       of_list,
       union,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply,
       map2,
       map3,
       For_applicative[13],
       symbol_bind,
       symbol_map,
       For_monad[3],
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       For_monad[11],
       size,
       with_size,
       sizes,
       filter,
       filter_map,
       recursive_union,
       fixed_point,
       of_lazy,
       of_weighted_list,
       weighted_union,
       weighted_recursive_union,
       small_positive_or_zero_int,
       small_strictly_positive_int,
       int_uniform,
       int32_uniform,
       int63_uniform,
       int64_uniform,
       nativeint_uniform,
       int_inclusive,
       int32_inclusive,
       int63_inclusive,
       int64_inclusive,
       nativeint_inclusive,
       int_uniform_inclusive,
       int32_uniform_inclusive,
       int63_uniform_inclusive,
       int64_uniform_inclusive,
       nativeint_uniform_inclusive,
       int_log_uniform_inclusive,
       int32_log_uniform_inclusive,
       int63_log_uniform_inclusive,
       int64_log_uniform_inclusive,
       nativeint_log_uniform_inclusiv,
       int_log_inclusive,
       int32_log_inclusive,
       int63_log_inclusive,
       int64_log_inclusive,
       nativeint_log_inclusive,
       float_inclusive,
       float_uniform_exclusive,
       float_without_nan,
       float_finite,
       float_strictly_positive,
       float_strictly_negative,
       float_positive_or_zero,
       float_negative_or_zero,
       float_of_class,
       char_lowercase,
       char_uppercase,
       char_digit,
       char_alpha,
       char_alphanum,
       char_whitespace,
       char_print,
       char_uniform_inclusive,
       string_non_empty,
       string_with_length,
       string_of,
       string_non_empty_of,
       string_with_length_of,
       sexp_of,
       list_non_empty,
       list_with_length,
       list_filtered,
       list_permutations,
       perturb,
       create,
       generate,
       Debug];
   runtime.caml_register_global
    (79, Base_quickcheck_Generator, "Base_quickcheck__Generator");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Shrinker
//# unitInfo: Requires: Base__Array, Base__Bytes, Base__Either, Base__Field, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Option, Base__Sequence, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, CamlinternalLazy, Stdlib__Bigarray
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_layout = runtime.caml_ba_layout,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_List = global_data.Base__List,
    Base_Either = global_data.Base__Either,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Lazy = global_data.Base__Lazy,
    Base_Array = global_data.Base__Array,
    Base_Option = global_data.Base__Option,
    Base_Field = global_data.Base__Field,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Int = global_data.Base__Int,
    Base_String = global_data.Base__String,
    Base_Bytes = global_data.Base__Bytes,
    cst_dim2 = "dim2",
    cst_dim1 = "dim1";
   function atomic(param){return Base_Sequence[38];}
   function create(_ax_){return _ax_;}
   function shrink(_aw_){return _aw_;}
   function map(t, f, f_inverse){
    return function(x){
     var _av_ = caml_call1(t, caml_call1(f_inverse, x));
     return caml_call2(Base_Sequence[32], _av_, f);};
   }
   function filter(t, f){
    return function(x){
     var _au_ = caml_call1(t, x);
     return caml_call2(Base_Sequence[51], _au_, f);};
   }
   function filter_map(t, f, f_inverse){
    return function(x){
     var _at_ = caml_call1(t, caml_call1(f_inverse, x));
     return caml_call2(Base_Sequence[78], _at_, f);};
   }
   function of_lazy(lazy_t){
    return function(x){
     var
      _ap_ =
        [246,
         function(_aq_){
          var
           _ar_ = caml_obj_tag(lazy_t),
           _as_ =
             250 === _ar_
              ? lazy_t[1]
              : 246
                === _ar_
                ? caml_call1(CamlinternalLazy[2], lazy_t)
                : lazy_t;
          return caml_call1(_as_, x);
         }];
     return caml_call1(Base_Sequence[105], _ap_);};
   }
   function fixed_point(of_shrinker){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(of_shrinker, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   function both(fst_t, snd_t){
    return function(param){
     var snd = param[2], fst = param[1], _ai_ = 0;
     function _aj_(snd){return [0, fst, snd];}
     var
      _ak_ = caml_call1(snd_t, snd),
      _al_ = [0, caml_call2(Base_Sequence[32], _ak_, _aj_), _ai_];
     function _am_(fst){return [0, fst, snd];}
     var
      _an_ = caml_call1(fst_t, fst),
      _ao_ = [0, caml_call2(Base_Sequence[32], _an_, _am_), _al_];
     return caml_call1(Base_Sequence[68], _ao_);};
   }
   function float32_vec(src){
    var dim = caml_ba_dim_1(src);
    if(0 === dim) return Base_Sequence[38];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
    function _ag_(to_skip){
     var to_skip$0 = to_skip + offset | 0;
     function _ah_(i){
      var i$0 = i < to_skip$0 ? i : i + 1 | 0;
      return runtime.caml_ba_get_1(src, i$0);
     }
     return caml_call4
             (Base_quickcheck_Bigarray_helpe[2][2],
              kind,
              layout,
              dim - 1 | 0,
              _ah_);
    }
    return caml_call2(Base_Sequence[77], dim, _ag_);
   }
   function dim2(r){return r[2];}
   function dim1(r){return r[1];}
   function _a_(r, v){return [0, r[1], v];}
   var
    _b_ = 0,
    dim2$0 = [0, function(param){return 0;}, cst_dim2, _b_, dim2, _a_];
   function _c_(r, v){return [0, v, r[2]];}
   var
    _d_ = 0,
    dim1$0 = [0, function(param){return 0;}, cst_dim1, _d_, dim1, _c_];
   function shrink$0(field, src){
    var
     _ac_ = runtime.caml_ba_dim_2(src),
     dims = [0, caml_ba_dim_1(src), _ac_];
    if(0 === caml_call2(Base_Field[3], field, dims)) return Base_Sequence[38];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout),
     match = caml_call3(Base_Field[6], field, dims, Base_Int[41]),
     dim2 = match[2],
     dim1 = match[1];
    function _ad_(to_skip){
     var to_skip$0 = to_skip + offset | 0;
     function skip(i){return i < to_skip$0 ? i : i + 1 | 0;}
     function _af_(dim1, dim2){
      var
       match = caml_call3(Base_Field[6], field, [0, dim1, dim2], skip),
       dim2$0 = match[2],
       dim1$0 = match[1];
      return runtime.caml_ba_get_2(src, dim1$0, dim2$0);
     }
     return caml_call5
             (Base_quickcheck_Bigarray_helpe[3][2],
              kind,
              layout,
              dim1,
              dim2,
              _af_);
    }
    var _ae_ = caml_call2(Base_Field[3], field, dims);
    return caml_call2(Base_Sequence[77], _ae_, _ad_);
   }
   function float32_mat(src){
    var
     _aa_ = [0, shrink$0(dim2$0, src), 0],
     _ab_ = [0, shrink$0(dim1$0, src), _aa_];
    return caml_call1(Base_Sequence[68], _ab_);
   }
   function option(value_t){
    return function(param){
     if(! param) return Base_Sequence[38];
     var
      value = param[1],
      _Y_ = Base_Option[20],
      _Z_ = caml_call1(value_t, value),
      ___ = caml_call2(Base_Sequence[32], _Z_, _Y_),
      _$_ = caml_call1(Base_Sequence[99], 0);
     return caml_call2(Base_Sequence[63], _$_, ___);};
   }
   function list(elt_t){
    return fixed_point
            (function(list_t){
              return function(param){
               if(! param) return Base_Sequence[38];
               var tail = param[2], head = param[1], _Q_ = 0;
               function _R_(tail){return [0, head, tail];}
               var
                _S_ = caml_call1(list_t, tail),
                _T_ = [0, caml_call2(Base_Sequence[32], _S_, _R_), _Q_];
               function _U_(head){return [0, head, tail];}
               var
                _V_ = caml_call1(elt_t, head),
                _W_ = [0, caml_call2(Base_Sequence[32], _V_, _U_), _T_],
                _X_ = [0, caml_call1(Base_Sequence[99], tail), _W_];
               return caml_call1(Base_Sequence[68], _X_);};
             });
   }
   var
    _e_ = Base_String[16],
    _f_ = Base_String[123],
    string = map(list(atomic), _f_, _e_),
    bytes = map(string, Base_Bytes[25], Base_Bytes[26]);
   function array(t){
    var _O_ = Base_Array[19], _P_ = Base_Array[39];
    return map(list(t), _P_, _O_);
   }
   function ref(t){
    function _L_(_N_){return _N_[1];}
    return map(t, function(_M_){return [0, _M_];}, _L_);
   }
   function lazy_t(t){
    function _I_(_J_){
     var _K_ = caml_obj_tag(_J_);
     return 250 === _K_
             ? _J_[1]
             : 246 === _K_ ? caml_call1(CamlinternalLazy[2], _J_) : _J_;
    }
    return map(t, Base_Lazy[21], _I_);
   }
   var
    sexp =
      fixed_point
       (function(shrinker){
         return function(param){
          if(0 === param[0]) return Base_Sequence[38];
          var
           l = param[1],
           _G_ = caml_call1(list(shrinker), l),
           _H_ = Base_Sequence[32],
           shrink_list = caml_call2(_H_, _G_, function(l){return [1, l];}),
           shrink_tree = caml_call1(Base_Sequence[104], l);
          return caml_call1
                  (Base_Sequence[68], [0, shrink_list, [0, shrink_tree, 0]]);};
        });
   function either(fst_t, snd_t){
    return function(either){
     if(0 === either[0]){
      var
       fst = either[1],
       _C_ = Base_Either[17],
       _D_ = caml_call1(fst_t, fst);
      return caml_call2(Base_Sequence[32], _D_, _C_);
     }
     var snd = either[1], _E_ = Base_Either[18], _F_ = caml_call1(snd_t, snd);
     return caml_call2(Base_Sequence[32], _F_, _E_);};
   }
   function result(ok_t, err_t){
    function _A_(param){
     if(0 === param[0]){var ok = param[1]; return [0, ok];}
     var err = param[1];
     return [1, err];
    }
    function _B_(param){
     if(0 === param[0]){var ok = param[1]; return [0, ok];}
     var err = param[1];
     return [1, err];
    }
    return map(either(ok_t, err_t), _B_, _A_);
   }
   function map_tree_using_comparator(comparator, key_t, data_t){
    return function(tree){
     var alist = caml_call2(Base_Map[104][3][66], 0, tree);
     function _q_(param){
      var k = param[1];
      return caml_call3(Base_Map[104][3][39], comparator, tree, k);
     }
     var
      _r_ = caml_call1(Base_Sequence[104], alist),
      drop_keys = caml_call2(Base_Sequence[32], _r_, _q_);
     function _s_(param){
      var
       data = param[2],
       key = param[1],
       tree$0 = caml_call3(Base_Map[104][3][39], comparator, tree, key);
      function _y_(smaller_key){
       var
        match =
          caml_call4
           (Base_Map[104][3][29], comparator, tree$0, smaller_key, data);
       if(typeof match === "number") return 0;
       var tree = match[2];
       return [0, tree];
      }
      var _z_ = caml_call1(key_t, key);
      return caml_call2(Base_Sequence[78], _z_, _y_);
     }
     var
      _t_ = caml_call2(Base_List[76], alist, _s_),
      shrink_keys = caml_call1(Base_Sequence[68], _t_);
     function _u_(param){
      var data = param[2], key = param[1];
      function _w_(smaller_data){
       return caml_call4
               (Base_Map[104][3][31], comparator, tree, key, smaller_data);
      }
      var _x_ = caml_call1(data_t, data);
      return caml_call2(Base_Sequence[32], _x_, _w_);
     }
     var
      _v_ = caml_call2(Base_List[76], alist, _u_),
      shrink_data = caml_call1(Base_Sequence[68], _v_);
     return caml_call1
             (Base_Sequence[68],
              [0, drop_keys, [0, shrink_keys, [0, shrink_data, 0]]]);};
   }
   function set_tree_using_comparator(comparator, elt_t){
    return function(tree){
     var list = caml_call1(Base_Set[74][3][15], tree);
     function _k_(elt){
      return caml_call3(Base_Set[74][3][20], comparator, tree, elt);
     }
     var
      _l_ = caml_call1(Base_Sequence[104], list),
      drop_elts = caml_call2(Base_Sequence[32], _l_, _k_);
     function _m_(elt){
      var tree$0 = caml_call3(Base_Set[74][3][20], comparator, tree, elt);
      function _o_(smaller_elt){
       return caml_call3(Base_Set[74][3][18], comparator, tree$0, smaller_elt)
               ? 0
               : [0,
                 caml_call3
                  (Base_Set[74][3][19], comparator, tree$0, smaller_elt)];
      }
      var _p_ = caml_call1(elt_t, elt);
      return caml_call2(Base_Sequence[78], _p_, _o_);
     }
     var
      _n_ = caml_call2(Base_List[76], list, _m_),
      shrink_elts = caml_call1(Base_Sequence[68], _n_);
     return caml_call1(Base_Sequence[68], [0, drop_elts, [0, shrink_elts, 0]]);};
   }
   function map_t(key_t, data_t){
    return function(map_t){
     var
      comparator = caml_call1(Base_Map[5], map_t),
      _i_ = Base_Map[104][68],
      _j_ = caml_call1(Base_Map[104][95], comparator),
      t = map(map_tree_using_comparator(comparator, key_t, data_t), _j_, _i_);
     return caml_call1(t, map_t);};
   }
   function set_t(elt_t){
    return function(set_t){
     var
      comparator = caml_call1(Base_Set[4], set_t),
      _g_ = Base_Set[74][47],
      _h_ = caml_call1(Base_Set[74][64], comparator),
      t = map(set_tree_using_comparator(comparator, elt_t), _h_, _g_);
     return caml_call1(t, set_t);};
   }
   var
    Base_quickcheck_Shrinker =
      [0,
       atomic,
       atomic,
       atomic,
       atomic,
       string,
       bytes,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       float32_vec,
       float32_vec,
       float32_vec,
       float32_mat,
       float32_mat,
       map_t,
       set_t,
       map_tree_using_comparator,
       set_tree_using_comparator,
       map,
       filter,
       filter_map,
       fixed_point,
       of_lazy,
       create,
       shrink];
   runtime.caml_register_global
    (17, Base_quickcheck_Shrinker, "Base_quickcheck__Shrinker");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_quickcheck_Test_intf = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_Test_intf, "Base_quickcheck__Test_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test
//# unitInfo: Requires: Base, Base__Backtrace, Base__Error, Base__Field, Base__List, Base__Or_error, Base__Random, Base__Sequence, Base__String, Base_quickcheck__Generator, Base_quickcheck__Shrinker, Base_quickcheck__Test_intf, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_seed$0 = "seed",
    cst_shrink_count$0 = "shrink_count",
    cst_sizes$0 = "sizes",
    cst_test_count$0 = "test_count";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "...",
    names =
      [0,
       cst_seed$0,
       [0, cst_test_count$0, [0, cst_shrink_count$0, [0, cst_sizes$0, 0]]]],
    Base_Backtrace = global_data.Base__Backtrace,
    Base_Or_error = global_data.Base__Or_error,
    Base_Error = global_data.Base__Error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Sequence = global_data.Base__Sequence,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base = global_data.Base,
    Splittable_random = global_data.Splittable_random,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Random = global_data.Base__Random,
    Base_Field = global_data.Base__Field,
    Base_List = global_data.Base__List,
    _w_ = [0, 0],
    _x_ = [0, "error"],
    _y_ = [0, "input"],
    cst_Base_quickcheck_Test_run_t = "Base_quickcheck.Test.run: test failed",
    _u_ = [0, 0],
    _v_ = [0, 0],
    _s_ = [0, "number_of_size_values"],
    _t_ = [0, cst_test_count$0],
    cst_Base_quickcheck_Test_run_i =
      "Base_quickcheck.Test.run: insufficient size values for test count",
    _k_ = [0, cst_sizes$0],
    _l_ = [0, cst_shrink_count$0],
    _m_ = [0, cst_test_count$0],
    _n_ = [0, cst_seed$0],
    _a_ = [0, "Deterministic"],
    _b_ = [0, "Nondeterministic"],
    cst_sizes = cst_sizes$0,
    cst_shrink_count = cst_shrink_count$0,
    cst_test_count = cst_test_count$0,
    cst_seed = cst_seed$0,
    _o_ = [0, 104758188],
    _p_ = [0, 104758188],
    _r_ = [0, "an arbitrary but deterministic string"];
   function sexp_of_t(param){
    if(! param) return _b_;
    var arg0_001 = param[1], res0_002 = caml_call1(Base[164], arg0_001);
    return [1, [0, _a_, [0, res0_002, 0]]];
   }
   var Seed = [0, sexp_of_t];
   function sizes(r){return r[4];}
   function shrink_count(r){return r[3];}
   function test_count(r){return r[2];}
   function seed(r){return r[1];}
   function _c_(r, v){return [0, r[1], r[2], r[3], v];}
   var
    _d_ = 0,
    sizes$0 = [0, function(param){return 0;}, cst_sizes, _d_, sizes, _c_];
   function _e_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _f_ = 0,
    shrink_count$0 =
      [0,
       function(param){return 0;},
       cst_shrink_count,
       _f_,
       shrink_count,
       _e_];
   function _g_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _h_ = 0,
    test_count$0 =
      [0, function(param){return 0;}, cst_test_count, _h_, test_count, _g_];
   function _i_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _j_ = 0,
    seed$0 = [0, function(param){return 0;}, cst_seed, _j_, seed, _i_];
   function make_creator
   (seed_fun, test_count_fun, shrink_count_fun, sizes_fun, compile_acc){
    var
     match = caml_call2(seed_fun, seed$0, compile_acc),
     compile_acc$0 = match[2],
     seed_gen = match[1],
     match$0 = caml_call2(test_count_fun, test_count$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     test_count_gen = match$0[1],
     match$1 = caml_call2(shrink_count_fun, shrink_count$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     shrink_count_gen = match$1[1],
     match$2 = caml_call2(sizes_fun, sizes$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     sizes_gen = match$2[1];
    return [0,
            function(acc){
             var
              seed = caml_call1(seed_gen, acc),
              test_count = caml_call1(test_count_gen, acc),
              shrink_count = caml_call1(shrink_count_gen, acc),
              sizes = caml_call1(sizes_gen, acc);
             return [0, seed, test_count, shrink_count, sizes];
            },
            compile_acc$3];
   }
   function create(seed, test_count, shrink_count, sizes){return [0, seed, test_count, shrink_count, sizes];
   }
   function map(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _aA_ = caml_call1(sizes_fun, sizes$0),
     _aB_ = caml_call1(shrink_count_fun, shrink_count$0),
     _aC_ = caml_call1(test_count_fun, test_count$0);
    return [0, caml_call1(seed_fun, seed$0), _aC_, _aB_, _aA_];
   }
   function iter(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    caml_call1(seed_fun, seed$0);
    caml_call1(test_count_fun, test_count$0);
    caml_call1(shrink_count_fun, shrink_count$0);
    return caml_call1(sizes_fun, sizes$0);
   }
   function fold(init, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    return caml_call2
            (sizes_fun,
             caml_call2
              (shrink_count_fun,
               caml_call2
                (test_count_fun,
                 caml_call2(seed_fun, init, seed$0),
                 test_count$0),
               shrink_count$0),
             sizes$0);
   }
   function map_poly(record){
    var
     _ax_ = [0, caml_call1(record[1], sizes$0), 0],
     _ay_ = [0, caml_call1(record[1], shrink_count$0), _ax_],
     _az_ = [0, caml_call1(record[1], test_count$0), _ay_];
    return [0, caml_call1(record[1], seed$0), _az_];
   }
   function for_all(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _au_ = caml_call1(seed_fun, seed$0),
     _av_ = _au_ ? caml_call1(test_count_fun, test_count$0) : _au_,
     _aw_ = _av_ ? caml_call1(shrink_count_fun, shrink_count$0) : _av_;
    return _aw_ ? caml_call1(sizes_fun, sizes$0) : _aw_;
   }
   function exists(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _at_ = caml_call1(seed_fun, seed$0),
     _ar_ = _at_ || caml_call1(test_count_fun, test_count$0),
     _as_ = _ar_ || caml_call1(shrink_count_fun, shrink_count$0);
    return _as_ ? _as_ : caml_call1(sizes_fun, sizes$0);
   }
   function to_list(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ao_ = [0, caml_call1(sizes_fun, sizes$0), 0],
     _ap_ = [0, caml_call1(shrink_count_fun, shrink_count$0), _ao_],
     _aq_ = [0, caml_call1(test_count_fun, test_count$0), _ap_];
    return [0, caml_call1(seed_fun, seed$0), _aq_];
   }
   function iter$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    caml_call3(seed_fun, seed$0, record, record[1]);
    caml_call3(test_count_fun, test_count$0, record, record[2]);
    caml_call3(shrink_count_fun, shrink_count$0, record, record[3]);
    return caml_call3(sizes_fun, sizes$0, record, record[4]);
   }
   function fold$0
   (record, init, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var _al_ = record[4], _am_ = record[3], _an_ = record[2];
    return caml_call4
            (sizes_fun,
             caml_call4
              (shrink_count_fun,
               caml_call4
                (test_count_fun,
                 caml_call4(seed_fun, init, seed$0, record, record[1]),
                 test_count$0,
                 record,
                 _an_),
               shrink_count$0,
               record,
               _am_),
             sizes$0,
             record,
             _al_);
   }
   function for_all$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ai_ = caml_call3(seed_fun, seed$0, record, record[1]),
     _aj_ =
       _ai_
        ? caml_call3(test_count_fun, test_count$0, record, record[2])
        : _ai_,
     _ak_ =
       _aj_
        ? caml_call3(shrink_count_fun, shrink_count$0, record, record[3])
        : _aj_;
    return _ak_ ? caml_call3(sizes_fun, sizes$0, record, record[4]) : _ak_;
   }
   function exists$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ah_ = caml_call3(seed_fun, seed$0, record, record[1]),
     _af_ =
       _ah_ || caml_call3(test_count_fun, test_count$0, record, record[2]),
     _ag_ =
       _af_ || caml_call3(shrink_count_fun, shrink_count$0, record, record[3]);
    return _ag_ ? _ag_ : caml_call3(sizes_fun, sizes$0, record, record[4]);
   }
   function to_list$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ac_ = [0, caml_call3(sizes_fun, sizes$0, record, record[4]), 0],
     _ad_ =
       [0,
        caml_call3(shrink_count_fun, shrink_count$0, record, record[3]),
        _ac_],
     _ae_ =
       [0, caml_call3(test_count_fun, test_count$0, record, record[2]), _ad_];
    return [0, caml_call3(seed_fun, seed$0, record, record[1]), _ae_];
   }
   function map$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _$_ = caml_call3(sizes_fun, sizes$0, record, record[4]),
     _aa_ = caml_call3(shrink_count_fun, shrink_count$0, record, record[3]),
     _ab_ = caml_call3(test_count_fun, test_count$0, record, record[2]);
    return [0,
            caml_call3(seed_fun, seed$0, record, record[1]),
            _ab_,
            _aa_,
            _$_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields];
   function sexp_of_t$0(param){
    var
     sizes_010 = param[4],
     shrink_count_008 = param[3],
     test_count_006 = param[2],
     seed_004 = param[1],
     sexp_of_elt = Base[119],
     match = caml_call2(Base_Sequence[88], sizes_010, 100),
     suffix = match[2],
     prefix = match[1],
     prefix$0 = caml_call2(Base_List[76], prefix, sexp_of_elt),
     bnds_003 = 0,
     suffix$0 =
       caml_call1(Base_Sequence[6], suffix)
        ? 0
        : [0, caml_call1(Sexplib0_Sexp_conv[7], cst), 0],
     arg_011 = [1, caml_call2(Base[178], prefix$0, suffix$0)],
     bnds_003$0 = [0, [1, [0, _k_, [0, arg_011, 0]]], bnds_003],
     arg_009 = caml_call1(Base[119], shrink_count_008),
     bnds_003$1 = [0, [1, [0, _l_, [0, arg_009, 0]]], bnds_003$0],
     arg_007 = caml_call1(Base[119], test_count_006),
     bnds_003$2 = [0, [1, [0, _m_, [0, arg_007, 0]]], bnds_003$1],
     arg_005 = caml_call1(Seed[1], seed_004),
     bnds_003$3 = [0, [1, [0, _n_, [0, arg_005, 0]]], bnds_003$2];
    return [1, bnds_003$3];
   }
   var
    _q_ = caml_call5(Base_List[121], 0, _p_, _o_, 0, 30),
    default_config =
      [0, _r_, 10000, 10000, caml_call1(Base_Sequence[97], _q_)],
    lazy_nondeterministic_state =
      [246, function(___){return caml_call2(Base_Random[18][3], 0, 0);}];
   function with_sample(f, opt, _W_, generator){
    if(opt) var sth = opt[1], config = sth; else var config = default_config;
    if(_W_) var sth$0 = _W_[1], examples = sth$0; else var examples = 0;
    var match = config[1];
    if(match)
     var
      string = match[1],
      _O_ = runtime.Base_hash_string(string),
      random = caml_call1(Splittable_random[1][2], _O_);
    else
     var
      _P_ = runtime.caml_obj_tag(lazy_nondeterministic_state),
      _Q_ =
        250 === _P_
         ? lazy_nondeterministic_state[1]
         : 246
           === _P_
           ? caml_call1(CamlinternalLazy[2], lazy_nondeterministic_state)
           : lazy_nondeterministic_state,
      random = caml_call1(Splittable_random[1][1], _Q_);
    function _R_(param){
     var number_of_size_values = param[2], sizes = param[1];
     if(config[2] <= number_of_size_values) return 0;
     var match = caml_call1(Base_Sequence[39], sizes);
     if(match){
      var match$0 = match[1], remaining_sizes = match$0[2], size = match$0[1];
      return [0,
              [0, size, [0, remaining_sizes, number_of_size_values + 1 | 0]]];
     }
     var
      _X_ =
        [0,
         [1, [0, _s_, [0, caml_call1(Base[119], number_of_size_values), 0]]],
         0],
      _Y_ = [0, [1, [0, _t_, [0, caml_call1(Base[119], config[2]), 0]]], _X_],
      _Z_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Test_run_i),
          _Y_]];
     return caml_call1(Base[202], _Z_);
    }
    var
     _S_ = caml_call2(Base_Sequence[42], [0, config[4], 0], _R_),
     _T_ = Base_Sequence[32],
     _U_ =
       caml_call2
        (_T_,
         _S_,
         function(size){
          return caml_call3
                  (Base_quickcheck_Generator[118], generator, size, random);
         }),
     _V_ = caml_call1(Base_Sequence[104], examples),
     sequence = caml_call2(Base_Sequence[63], _V_, _U_);
    return caml_call1(f, sequence);
   }
   function result(f, opt, _J_, m){
    if(opt) var sth = opt[1], config = sth; else var config = default_config;
    if(_J_) var sth$0 = _J_[1], examples = sth$0; else var examples = 0;
    var _K_ = m[2], _L_ = [0, examples], _M_ = [0, config];
    return with_sample
            (function(sequence){
              function _N_(param, input){
               var match = caml_call1(f, input);
               if(0 === match[0]) return _u_;
               var error = match[1];
               return [1, [0, input, error]];
              }
              var match$2 = caml_call3(Base_Sequence[9], sequence, 0, _N_);
              if(0 === match$2[0]) return _v_;
              var
               match$3 = match$2[1],
               error$1 = match$3[2],
               input$0 = match$3[1],
               shrinker = m[3],
               shrink_count$1 = config[3],
               alternates$2 =
                 caml_call2(Base_quickcheck_Shrinker[37], shrinker, input$0),
               shrink_count = shrink_count$1,
               alternates = alternates$2,
               input = input$0,
               error = error$1;
              for(;;){
               if(0 !== shrink_count){
                var
                 shrink_count$0 = shrink_count - 1 | 0,
                 match = caml_call1(Base_Sequence[39], alternates);
                if(match){
                 var
                  match$0 = match[1],
                  alternates$0 = match$0[2],
                  alternate = match$0[1],
                  match$1 = caml_call1(f, alternate);
                 if(0 === match$1[0]){
                  var
                   shrink_count = shrink_count$0,
                   alternates = alternates$0;
                  continue;
                 }
                 var
                  error$0 = match$1[1],
                  alternates$1 =
                    caml_call2
                     (Base_quickcheck_Shrinker[37], shrinker, alternate),
                  shrink_count = shrink_count$0,
                  alternates = alternates$1,
                  input = alternate,
                  error = error$0;
                 continue;
                }
               }
               return [1, [0, input, error]];
              }
             },
             _M_,
             _L_,
             _K_);
   }
   function run(f, config, examples, M){
    function f$0(x){
     function _H_(param){return caml_call1(f, x);}
     var _I_ = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return caml_call2(Base_Or_error[29], _I_, _H_);
    }
    var match = result(f$0, config, examples, M);
    if(0 === match[0]) return _w_;
    var
     match$0 = match[1],
     error = match$0[2],
     input = match$0[1],
     _E_ = [0, [1, [0, _x_, [0, caml_call1(Base_Error[6], error), 0]]], 0],
     _F_ = [0, [1, [0, _y_, [0, caml_call1(M[1], input), 0]]], _E_],
     _G_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Test_run_t),
         _F_]];
    return caml_call1(Base_Or_error[35], _G_);
   }
   function with_sample_exn(f, config, examples, generator){
    function f$0(x){
     function _D_(param){return caml_call1(f, x);}
     return caml_call2(Base_Or_error[28], 0, _D_);
    }
    var _C_ = with_sample(f$0, config, examples, generator);
    return caml_call1(Base_Or_error[31], _C_);
   }
   function run_exn(f, config, examples, testable){
    function f$0(x){
     function _A_(param){return caml_call1(f, x);}
     var _B_ = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return caml_call2(Base_Or_error[28], _B_, _A_);
    }
    var _z_ = run(f$0, config, examples, testable);
    return caml_call1(Base_Or_error[31], _z_);
   }
   var
    Base_quickcheck_Test =
      [0,
       [0,
        Seed,
        sizes,
        shrink_count,
        test_count,
        seed,
        [0,
         names,
         sizes$0,
         shrink_count$0,
         test_count$0,
         seed$0,
         fold,
         make_creator,
         create,
         map,
         iter,
         for_all,
         exists,
         to_list,
         map_poly,
         Direct],
        sexp_of_t$0],
       default_config,
       run,
       run_exn,
       result,
       with_sample,
       with_sample_exn];
   runtime.caml_register_global
    (37, Base_quickcheck_Test, "Base_quickcheck__Test");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer
//# unitInfo: Requires: Base, Base__Array, Base__Bool, Base__Bytes, Base__Char, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__List, Base__Map, Base__Nativeint, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Generator, Base_quickcheck__Observer0, CamlinternalLazy, Splittable_random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_Hash = global_data.Base__Hash,
    Splittable_random = global_data.Splittable_random,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Array = global_data.Base__Array,
    Base = global_data.Base,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Bool = global_data.Base__Bool,
    Base_Char = global_data.Base__Char,
    Base_Int = global_data.Base__Int,
    Base_Int32 = global_data.Base__Int32,
    Base_Int63 = global_data.Base__Int63,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Float = global_data.Base__Float,
    Base_String = global_data.Base__String,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Bytes = global_data.Base__Bytes,
    opaque = Base_quickcheck_Observer0[1],
    create = Base_quickcheck_Observer0[2],
    observe = Base_quickcheck_Observer0[3],
    _a_ = [0, 0];
   function unmap(t, f){
    return caml_call1
            (create,
             function(x, size, hash){
              return caml_call4(observe, t, caml_call1(f, x), size, hash);
             });
   }
   function of_hash_fold(f){
    return caml_call1
            (create, function(x, param, hash){return caml_call2(f, hash, x);});
   }
   function of_lazy(lazy_t){
    return caml_call1
            (create,
             function(x, size, hash){
              var
               _s_ = caml_obj_tag(lazy_t),
               _t_ =
                 250 === _s_
                  ? lazy_t[1]
                  : 246
                    === _s_
                    ? caml_call1(CamlinternalLazy[2], lazy_t)
                    : lazy_t;
              return caml_call4(observe, _t_, x, size, hash);
             });
   }
   function fixed_point(wrap){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(wrap, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   var
    bool = of_hash_fold(Base_Bool[3]),
    char$0 = of_hash_fold(Base_Char[3]),
    int$0 = of_hash_fold(Base_Int[6]),
    int32 = of_hash_fold(Base_Int32[6]),
    int63 = of_hash_fold(Base_Int63[6]),
    int64 = of_hash_fold(Base_Int64[6]),
    nativeint = of_hash_fold(Base_Nativeint[6]),
    float$0 = of_hash_fold(Base_Float[4]),
    string = of_hash_fold(Base_String[26]),
    sexp = of_hash_fold(Base[84][1]),
    bigstring =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[101])),
    float32_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[109])),
    float64_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[109])),
    float32_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[109])),
    float64_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[109])),
    bytes = unmap(string, Base_Bytes[26]);
   function either(fst_t, snd_t){
    return caml_call1
            (create,
             function(either, size, hash){
              if(0 === either[0]){
               var fst = either[1];
               return caml_call4
                       (observe, fst_t, fst, size, caml_call2(Base[116], hash, 1));
              }
              var snd = either[1];
              return caml_call4
                      (observe, snd_t, snd, size, caml_call2(Base[116], hash, 2));
             });
   }
   function result(ok_t, err_t){
    function _r_(param){
     if(0 === param[0]){var ok = param[1]; return [0, ok];}
     var err = param[1];
     return [1, err];
    }
    return unmap(either(ok_t, err_t), _r_);
   }
   function both(fst_t, snd_t){
    return caml_call1
            (create,
             function(param, size, hash){
              var
               snd = param[2],
               fst = param[1],
               hash$0 = caml_call4(observe, fst_t, fst, size, hash),
               hash$1 = caml_call4(observe, snd_t, snd, size, hash$0);
              return hash$1;
             });
   }
   function option(value_t){
    function _q_(param){
     if(! param) return _a_;
     var value = param[1];
     return [1, value];
    }
    return unmap(either(opaque, value_t), _q_);
   }
   function list(elt_t){
    return caml_call1
            (create,
             function(list, size, hash){
              var
               _m_ = caml_call1(Base_Hash[9], hash),
               random = caml_call1(Splittable_random[1][2], _m_),
               length = caml_call1(Base_List[7], list),
               _n_ =
                 caml_call3
                  (Base_quickcheck_Generator[53], [0, length], [0, length], 0),
               sizes =
                 caml_call3(Base_quickcheck_Generator[118], _n_, size, random);
              function _o_(hash, elt, size){
               return caml_call4
                       (observe, elt_t, elt, size, caml_call2(Base[116], hash, 1));
              }
              var _p_ = caml_call2(Base[116], hash, 0);
              return caml_call4(Base_List[46], list, sizes, _p_, _o_);
             });
   }
   function array(t){var _l_ = Base_Array[19]; return unmap(list(t), _l_);}
   function ref(t){return unmap(t, function(_k_){return _k_[1];});}
   function lazy_t(t){
    return unmap
            (t,
             function(_i_){
              var _j_ = caml_obj_tag(_i_);
              return 250 === _j_
                      ? _i_[1]
                      : 246 === _j_ ? caml_call1(CamlinternalLazy[2], _i_) : _i_;
             });
   }
   function fn(dom, rng){
    return caml_call1
            (create,
             function(f, size, hash){
              var
               _f_ = caml_call1(Base_Hash[9], hash),
               random = caml_call1(Splittable_random[1][2], _f_),
               _g_ = caml_call3(Base_quickcheck_Generator[53], 0, 0, 0),
               sizes =
                 caml_call3
                  (Base_quickcheck_Generator[118], _g_, size * 2 | 0, random);
              function _h_(hash, size){
               var
                x =
                  caml_call3
                   (Base_quickcheck_Generator[118], dom, size, random);
               return caml_call4(observe, rng, caml_call1(f, x), size, hash);
              }
              return caml_call3(Base_List[10], sizes, hash, _h_);
             });
   }
   function map_tree(key_obs, data_obs){
    var arg = Base_Map[104][3][66];
    function _e_(eta){return caml_call2(arg, 0, eta);}
    return unmap(list(both(key_obs, data_obs)), _e_);
   }
   function set_tree(elt_obs){
    var _d_ = Base_Set[74][3][15];
    return unmap(list(elt_obs), _d_);
   }
   function map_t(key_obs, data_obs){
    var _c_ = Base_Map[104][68];
    return unmap(map_tree(key_obs, data_obs), _c_);
   }
   function set_t(elt_obs){
    var _b_ = Base_Set[74][47];
    return unmap(set_tree(elt_obs), _b_);
   }
   var
    Base_quickcheck_Observer =
      [0,
       opaque,
       opaque,
       bool,
       char$0,
       string,
       bytes,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t,
       set_t,
       map_tree,
       set_tree,
       of_hash_fold,
       unmap,
       fixed_point,
       of_lazy,
       create,
       observe];
   runtime.caml_register_global
    (22, Base_quickcheck_Observer, "Base_quickcheck__Observer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Export
//# unitInfo: Requires: Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    quickcheck_generator_unit = Base_quickcheck_Generator[1],
    quickcheck_generator_bool = Base_quickcheck_Generator[2],
    quickcheck_generator_char = Base_quickcheck_Generator[3],
    quickcheck_generator_string = Base_quickcheck_Generator[4],
    quickcheck_generator_bytes = Base_quickcheck_Generator[5],
    quickcheck_generator_int = Base_quickcheck_Generator[6],
    quickcheck_generator_int32 = Base_quickcheck_Generator[7],
    quickcheck_generator_int64 = Base_quickcheck_Generator[9],
    quickcheck_generator_nativeint = Base_quickcheck_Generator[10],
    quickcheck_generator_float = Base_quickcheck_Generator[11],
    quickcheck_generator_option = Base_quickcheck_Generator[13],
    quickcheck_generator_list = Base_quickcheck_Generator[14],
    quickcheck_generator_array = Base_quickcheck_Generator[15],
    quickcheck_generator_ref = Base_quickcheck_Generator[16],
    quickcheck_generator_lazy_t = Base_quickcheck_Generator[17],
    quickcheck_observer_unit = Base_quickcheck_Observer[2],
    quickcheck_observer_bool = Base_quickcheck_Observer[3],
    quickcheck_observer_char = Base_quickcheck_Observer[4],
    quickcheck_observer_string = Base_quickcheck_Observer[5],
    quickcheck_observer_bytes = Base_quickcheck_Observer[6],
    quickcheck_observer_int = Base_quickcheck_Observer[7],
    quickcheck_observer_int32 = Base_quickcheck_Observer[8],
    quickcheck_observer_int64 = Base_quickcheck_Observer[10],
    quickcheck_observer_nativeint = Base_quickcheck_Observer[11],
    quickcheck_observer_float = Base_quickcheck_Observer[12],
    quickcheck_observer_option = Base_quickcheck_Observer[14],
    quickcheck_observer_list = Base_quickcheck_Observer[15],
    quickcheck_observer_array = Base_quickcheck_Observer[16],
    quickcheck_observer_ref = Base_quickcheck_Observer[17],
    quickcheck_observer_lazy_t = Base_quickcheck_Observer[18],
    quickcheck_shrinker_unit = Base_quickcheck_Shrinker[2],
    quickcheck_shrinker_bool = Base_quickcheck_Shrinker[3],
    quickcheck_shrinker_char = Base_quickcheck_Shrinker[4],
    quickcheck_shrinker_string = Base_quickcheck_Shrinker[5],
    quickcheck_shrinker_bytes = Base_quickcheck_Shrinker[6],
    quickcheck_shrinker_int = Base_quickcheck_Shrinker[7],
    quickcheck_shrinker_int32 = Base_quickcheck_Shrinker[8],
    quickcheck_shrinker_int64 = Base_quickcheck_Shrinker[10],
    quickcheck_shrinker_nativeint = Base_quickcheck_Shrinker[11],
    quickcheck_shrinker_float = Base_quickcheck_Shrinker[12],
    quickcheck_shrinker_option = Base_quickcheck_Shrinker[14],
    quickcheck_shrinker_list = Base_quickcheck_Shrinker[15],
    quickcheck_shrinker_array = Base_quickcheck_Shrinker[16],
    quickcheck_shrinker_ref = Base_quickcheck_Shrinker[17],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Shrinker[18],
    Base_quickcheck_Export =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t];
   runtime.caml_register_global
    (3, Base_quickcheck_Export, "Base_quickcheck__Export");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck
//# unitInfo: Requires: Base_quickcheck__Export
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Export = global_data.Base_quickcheck__Export,
    quickcheck_generator_unit = Base_quickcheck_Export[1],
    quickcheck_generator_bool = Base_quickcheck_Export[2],
    quickcheck_generator_char = Base_quickcheck_Export[3],
    quickcheck_generator_string = Base_quickcheck_Export[4],
    quickcheck_generator_bytes = Base_quickcheck_Export[5],
    quickcheck_generator_int = Base_quickcheck_Export[6],
    quickcheck_generator_int32 = Base_quickcheck_Export[7],
    quickcheck_generator_int64 = Base_quickcheck_Export[8],
    quickcheck_generator_nativeint = Base_quickcheck_Export[9],
    quickcheck_generator_float = Base_quickcheck_Export[10],
    quickcheck_observer_unit = Base_quickcheck_Export[11],
    quickcheck_observer_bool = Base_quickcheck_Export[12],
    quickcheck_observer_char = Base_quickcheck_Export[13],
    quickcheck_observer_string = Base_quickcheck_Export[14],
    quickcheck_observer_bytes = Base_quickcheck_Export[15],
    quickcheck_observer_int = Base_quickcheck_Export[16],
    quickcheck_observer_int32 = Base_quickcheck_Export[17],
    quickcheck_observer_int64 = Base_quickcheck_Export[18],
    quickcheck_observer_nativeint = Base_quickcheck_Export[19],
    quickcheck_observer_float = Base_quickcheck_Export[20],
    quickcheck_shrinker_unit = Base_quickcheck_Export[21],
    quickcheck_shrinker_bool = Base_quickcheck_Export[22],
    quickcheck_shrinker_char = Base_quickcheck_Export[23],
    quickcheck_shrinker_string = Base_quickcheck_Export[24],
    quickcheck_shrinker_bytes = Base_quickcheck_Export[25],
    quickcheck_shrinker_int = Base_quickcheck_Export[26],
    quickcheck_shrinker_int32 = Base_quickcheck_Export[27],
    quickcheck_shrinker_int64 = Base_quickcheck_Export[28],
    quickcheck_shrinker_nativeint = Base_quickcheck_Export[29],
    quickcheck_shrinker_float = Base_quickcheck_Export[30],
    quickcheck_generator_option = Base_quickcheck_Export[31],
    quickcheck_generator_list = Base_quickcheck_Export[32],
    quickcheck_generator_array = Base_quickcheck_Export[33],
    quickcheck_generator_ref = Base_quickcheck_Export[34],
    quickcheck_generator_lazy_t = Base_quickcheck_Export[35],
    quickcheck_observer_option = Base_quickcheck_Export[36],
    quickcheck_observer_list = Base_quickcheck_Export[37],
    quickcheck_observer_array = Base_quickcheck_Export[38],
    quickcheck_observer_ref = Base_quickcheck_Export[39],
    quickcheck_observer_lazy_t = Base_quickcheck_Export[40],
    quickcheck_shrinker_option = Base_quickcheck_Export[41],
    quickcheck_shrinker_list = Base_quickcheck_Export[42],
    quickcheck_shrinker_array = Base_quickcheck_Export[43],
    quickcheck_shrinker_ref = Base_quickcheck_Export[44],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Export[45],
    Private = [0],
    Base_quickcheck =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t,
       Private];
   runtime.caml_register_global(1, Base_quickcheck, "Base_quickcheck");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
