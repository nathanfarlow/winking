// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.1.1

//# unitInfo: Provides: Expect_test_config_types__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_config_types = [0];
   runtime.caml_register_global
    (0, Expect_test_config_types, "Expect_test_config_types__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_config_types__Expect_test_config_types_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Upon_unreleasable_issue = [0],
    Expect_test_config_types_Expec = [0, Upon_unreleasable_issue];
   runtime.caml_register_global
    (0,
     Expect_test_config_types_Expec,
     "Expect_test_config_types__Expect_test_config_types_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_config_types
//# unitInfo: Requires: Expect_test_config_types__Expect_test_config_types_intf, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Printf = global_data.Stdlib__Printf,
    equal = runtime.caml_equal,
    _a_ =
      [0,
       [11,
        "\n(* ",
        [2,
         0,
         [11,
          "expect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n",
          0]]],
       "\n(* %sexpect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n"],
    cst_CR = "CR ";
   function comment_prefix(param){return 15023 <= param ? cst_CR : cst;}
   function message_when_expectation_conta(t){
    var _b_ = comment_prefix(t);
    return caml_call2(Stdlib_Printf[4], _a_, _b_);
   }
   var
    Upon_unreleasable_issue =
      [0, equal, comment_prefix, message_when_expectation_conta],
    Expect_test_config_types = [0, Upon_unreleasable_issue];
   runtime.caml_register_global
    (4, Expect_test_config_types, "Expect_test_config_types");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJleHBlY3RfdGVzdF9jb25maWdfdHlwZXMuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVxdWFsIiwiY29tbWVudF9wcmVmaXgiLCJtZXNzYWdlX3doZW5fZXhwZWN0YXRpb25fY29udGEiLCJ0Il0sInNvdXJjZXMiOlsiL2hvbWUvbmF0aGFuLy5vcGFtL2RlZmF1bHQvbGliL3BweF9leHBlY3QvY29uZmlnX3R5cGVzL2V4cGVjdF90ZXN0X2NvbmZpZ190eXBlc19pbnRmLm1sIiwiL2hvbWUvbmF0aGFuLy5vcGFtL2RlZmF1bHQvbGliL3BweF9leHBlY3QvY29uZmlnX3R5cGVzL2V4cGVjdF90ZXN0X2NvbmZpZ190eXBlcy5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7RTs7Ozs7OztHQUFpQzs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQ1EzQkE7Ozs7Ozs7Ozs7OztZQUVBQyxzQkFBaUIscUNBRW1CO1lBR3BDQywrQkFBNENDO0lBUTVDLFVBYkFGLGVBSzRDRTtJQVE1QztHQUFrQjtHQWxCUzs7VUFHM0JILE9BRUFDLGdCQUtBQzs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBVcG9uX3VucmVsZWFzYWJsZV9pc3N1ZSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIFsgYENSICgqKiBMZWF2ZXMgYSBDUiwgc28gdGhhdCBmZWF0dXJlcyBjYW5ub3QgYmUgcmVsZWFzZWQuICopXG4gICAgfCBgV2FybmluZ19mb3JfY29sbGVjdG9yX3Rlc3RpbmcgKCoqIE9ubHkgZm9yIHBweF9leHBlY3QgdGVzdGluZzsgZG8gbm90IHVzZS4gKilcbiAgICBdXG5lbmRcblxubW9kdWxlIHR5cGUgUyA9IHNpZ1xuICBtb2R1bGUgSU9fcnVuIDogc2lnXG4gICAgdHlwZSAnYSB0XG4gIGVuZFxuXG4gICgqKiBBIG5vdy1sZWdhY3kgbW9uYWQuIFRoaXMgc2lnbmF0dXJlIHVzZWQgdG8gZGVjbGFyZSBhIFtmbHVzaF0gZnVuY3Rpb24uXG4gICAgICBbWyVleHBlY3Qub3V0cHV0XV0gc3RpbGwgcmV0dXJucyB0aGlzIHR5cGUuIE5vIG1lYW5pbmdmdWwgbW9uYWRpYyB3b3JrIGlzIGRvbmUuICopXG4gIG1vZHVsZSBJT19mbHVzaCA6IHNpZ1xuICAgIHR5cGUgJ2EgdFxuXG4gICAgdmFsIHJldHVybiA6ICdhIC0+ICdhIHRcbiAgICB2YWwgYmluZCA6ICdhIHQgLT4gZjooJ2EgLT4gJ2IgdCkgLT4gJ2IgdFxuICAgIHZhbCB0b19ydW4gOiAnYSB0IC0+ICdhIElPX3J1bi50XG4gIGVuZFxuXG4gICgqKiBSdW4gYW4gSU8gb3BlcmF0aW9uIHVudGlsIGNvbXBsZXRpb24gKilcbiAgdmFsIHJ1biA6ICh1bml0IC0+IHVuaXQgSU9fcnVuLnQpIC0+IHVuaXRcblxuICAoKiogU3luY2hyb25vdXMgY2hlY2sgdGhhdCB0aGVyZSBpcyBubyBwZW5kaW5nIG91dHB1dCBvbiBmaWxlIGRlc2NyaXB0aW9uIDAuIFdpdGggYXN5bmMsXG4gICAgICB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBvbiB0aGUgcmhzIG9mIGEgW0lPLmJpbmQgKGZsdXNoICgpKSAuLi5dIHRoZSBvdXRwdXQgaXNcbiAgICAgIGNvbXBsZXRlbHkgZmx1c2hlZCwgdGhhdCdzIHdoeSB3ZSBuZWVkIHRoaXMuICopXG4gIHZhbCBmbHVzaGVkIDogdW5pdCAtPiBib29sXG5cbiAgKCoqIFtzYW5pdGl6ZV0gY2FuIGJlIHVzZWQgdG8gbWFwIGFsbCBvdXRwdXQgc3RyaW5ncywgZS5nLiBmb3IgY2xlYW5zaW5nLiAqKVxuICB2YWwgc2FuaXRpemUgOiBzdHJpbmcgLT4gc3RyaW5nXG5cblxuICAoKiogW3Vwb25fdW5yZWxlYXNhYmxlX2lzc3VlXSBzcGVjaWZpZXMgaG93IHRvIGRlYWwgd2l0aCBvdXRwdXQgdGhhdCBzaG91bGQgbm90IGJlXG4gICAgICByZWxlYXNlZCBldmVuIGlmIGl0IGlzIGFjY2VwdGVkIChlLmcuIGJhY2t0cmFjZXMpLiBUaGUgZGVmYXVsdCBpcyBbYENSXS4gICopXG4gIHZhbCB1cG9uX3VucmVsZWFzYWJsZV9pc3N1ZSA6IFVwb25fdW5yZWxlYXNhYmxlX2lzc3VlLnRcbmVuZFxuXG4oKiogQ29uZmlndXJhdGlvbiBmb3IgcnVubmluZyBleHBlY3QgdGVzdHMgKilcbm1vZHVsZSB0eXBlIEV4cGVjdF90ZXN0X2NvbmZpZ190eXBlcyA9IHNpZ1xuICAoKiogVG8gY29uZmlndXJlIGV4cGVjdF90ZXN0LCBhZGQgdGhlIGZvbGxvd2luZyBhdCB0aGUgdG9wIG9mIHlvdXIgLm1sIGZpbGUsIG9yIGluIHNvbWVcbiAgICAgIGltcG9ydC5tbDpcblxuICAgICAge1tcbiAgICAgICAgbW9kdWxlIEV4cGVjdF90ZXN0X2NvbmZpZyA9IHN0cnVjdFxuICAgICAgICAgIGluY2x1ZGUgRXhwZWN0X3Rlc3RfY29uZmlnXG4gICAgICAgICAgbGV0IHByZV9yZWRpcmVjdF9ob29rICgpID0gLi4uXG4gICAgICAgIGVuZFxuICAgICAgXX1cblxuICAgICAgTm90ZSB0aGF0IHNpbmNlIGFsbCBleHBlY3QgdGVzdCBhcmUgYWxzbyBpbmxpbmUgdGVzdHMsIHRoZSBpbmxpbmUgdGVzdCBjb25maWd1cmF0aW9uXG4gICAgICBhbHNvIGFwcGxpZXMgdG8gYWxsIGV4cGVjdCB0ZXN0LlxuICAqKVxuXG4gIG1vZHVsZSBVcG9uX3VucmVsZWFzYWJsZV9pc3N1ZSA6IHNpZ1xuICAgIGluY2x1ZGUgbW9kdWxlIHR5cGUgb2YgVXBvbl91bnJlbGVhc2FibGVfaXNzdWVcblxuICAgIHZhbCBlcXVhbCA6IHQgLT4gdCAtPiBib29sXG4gICAgdmFsIGNvbW1lbnRfcHJlZml4IDogdCAtPiBzdHJpbmdcblxuICAgICgqKiBNZXNzYWdlIHRvIHByaW50IHdoZW4gYW4gZXhwZWN0YXRpb24gY29udGFpbnMgYSBiYWNrdHJhY2UgKilcbiAgICB2YWwgbWVzc2FnZV93aGVuX2V4cGVjdGF0aW9uX2NvbnRhaW5zX2JhY2t0cmFjZSA6IHQgLT4gc3RyaW5nXG4gIGVuZFxuXG4gIG1vZHVsZSB0eXBlIFMgPSBTXG5lbmRcbiIsIm1vZHVsZSB0eXBlIFMgPSBFeHBlY3RfdGVzdF9jb25maWdfdHlwZXNfaW50Zi5TXG5cbm1vZHVsZSB0eXBlIEV4cGVjdF90ZXN0X2NvbmZpZ190eXBlcyA9XG4gIEV4cGVjdF90ZXN0X2NvbmZpZ190eXBlc19pbnRmLkV4cGVjdF90ZXN0X2NvbmZpZ190eXBlc1xuXG5tb2R1bGUgVXBvbl91bnJlbGVhc2FibGVfaXNzdWUgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBFeHBlY3RfdGVzdF9jb25maWdfdHlwZXNfaW50Zi5VcG9uX3VucmVsZWFzYWJsZV9pc3N1ZVxuXG4gIGxldCBlcXVhbCB0MSB0MiA9IHQxID0gdDJcblxuICBsZXQgY29tbWVudF9wcmVmaXggPSBmdW5jdGlvblxuICAgIHwgYENSIC0+IFwiQ1IgXCJcbiAgICB8IGBXYXJuaW5nX2Zvcl9jb2xsZWN0b3JfdGVzdGluZyAtPiBcIlwiXG4gIDs7XG5cbiAgbGV0IG1lc3NhZ2Vfd2hlbl9leHBlY3RhdGlvbl9jb250YWluc19iYWNrdHJhY2UgdCA9XG4gICAgUHJpbnRmLnNwcmludGZcbiAgICAgIHt8XG4oKiAlc2V4cGVjdF90ZXN0X2NvbGxlY3RvcjogVGhpcyB0ZXN0IGV4cGVjdGF0aW9uIGFwcGVhcnMgdG8gY29udGFpbiBhIGJhY2t0cmFjZS5cbiAgIFRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQgYXMgYmFja3RyYWNlcyBhcmUgZnJhZ2lsZS5cbiAgIFBsZWFzZSBjaGFuZ2UgdGhpcyB0ZXN0IHRvIG5vdCBpbmNsdWRlIGEgYmFja3RyYWNlLiAqKVxuXG58fVxuICAgICAgKGNvbW1lbnRfcHJlZml4IHQpXG4gIDs7XG5lbmRcbiJdfQ==
